[{"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\index.tsx":"1","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\reportWebVitals.ts":"2","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\scrollToTop.tsx":"3","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\router\\routingMap.tsx":"4","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\providers\\AuthProvider.tsx":"5","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\cmsService.ts":"6","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\authenticationService.ts":"7","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\apiServices.ts":"8","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\Helpers\\authHelper.ts":"9","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\Helpers\\helper.ts":"10","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\constants\\defaultData.ts":"11","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Homepage.tsx":"12","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Admin\\OfferSubscriptionsListing.tsx":"13","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Landing.tsx":"14","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Admin\\Admin.tsx":"15","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Admin\\ContactUsListing.tsx":"16","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\axiosMainConfig.ts":"17","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\translations\\localStrings.ts":"18","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\Helpers\\publicInterfaces.ts":"19","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Footer.tsx":"20","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Register.tsx":"21","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Breadcrumb.tsx":"22","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\AuthCustomHeader.tsx":"23","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AppBox.tsx":"24","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\CustomHeader.tsx":"25","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersLanding.tsx":"26","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ContactUs\\ContactUsLanding.tsx":"27","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Login.tsx":"28","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\SubmitOTP.tsx":"29","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\Listing.tsx":"30","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageOffers\\Listing.tsx":"31","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Notifications\\Listing.tsx":"32","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageDocuments\\Listing.tsx":"33","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\InboxDetails.tsx":"34","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\InboxLanding.tsx":"35","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\translations\\english.ts":"36","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\translations\\arabic.ts":"37","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\Logo.tsx":"38","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\ToolBarLeft.tsx":"39","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\ToolBarRight.tsx":"40","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\invalid-field-error.tsx":"41","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ContactUs\\ContactUsForm.tsx":"42","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersDetails.tsx":"43","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersListing.tsx":"44","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\Navigation.tsx":"45","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\TotalNetWorth.tsx":"46","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\LiabilitiesLanding.tsx":"47","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\RelationManger.tsx":"48","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\NoResult.tsx":"49","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\pagination.tsx":"50","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\AssetsLanding.tsx":"51","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterMoreButtonControl.tsx":"52","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageDocuments\\DocumentForm.tsx":"53","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\InboxListing.tsx":"54","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Notifications\\NotificationsForm.tsx":"55","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageOffers\\OffersForm.tsx":"56","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersForm.tsx":"57","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\Inbox.tsx":"58","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\Requests.tsx":"59","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\Transactions.tsx":"60","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOffersLanding.tsx":"61","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\Facilities.tsx":"62","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Guarantees\\Guarantees.tsx":"63","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\cash\\Cash.tsx":"64","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\Investments.tsx":"65","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\Deposite.tsx":"66","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterButtonControl.tsx":"67","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterDropDownControl.tsx":"68","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Guarantees\\GuaranteesDetails.tsx":"69","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOfferRequest.tsx":"70","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Guarantees\\GuaranteesListing.tsx":"71","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesHistoricalPayment.tsx":"72","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesDetails.tsx":"73","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesOutstandingPayment.tsx":"74","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesListing.tsx":"75","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOffersListing.tsx":"76","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\DepositeRecievedProfit.tsx":"77","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\DepositeListing.tsx":"78","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\DepositeDetails.tsx":"79","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsBuyAndSell.tsx":"80","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsRecievedProfit.tsx":"81","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsListing.tsx":"82","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsDetails.tsx":"83","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterCommonControl.tsx":"84","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\TransactionListing.tsx":"85","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterCommonControl2.tsx":"86","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterCustomDateControl.tsx":"87","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterAmountControl.tsx":"88","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterDateControl.tsx":"89","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\cash\\CashDetails.tsx":"90","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\cash\\CashListing.tsx":"91","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOffersDetails.tsx":"92","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\NewRequest.tsx":"93","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\beneficiaries\\NewBeneficiaries.tsx":"94","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\beneficiaries\\BeneficiariesDetails.tsx":"95","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\beneficiaries\\BeneficiariesListing.tsx":"96","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\NewTransactions.tsx":"97","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\TransactionsDetails.tsx":"98","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\TransactionsListing.tsx":"99","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\RequestsDetails.tsx":"100","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\RequestsListing.tsx":"101"},{"size":1757,"mtime":1609229248289,"results":"102","hashOfConfig":"103"},{"size":440,"mtime":1606203477498,"results":"104","hashOfConfig":"103"},{"size":256,"mtime":1607602163365,"results":"105","hashOfConfig":"103"},{"size":1334,"mtime":1609229248293,"results":"106","hashOfConfig":"103"},{"size":4343,"mtime":1609229248292,"results":"107","hashOfConfig":"103"},{"size":22482,"mtime":1609229248294,"results":"108","hashOfConfig":"103"},{"size":4080,"mtime":1609229248293,"results":"109","hashOfConfig":"103"},{"size":780,"mtime":1609229248293,"results":"110","hashOfConfig":"103"},{"size":692,"mtime":1609229248267,"results":"111","hashOfConfig":"103"},{"size":20293,"mtime":1609229248267,"results":"112","hashOfConfig":"103"},{"size":680,"mtime":1609229248287,"results":"113","hashOfConfig":"103"},{"size":6912,"mtime":1609229248291,"results":"114","hashOfConfig":"103"},{"size":4705,"mtime":1609231001877,"results":"115","hashOfConfig":"103"},{"size":3003,"mtime":1609229248291,"results":"116","hashOfConfig":"103"},{"size":5842,"mtime":1609229248290,"results":"117","hashOfConfig":"103"},{"size":4710,"mtime":1609230455634,"results":"118","hashOfConfig":"103"},{"size":1805,"mtime":1609229248294,"results":"119","hashOfConfig":"103"},{"size":207,"mtime":1607602163366,"results":"120","hashOfConfig":"103"},{"size":11394,"mtime":1609229248268,"results":"121","hashOfConfig":"103"},{"size":370,"mtime":1608130224714,"results":"122","hashOfConfig":"103"},{"size":560,"mtime":1608131902452,"results":"123","hashOfConfig":"103"},{"size":1173,"mtime":1607933791526,"results":"124","hashOfConfig":"103"},{"size":806,"mtime":1606651302388,"results":"125","hashOfConfig":"103"},{"size":807,"mtime":1608132072045,"results":"126","hashOfConfig":"103"},{"size":716,"mtime":1606230216796,"results":"127","hashOfConfig":"103"},{"size":3038,"mtime":1608133658606,"results":"128","hashOfConfig":"103"},{"size":1456,"mtime":1608133957198,"results":"129","hashOfConfig":"103"},{"size":4642,"mtime":1609229248270,"results":"130","hashOfConfig":"103"},{"size":5418,"mtime":1609229248275,"results":"131","hashOfConfig":"103"},{"size":11096,"mtime":1609231129979,"results":"132","hashOfConfig":"103"},{"size":10915,"mtime":1609231192993,"results":"133","hashOfConfig":"103"},{"size":8760,"mtime":1609231185169,"results":"134","hashOfConfig":"103"},{"size":11610,"mtime":1609231178599,"results":"135","hashOfConfig":"103"},{"size":7307,"mtime":1609229248269,"results":"136","hashOfConfig":"103"},{"size":3750,"mtime":1609229248270,"results":"137","hashOfConfig":"103"},{"size":26269,"mtime":1609229304768,"results":"138","hashOfConfig":"103"},{"size":31721,"mtime":1609229304767,"results":"139","hashOfConfig":"103"},{"size":416,"mtime":1608131113495,"results":"140","hashOfConfig":"103"},{"size":1626,"mtime":1607876614383,"results":"141","hashOfConfig":"103"},{"size":1030,"mtime":1608202692993,"results":"142","hashOfConfig":"103"},{"size":241,"mtime":1607602873238,"results":"143","hashOfConfig":"103"},{"size":6585,"mtime":1608214535695,"results":"144","hashOfConfig":"103"},{"size":2863,"mtime":1608217959191,"results":"145","hashOfConfig":"103"},{"size":9622,"mtime":1608214260382,"results":"146","hashOfConfig":"103"},{"size":3381,"mtime":1609229248281,"results":"147","hashOfConfig":"103"},{"size":921,"mtime":1609229248275,"results":"148","hashOfConfig":"103"},{"size":964,"mtime":1608210142267,"results":"149","hashOfConfig":"103"},{"size":5237,"mtime":1609229248274,"results":"150","hashOfConfig":"103"},{"size":213,"mtime":1609229248298,"results":"151","hashOfConfig":"103"},{"size":4546,"mtime":1608135139292,"results":"152","hashOfConfig":"103"},{"size":1051,"mtime":1609229248275,"results":"153","hashOfConfig":"103"},{"size":865,"mtime":1609229248298,"results":"154","hashOfConfig":"103"},{"size":19444,"mtime":1609229248271,"results":"155","hashOfConfig":"103"},{"size":6728,"mtime":1609229248270,"results":"156","hashOfConfig":"103"},{"size":13536,"mtime":1609229248273,"results":"157","hashOfConfig":"103"},{"size":20930,"mtime":1609229248272,"results":"158","hashOfConfig":"103"},{"size":10728,"mtime":1609229248274,"results":"159","hashOfConfig":"103"},{"size":2371,"mtime":1609229248269,"results":"160","hashOfConfig":"103"},{"size":2802,"mtime":1609229248284,"results":"161","hashOfConfig":"103"},{"size":5648,"mtime":1609229248285,"results":"162","hashOfConfig":"103"},{"size":3261,"mtime":1609229248269,"results":"163","hashOfConfig":"103"},{"size":4053,"mtime":1609229248281,"results":"164","hashOfConfig":"103"},{"size":2469,"mtime":1609229248283,"results":"165","hashOfConfig":"103"},{"size":2486,"mtime":1609229248276,"results":"166","hashOfConfig":"103"},{"size":4101,"mtime":1609229248278,"results":"167","hashOfConfig":"103"},{"size":3140,"mtime":1609229248277,"results":"168","hashOfConfig":"103"},{"size":1435,"mtime":1609229248295,"results":"169","hashOfConfig":"103"},{"size":1207,"mtime":1609229248297,"results":"170","hashOfConfig":"103"},{"size":19539,"mtime":1606898413650,"results":"171","hashOfConfig":"103"},{"size":3460,"mtime":1608117715547,"results":"172","hashOfConfig":"103"},{"size":5133,"mtime":1609229248283,"results":"173","hashOfConfig":"103"},{"size":18985,"mtime":1609229248282,"results":"174","hashOfConfig":"103"},{"size":5137,"mtime":1609229248282,"results":"175","hashOfConfig":"103"},{"size":18035,"mtime":1609229248283,"results":"176","hashOfConfig":"103"},{"size":5128,"mtime":1609229248282,"results":"177","hashOfConfig":"103"},{"size":4379,"mtime":1609229248269,"results":"178","hashOfConfig":"103"},{"size":5835,"mtime":1609229248278,"results":"179","hashOfConfig":"103"},{"size":5122,"mtime":1609229248278,"results":"180","hashOfConfig":"103"},{"size":5297,"mtime":1609229248277,"results":"181","hashOfConfig":"103"},{"size":6024,"mtime":1609229248279,"results":"182","hashOfConfig":"103"},{"size":5846,"mtime":1609229248280,"results":"183","hashOfConfig":"103"},{"size":5185,"mtime":1609229248280,"results":"184","hashOfConfig":"103"},{"size":5828,"mtime":1609229248279,"results":"185","hashOfConfig":"103"},{"size":2830,"mtime":1609229248296,"results":"186","hashOfConfig":"103"},{"size":9342,"mtime":1609229248298,"results":"187","hashOfConfig":"103"},{"size":5735,"mtime":1609229248296,"results":"188","hashOfConfig":"103"},{"size":2000,"mtime":1609229248297,"results":"189","hashOfConfig":"103"},{"size":1929,"mtime":1609229248295,"results":"190","hashOfConfig":"103"},{"size":1289,"mtime":1609229248297,"results":"191","hashOfConfig":"103"},{"size":5903,"mtime":1609229248276,"results":"192","hashOfConfig":"103"},{"size":5106,"mtime":1609229248276,"results":"193","hashOfConfig":"103"},{"size":5221,"mtime":1609229248268,"results":"194","hashOfConfig":"103"},{"size":6734,"mtime":1606917455748,"results":"195","hashOfConfig":"103"},{"size":10715,"mtime":1608030627885,"results":"196","hashOfConfig":"103"},{"size":5754,"mtime":1608040727256,"results":"197","hashOfConfig":"103"},{"size":9713,"mtime":1608041376942,"results":"198","hashOfConfig":"103"},{"size":8097,"mtime":1609229248285,"results":"199","hashOfConfig":"103"},{"size":5187,"mtime":1609229248286,"results":"200","hashOfConfig":"103"},{"size":6871,"mtime":1609229248286,"results":"201","hashOfConfig":"103"},{"size":4511,"mtime":1609229248284,"results":"202","hashOfConfig":"103"},{"size":9834,"mtime":1609229248284,"results":"203","hashOfConfig":"103"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},"bx34dr",{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"206"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"206"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"206"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"206"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"206"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"206"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"206"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"206"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"206"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"206"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"206"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"206"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"206"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"206"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"206"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"206"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"206"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"206"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"206"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"206"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"206"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"206"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"206"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"206"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"206"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"206"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"206"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"206"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"206"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"206"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"206"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"206"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"206"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"206"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"206"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"206"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"206"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"206"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"206"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"206"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"206"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"206"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"206"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"206"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"206"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"206"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"206"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"206"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"206"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"206"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"206"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"206"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"206"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"206"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"206"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"206"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"206"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"206"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"206"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"206"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"206"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"206"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"206"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"206"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"206"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"206"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"206"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"206"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"206"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"206"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"206"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"206"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"206"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"206"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"206"},"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\index.tsx",[],["482","483"],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\reportWebVitals.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\scrollToTop.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\router\\routingMap.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\providers\\AuthProvider.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\cmsService.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\authenticationService.ts",["484"],"import { apiInstance, identityInstance } from \"./axiosMainConfig\";\r\nimport axios from \"axios\";\r\nimport defaultData from \"../constants/defaultData\";\r\nimport oidc from \"./oidc-config.json\";\r\nimport queryString from \"query-string\";\r\n\r\nexport interface iContactUs {\r\n  id: number;\r\n  name: string;\r\n  country: string;\r\n  mobile: string;\r\n  email: string;\r\n  query: string;\r\n}\r\nexport interface iSignIn {\r\n  username: string;\r\n  password: string;\r\n  cif: string;\r\n  mobile: string;\r\n  email: string;\r\n}\r\n\r\n\r\nasync function authenticate(username: string, password: string) {\r\n  try {\r\n    const requestOptions = {\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n    };\r\n    const response = await identityInstance.post(\r\n      \"connect/token\",\r\n      queryString.stringify({\r\n        client_id: oidc.config.client_id,\r\n        client_secret: oidc.config.client_secret,\r\n        scope: oidc.config.scope,\r\n        grant_type: \"password\",\r\n        username: username,\r\n        password: password,\r\n      }),\r\n      requestOptions\r\n    );\r\n\r\n    if (response.status === 200) {\r\n      const access_token = response.data[\"access_token\"];\r\n      \r\n      localStorage.setItem(defaultData.AccessTokenStorageKey, access_token);\r\n      localStorage.setItem(defaultData.RefreshTokenStorageKey, response.data[\"refresh_token\"]);      \r\n      \r\n      console.log(\"token is saved on local storage\");\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error \" + error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function generateRegistrationToken() {\r\n  try {\r\n    const requestOptions = {\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n    };\r\n    const response = await identityInstance.post(\r\n      \"connect/token\",\r\n      queryString.stringify({\r\n        grant_type: \"client_credentials\",\r\n        client_id: oidc.config.m_client_id,\r\n        client_secret: oidc.config.client_secret,\r\n        scope: oidc.config.scope,\r\n      }),\r\n      requestOptions\r\n    );\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    debugger;\r\n    console.log(\"error \" + error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function signUp(data: iSignIn) {\r\n  try {\r\n    const token = await generateRegistrationToken();\r\n    const result = await axios.post(\r\n      `${defaultData.ApiBaseUrl}/api/Account/Register`,\r\n      {\r\n        userName: data.username,\r\n        password: data.password,\r\n        cif: data.cif,\r\n        mobileNumber: data.mobile,\r\n        email: data.email,\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token[\"access_token\"]}`,\r\n        },\r\n      }\r\n    );\r\n    return result.data === true ? true : false;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function resetPassword(cif: string, password: string) {\r\n  try {\r\n    const token = await generateRegistrationToken();\r\n    const result = await axios.post(\r\n      `${defaultData.ApiBaseUrl}/api/Account/ResetPassword`,\r\n      {\r\n        cif: cif,\r\n        password: password,\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token[\"access_token\"]}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    return result.data === true ? true : false;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function AddContactUs(request: iContactUs) {\r\n  try {\r\n    const token = await generateRegistrationToken();\r\n    const result = await axios.post(\r\n      `${defaultData.ApiBaseUrl}/api/ContactUs/Add`,\r\n      {\r\n        id: 0,\r\n        name: request.name,\r\n        country: request.country,\r\n        mobile: request.mobile,\r\n        email: request.email,\r\n        query: request.query,\r\n        createDate: new Date().toISOString(),\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token[\"access_token\"]}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    return result.data === true ? true : false;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport {\r\n  authenticate,\r\n  signUp,\r\n  generateRegistrationToken,\r\n  resetPassword,\r\n  AddContactUs,\r\n};\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\apiServices.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\Helpers\\authHelper.ts",["485","486","487"],"\r\nimport { AuthContext } from \"./../providers/AuthProvider\";\r\nimport React from \"react\";\r\nimport defaultData from \"../constants/defaultData\";\r\nimport { getUserProfile } from \"../services/apiServices\";\r\n\r\nexport interface IUserSettings { customerId: string; language: string; currency: string; otp: string };\r\nasync function SaveUserDataLocally(values: IUserSettings) {\r\n\r\n  localStorage.setItem(defaultData.LoginDetailsStorageKey, JSON.stringify(values));\r\n\r\n}\r\n\r\nasync function GetUserLocalData() {\r\n  const data = localStorage.getItem(defaultData.LoginDetailsStorageKey);\r\n\r\n  return data ? JSON.parse(data) as IUserSettings : null;\r\n}\r\n\r\nexport { SaveUserDataLocally, GetUserLocalData };\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\Helpers\\helper.ts",["488","489","490","491","492","493","494","495","496","497","498"],"import moment from \"moment\";\r\nimport { ICommonFilter, IRequestFilter, ITransactionDetail, IRequestDetail } from \"./publicInterfaces\"\r\nexport interface ITransactionFilter {\r\n  exposeFilter: boolean,\r\n  DateOption: string,\r\n  StartDate?: Date,\r\n  EndDate?: Date,\r\n  AmountOperator: string,\r\n  Amount: string,\r\n  OptionalCheck: any,\r\n}\r\n\r\nexport interface ITransaction {\r\n  accountNo: string;\r\n  accountNumber?: string;\r\n  bookingDate: string;\r\n  installmentDate?: string;\r\n  extraDetails?: string;\r\n  amount: number;\r\n  transaction_Amount?: number;\r\n  balance?: number;\r\n  transactionsDetails: string;\r\n  transactionType: string;\r\n  transacitonType?: string;\r\n  descirption: string;\r\n  descriptions?: string;\r\n  trxDescirption: string;\r\n  paymentDetails?: string;\r\n}\r\n\r\n\r\nexport interface iRmRequests {\r\n  id: string;\r\n  requestCreateDate: string;\r\n  requestSubjectAR: string;\r\n  requestSubject: string;\r\n  requestStatusAR: string;\r\n  requestStatus: string;\r\n  customerName: string;\r\n  cif: string;\r\n  customerMobile: string;\r\n  type: string;\r\n  requestTypeId: string;\r\n}\r\n\r\nexport const getLanguage = () => {\r\n  return window.location.pathname.split(\"/\")[1];\r\n}\r\n\r\ninterface IChartItem {\r\n  percentage: number;\r\n  name: string;\r\n}\r\n\r\ninterface IColumn {\r\n  Amount: number;\r\n  AmounRecievedProfitt: number;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ReactNativeWebView: any;\r\n  }\r\n}\r\n\r\nexport const groupBy = (arr: [], key: string) => {\r\n  // Return the end result\r\n  return (arr || []).reduce(\r\n    (acc: any, x: any) => ({\r\n      ...acc,\r\n      [x[key]]: [...(acc[x[key]] || []), x],\r\n    }),\r\n    {}\r\n  );\r\n};\r\n\r\ninterface IOptionalCheck {\r\n  label: string;\r\n  value: boolean;\r\n}\r\n\r\nexport interface INotificationListing {\r\n  id: string;\r\n  messageTitle: string;\r\n  messageSubTitle: string,\r\n  messageBody: string;\r\n  messageSendDate: string;\r\n  messagePriority: string,\r\n  expiryDate: string;\r\n  isRead: boolean;\r\n}\r\n\r\nexport interface IInboxFilter {\r\n  Status: string;\r\n}\r\n\r\nexport const filterTransactions = (\r\n  transactions: ITransaction[],\r\n  filter: ICommonFilter\r\n) => {\r\n  let filteredTransactions = [] as ITransaction[];\r\n  switch (filter.DateOption) {\r\n    case \"1\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.bookingDate ? t.bookingDate : t.installmentDate).toDate() >=\r\n          moment().subtract(1, \"week\").toDate()\r\n      );\r\n      break;\r\n    case \"2\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.bookingDate ? t.bookingDate : t.installmentDate).toDate() >=\r\n          moment().subtract(1, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"3\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.bookingDate ? t.bookingDate : t.installmentDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"4\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.bookingDate ? t.bookingDate : t.installmentDate).toDate() >=\r\n          moment(filter.StartDate).toDate() &&\r\n          moment(t.bookingDate ? t.bookingDate : t.installmentDate).toDate() <=\r\n          moment(filter.EndDate).toDate()\r\n      );\r\n      break;\r\n    default:\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.bookingDate ? t.bookingDate : t.installmentDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n  }\r\n\r\n  if (\r\n    filter.AmountOperator &&\r\n    filter.AmountOperator !== \"\" &&\r\n    !!filter.Amount\r\n  ) {\r\n    switch (filter.AmountOperator) {\r\n      case \"=\":\r\n        filteredTransactions = filteredTransactions.filter((t) =>\r\n          !!t.transaction_Amount\r\n            ? t.transaction_Amount === parseFloat(filter.Amount)\r\n            : t.amount === parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \">=\":\r\n        filteredTransactions = filteredTransactions.filter((t) =>\r\n          !!t.transaction_Amount\r\n            ? t.transaction_Amount >= parseFloat(filter.Amount)\r\n            : t.amount >= parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \">\":\r\n        filteredTransactions = filteredTransactions.filter((t) =>\r\n          !!t.transaction_Amount\r\n            ? t.transaction_Amount > parseFloat(filter.Amount)\r\n            : t.amount > parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \"<=\":\r\n        filteredTransactions = filteredTransactions.filter((t) =>\r\n          !!t.transaction_Amount\r\n            ? t.transaction_Amount <= parseFloat(filter.Amount)\r\n            : t.amount <= parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \"<\":\r\n        filteredTransactions = filteredTransactions.filter((t) =>\r\n          !!t.transaction_Amount\r\n            ? t.transaction_Amount < parseFloat(filter.Amount)\r\n            : t.amount < parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n    }\r\n  }\r\n\r\n  if (filter.OptionalCheck.length > 0 && filter.OptionalCheck[0].label !== \"\") {\r\n    const applyOptionalFilter = filter.OptionalCheck.length > 1 ?\r\n      filter.OptionalCheck.some((a: IOptionalCheck) => a.value) &&\r\n      filter.OptionalCheck.some((b: IOptionalCheck) => !b.value) : filter.OptionalCheck[0].value;\r\n\r\n    //console.log(applyOptionalFilter);\r\n\r\n    filter.OptionalCheck.map((o: IOptionalCheck) => {\r\n      if (applyOptionalFilter && o.value) {\r\n\r\n        console.log(o.label.toLowerCase());\r\n\r\n        filteredTransactions = filteredTransactions.filter((t) =>\r\n          t.transactionType\r\n            ? String(t.transactionType).toLowerCase() !== o.label.toLowerCase()\r\n            : !!t.transaction_Amount\r\n              ? o.label.toLowerCase() ===\r\n                (\"debit\" || \"مدين\")\r\n                ? t.transaction_Amount < 0\r\n                : t.transaction_Amount > 0\r\n              : String(t.trxDescirption).toLowerCase() !== o.label.toLowerCase()\r\n        );\r\n      } else {\r\n        console.log(\"filter not applied on dynamic check boxes\")\r\n      }\r\n    });\r\n  }\r\n\r\n  return filteredTransactions;\r\n};\r\n\r\nexport const filterRequests = (\r\n  transactions: IRequestDetail[],\r\n  filter: IRequestFilter\r\n) => {\r\n  let filteredRequests = [] as IRequestDetail[];\r\n  switch (filter.DateOption) {\r\n    case \"1\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(1, \"week\").toDate()\r\n      );\r\n      break;\r\n    case \"2\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(1, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"3\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"4\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment(filter.StartDate).toDate() &&\r\n          moment(t.requestCreateDate).toDate() <=\r\n          moment(filter.EndDate).toDate()\r\n      );\r\n      break;\r\n    default:\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n  }\r\n\r\n  if (filter.Status && filter.Status !== \"0\") {\r\n    filteredRequests = filteredRequests.filter(\r\n      (t) =>\r\n        String(t.requestStatus).toLowerCase() === filter.Status.toLowerCase()\r\n    );\r\n  }\r\n\r\n  if (filter.Type && filter.Type !== \"0\") {\r\n    filteredRequests = filteredRequests.filter(\r\n      (t) => String(t.requestTypeId) === String(filter.Type)\r\n    );\r\n  }\r\n\r\n  return filteredRequests;\r\n};\r\n\r\nexport const filterRMRequests = (\r\n  transactions: iRmRequests[],\r\n  filter: IRequestFilter\r\n) => {\r\n  let filteredRequests = [] as iRmRequests[];\r\n  switch (filter.DateOption) {\r\n    case \"1\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(1, \"week\").toDate()\r\n      );\r\n      break;\r\n    case \"2\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(1, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"3\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"4\":\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment(filter.StartDate).toDate() &&\r\n          moment(t.requestCreateDate).toDate() <=\r\n          moment(filter.EndDate).toDate()\r\n      );\r\n      break;\r\n    default:\r\n      filteredRequests = transactions.filter(\r\n        (t) =>\r\n          moment(t.requestCreateDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n  }\r\n\r\n  if (filter.Status && filter.Status !== \"0\") {\r\n    filteredRequests = filteredRequests.filter(\r\n      (t) =>\r\n        String(t.requestStatus).toLowerCase() === filter.Status.toLowerCase()\r\n    );\r\n  }\r\n\r\n  if (filter.Type && filter.Type !== \"0\") {\r\n    filteredRequests = filteredRequests.filter(\r\n      (t) => String(t.requestTypeId) === String(filter.Type)\r\n    );\r\n  }\r\n\r\n  return filteredRequests;\r\n};\r\n\r\nexport const filterTransactionList = (\r\n  transactions: ITransactionDetail[],\r\n  filter: ICommonFilter\r\n) => {\r\n  let filteredTransactions = [] as ITransactionDetail[];\r\n  switch (filter.DateOption) {\r\n    case \"1\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.transactionDate).toDate() >=\r\n          moment().subtract(1, \"week\").toDate()\r\n      );\r\n      break;\r\n    case \"2\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.transactionDate).toDate() >=\r\n          moment().subtract(1, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"3\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.transactionDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n    case \"4\":\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.transactionDate).toDate() >=\r\n          moment(filter.StartDate).toDate() &&\r\n          moment(t.transactionDate).toDate() <= moment(filter.EndDate).toDate()\r\n      );\r\n      break;\r\n    default:\r\n      filteredTransactions = transactions.filter(\r\n        (t) =>\r\n          moment(t.transactionDate).toDate() >=\r\n          moment().subtract(3, \"month\").toDate()\r\n      );\r\n      break;\r\n  }\r\n\r\n  \r\n  if (\r\n    filter.AmountOperator &&\r\n    filter.AmountOperator !== \"\" &&\r\n    filter.Amount !== \"\"\r\n  ) {\r\n    switch (filter.AmountOperator) {\r\n      case \"=\":\r\n        filteredTransactions = filteredTransactions.filter(\r\n          (t) => parseFloat(t.amount) === parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \">=\":\r\n        filteredTransactions = filteredTransactions.filter(\r\n          (t) => parseFloat(t.amount) >= parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \">\":\r\n        filteredTransactions = filteredTransactions.filter(\r\n          (t) => parseFloat(t.amount) > parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \"<=\":\r\n        filteredTransactions = transactions.filter(\r\n          (t) => parseFloat(t.amount) <= parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n      case \"<\":\r\n        filteredTransactions = filteredTransactions.filter(\r\n          (t) => parseFloat(t.amount) < parseFloat(filter.Amount)\r\n        );\r\n        break;\r\n    }\r\n  }\r\n\r\n  return filteredTransactions;\r\n};\r\n\r\nexport const filterReadableList = (\r\n  transactions: any,\r\n  filter: IInboxFilter\r\n) => {\r\n  let filteredInbox = [];\r\n\r\n  switch (filter.Status) {\r\n    case \"Read Messages\":\r\n      filteredInbox = transactions.filter((t: any) => t.isRead);\r\n      break;\r\n    case \"UnRead Messages\":\r\n      filteredInbox = transactions.filter((t: any) => !t.isRead);\r\n      break;\r\n    default:\r\n      filteredInbox = transactions;\r\n      break;\r\n  }\r\n\r\n  console.log(filteredInbox);\r\n\r\n  return filteredInbox;\r\n};\r\n\r\nexport const transformingStringToJSON = (input: string[], language: string) => {\r\n  if (input && input.length > 0) {\r\n    let outputJSONStr: string = \"{\";\r\n    input.map((s) => {\r\n      if (s !== \"\") {\r\n        const languageSpecificStr = s.split(\";\")[language === \"en\" ? 0 : 1];\r\n        const keyValuePairStr = languageSpecificStr.split(\r\n          languageSpecificStr.indexOf(\":\") !== -1 ? \":\" : \",\"\r\n        );\r\n        const uniquePropStr = s\r\n          .split(\";\")[0]\r\n          .split(\":\")[0]\r\n          .replace(/\\s/g, \"\")\r\n          .replace(\"/\", \"\")\r\n          .replace(\":\", \"\");\r\n        const labelStr = keyValuePairStr[language === \"en\" ? 0 : 1]\r\n          .replace(\":\", \"\")\r\n          .trim();\r\n        const valueStrIndex =\r\n          language === \"en\"\r\n            ? languageSpecificStr.replace(\":\", \"\").trim().indexOf(\",\")\r\n            : languageSpecificStr.replace(\":\", \"\").trim().lastIndexOf(\",\");\r\n        const valueStr =\r\n          language === \"en\"\r\n            ? languageSpecificStr\r\n              .replace(\":\", \"\")\r\n              .trim()\r\n              .substr(\r\n                valueStrIndex + 1,\r\n                languageSpecificStr.replace(\":\", \"\").trim().length\r\n              )\r\n            : languageSpecificStr\r\n              .replace(\":\", \"\")\r\n              .trim()\r\n              .substr(0, valueStrIndex);\r\n        outputJSONStr =\r\n          outputJSONStr +\r\n          `\"${uniquePropStr}\": {\"label\": \"${labelStr}\", \"value\": \"${valueStr}\"},`;\r\n      }\r\n    });\r\n    outputJSONStr = outputJSONStr.slice(0, -1) + \"}\";\r\n\r\n    return JSON.parse(outputJSONStr);\r\n  } else {\r\n    return {};\r\n  }\r\n};\r\n\r\nexport const transformingTransactionDetail = (\r\n  input: string,\r\n  language: string\r\n) => {\r\n  let outputJSONStr: string = \"{\";\r\n  const splitEachProperties = input.split(\"n\\\\r\\\\\");\r\n  splitEachProperties.map((s: string) => {\r\n    const languageSpecificStr = s.split(\";\")[language === \"en\" ? 0 : 1];\r\n    const keyValuePairStr = languageSpecificStr.split(\":\");\r\n    const uniquePropStr = s\r\n      .split(\";\")[0]\r\n      .split(\":\")[0]\r\n      .replace(/\\s/g, \"\")\r\n      .replace(\"/\", \"\");\r\n    const labelStr = keyValuePairStr[language === \"en\" ? 0 : 1]\r\n      .replace(\"/\", \"\")\r\n      .trim();\r\n    const valueStr = s.split(\";\")[0].split(\":\")[1].trim();\r\n\r\n    outputJSONStr =\r\n      outputJSONStr +\r\n      `\"${uniquePropStr}\": {\"label\": \"${labelStr}\", \"value\": \"${valueStr.replace(\r\n        \",\",\r\n        \"\"\r\n      )}\"},`;\r\n  });\r\n  outputJSONStr = outputJSONStr.slice(0, -1) + \"}\";\r\n\r\n  return JSON.parse(outputJSONStr);\r\n};\r\n\r\nexport const prepareDepositHoldings1stDrill = (\r\n  chartData: any,\r\n  title: string,\r\n  rtl = false\r\n) => {\r\n  let series: any = [];\r\n  let values: any = [];\r\n\r\n  chartData.map((item: any) => {\r\n    values.push({\r\n      y: item.totalProfitRecieved || item.totalClosedProfit,\r\n      color: \"#B39758\",\r\n      name: item.totalDepositsAmount || item.totalClosedDeposits,\r\n    });\r\n  });\r\n\r\n  series.push({\r\n    colorByPoint: true,\r\n    data: values,\r\n  });\r\n\r\n  let data = {\r\n    chart: {\r\n      type: \"column\",\r\n    },\r\n    title: {\r\n      text: \"Deposit\",\r\n    },\r\n    tooltip: {\r\n      enabled: false,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: \"\",\r\n      },\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    legend: {\r\n      rtl: rtl,\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        dataLabels: {\r\n          enabled: true,\r\n          format: \"<b>{point.y}</b>\",\r\n          useHTML: true,\r\n        },\r\n        showInLegend: false,\r\n      },\r\n    },\r\n    series: series,\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nexport const prepareInvestmentHoldings1stDrill = (\r\n  chartData: any,\r\n  title: string,\r\n  rtl = false\r\n) => {\r\n  let series: any = [];\r\n\r\n  for (var i = 0; i < 2; i++) {\r\n    let data: any = [];\r\n    chartData.map((item: any) => {\r\n      i == 0\r\n        ? data.push({\r\n          y: item.nominalAmount || item.investmentAmount,\r\n          key: item.subAssetId,\r\n          name: item.secDescirption,\r\n          color: \"#724B44\",\r\n        })\r\n        : data.push({\r\n          y: item.invRecievedProfit,\r\n          key: item.subAssetId,\r\n          name: item.secDescirption,\r\n          color: \"#B39758\",\r\n        });\r\n    });\r\n\r\n    series.push({\r\n      // name: data.length > 0 ? data[i].name : '',\r\n      data: data,\r\n    });\r\n  }\r\n\r\n  let data = {\r\n    chart: {\r\n      type: \"column\",\r\n    },\r\n    title: {\r\n      text: \"Investment\",\r\n    },\r\n    tooltip: {\r\n      enabled: false,\r\n    },\r\n    xAxis: {\r\n      categories: chartData.map((c: any) => c.secDescirption),\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: \"\",\r\n      },\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    legend: {\r\n      rtl: rtl,\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        dataLabels: {\r\n          enabled: true,\r\n          format: \"<b>{point.y}</b>\",\r\n          useHTML: true,\r\n        },\r\n        events: {\r\n          click: function (event: any) {\r\n            window.ReactNativeWebView.postMessage(\r\n              JSON.stringify({ name: event.point.name, key: event.point.key })\r\n            );\r\n          },\r\n        },\r\n        showInLegend: false,\r\n      },\r\n    },\r\n    series: series,\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nexport const prepareInvestmentHoldings2ndDrill = (\r\n  chartData: any,\r\n  title: string,\r\n  rtl = false\r\n) => {\r\n  var seen: any = {};\r\n  chartData = chartData.filter(function (entry: any) {\r\n    var previous;\r\n    entry.bookingDate = entry.bookingDate.slice(0, 10);\r\n\r\n    // Have we seen this label before?\r\n    if (seen.hasOwnProperty(entry.bookingDate)) {\r\n      // Yes, grab it and add this data to it\r\n      previous = seen[entry.bookingDate];\r\n      previous.amount = Number(previous.amount) + Number(entry.amount);\r\n\r\n      // Don't keep this entry, we've merged it into the previous one\r\n      return false;\r\n    }\r\n    // entry.data probably isn't an array; make it one for consistency\r\n    if (!Array.isArray(entry.amount)) {\r\n      entry.amount = entry.amount;\r\n    }\r\n    // Remember that we've seen it\r\n    seen[entry.bookingDate] = entry;\r\n\r\n    // Keep this one, we'll merge any others that match into it\r\n    return true;\r\n  });\r\n\r\n  let series: any = [];\r\n  let values: any = [];\r\n\r\n  chartData.map((item: any) => {\r\n    values.push({\r\n      y: Math.round((item.amount + Number.EPSILON) * 100) / 100,\r\n      color: \"#724B44\",\r\n      name: moment(item.bookingDate).format(\"DD/MM/YYYY\"),\r\n    });\r\n  });\r\n\r\n  series.push({\r\n    colorByPoint: true,\r\n    data: values,\r\n  });\r\n\r\n  let data = {\r\n    chart: {\r\n      type: \"column\",\r\n    },\r\n    title: {\r\n      text: title,\r\n    },\r\n    tooltip: {\r\n      enabled: false,\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: \"\",\r\n      },\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    legend: {\r\n      rtl: rtl,\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        dataLabels: {\r\n          enabled: true,\r\n          //inside: true,\r\n          rotation: 320,\r\n          allowOverlap: true,\r\n          verticalAlign: \"top\",\r\n          format: \"<b>{point.y}</b>\",\r\n          useHTML: true,\r\n        },\r\n        //pointPadding: 0.2,\r\n        showInLegend: false,\r\n      },\r\n    },\r\n    series: series,\r\n  };\r\n\r\n  return data;\r\n};\r\n\r\nexport const b64toBlob = (b64Data: any, contentType = '', sliceSize = 512) => {\r\n  const byteCharacters = atob(b64Data);\r\n  const byteArrays = [];\r\n\r\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n    const byteNumbers = new Array(slice.length);\r\n    for (let i = 0; i < slice.length; i++) {\r\n      byteNumbers[i] = slice.charCodeAt(i);\r\n    }\r\n\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    byteArrays.push(byteArray);\r\n  }\r\n\r\n  return new Blob(byteArrays, { type: contentType });\r\n}","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\constants\\defaultData.ts",["499"],"export default {\r\n  IdentityBaseUrl: \"https://identity-stg.azurewebsites.net\",\r\n  ApiBaseUrl: \"https://api-stg.azurewebsites.net\",\r\n  AnonymousTermsAcceptanceStorageKey: \"@storage_AcceptTermsStatusForAnonymous1\",\r\n  CustomerTermsAcceptanceStorageKey: \"@storage_AcceptTermsStatusForCustomer\",\r\n  LoginDetailsStorageKey: \"storage_LoginUsernameAndPassword\",\r\n  UserProfileDetailsStorageKey: \"storage_UserPofileDetails\",\r\n  RecordPerPage: 5,\r\n  AccessTokenStorageKey: \"storage_user_access_token\",\r\n  RefreshTokenStorageKey: \"storage_user_refresh_token\",\r\n  SpinnerColor: \"#6B4F44\",\r\n  SpnnerSize: 140,\r\n  Customer: \"CUSTOMER\",\r\n  Management: \"MANAGEMENT\",\r\n  AlertTimeout: 3000,\r\n};\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Homepage.tsx",["500","501","502","503","504","505"],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport Footer from \"../components/Footer\";\r\nimport AuthCustomHeader from \"../components/header/AuthCustomHeader\";\r\nimport Breadcrumb from \"../components/Breadcrumb\";\r\nimport AssetsLanding from \"../components/assets/AssetsLanding\";\r\nimport LiabilitiesLanding from \"../components/liabilities/LiabilitiesLanding\";\r\nimport TotalNetWorth from \"../components/TotalNetWorth\";\r\nimport RelationManger from \"../components/RelationManger\";\r\nimport InboxLanding from \"../components/Inbox/InboxLanding\";\r\nimport InboxDetails from \"../components/Inbox/InboxDetails\";\r\nimport InboxListing from \"../components/Inbox/InboxListing\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AuthContext, User } from \"../providers/AuthProvider\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\nimport axios from \"axios\";\r\nimport { GetUserLocalData } from \"../Helpers/authHelper\";\r\nimport { GetInboxByCIF, GetUserPortfolio, GetGuarantees } from \"../services/cmsService\";\r\nimport { emptyInboxDetail, IInboxDetail } from \"../Helpers/publicInterfaces\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport Constant from \"../constants/defaultData\";\r\n\r\nexport interface IUserPortfolio {\r\n  customerCode: string;\r\n  customerName: string;\r\n  totalAssets: number;\r\n  totalCash: number;\r\n  totalDeposits: number;\r\n  totalInvestment: number;\r\n  totalLoans: number;\r\n  networth: number;\r\n  totalLiabilities: number;\r\n  totalGuarantees: number;\r\n}\r\n\r\nconst intialPortfolioData = {\r\n  customerCode: \"\",\r\n  customerName: \"\",\r\n  totalAssets: 0,\r\n  totalCash: 0,\r\n  totalDeposits: 0,\r\n  totalInvestment: 0,\r\n  totalLoans: 0,\r\n  networth: 0,\r\n  totalLiabilities: 0,\r\n  totalGuarantees: 0,\r\n};\r\n\r\nexport const PortfolioContext = createContext<IUserPortfolio>(\r\n  intialPortfolioData\r\n);\r\n\r\nexport interface IInboxProps {\r\n  messages: IInboxDetail[];\r\n  refresh: () => void;\r\n}\r\n\r\nexport const InboxContext = createContext<IInboxProps>(\r\n  {\r\n    messages: [emptyInboxDetail],\r\n    refresh: () => { },\r\n  }\r\n);\r\n\r\nfunction HomePage() {\r\n  const history = useHistory();\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n\r\n  const [messages, setInboxListing] = useState<IInboxDetail[]>([emptyInboxDetail]);\r\n  const [message, setMessageDetail] = useState<IInboxDetail>(emptyInboxDetail);\r\n\r\n  const [showInboxDetails, setshowInboxDetails] = useState(false);\r\n  const handleCloseInboxDetails = () => setshowInboxDetails(false);\r\n  const handleShowInboxDetails = (detail: IInboxDetail) => {\r\n    setshowInboxDetails(true);\r\n    setMessageDetail(detail);\r\n  };\r\n  const handleBackInboxDetails = () => {\r\n    setshowInboxDetails(false);\r\n  };\r\n  currentContext.language === \"en\"\r\n    ? document.getElementsByTagName(\"html\")[0].setAttribute(\"dir\", \"ltr\")\r\n    : document.getElementsByTagName(\"html\")[0].setAttribute(\"dir\", \"rtl\");\r\n  currentContext.language === \"en\"\r\n    ? document.getElementsByTagName(\"html\")[0].setAttribute(\"lang\", \"en\")\r\n    : document.getElementsByTagName(\"html\")[0].setAttribute(\"lang\", \"ar\");\r\n\r\n  const [userPortfolio, setUserPortfolio] = useState<IUserPortfolio>(\r\n    intialPortfolioData\r\n  );\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n\r\n      const requestOne = GetUserPortfolio(\r\n        currentContext.selectedCIF,\r\n        currentContext.userSettings.currency\r\n      );\r\n      const requestTwo = GetGuarantees(\r\n        currentContext.selectedCIF,\r\n        currentContext.userSettings.currency\r\n      );\r\n      const requestThree = GetInboxByCIF(\r\n        currentContext.selectedCIF\r\n      );\r\n\r\n      axios\r\n        .all([requestOne, requestTwo, requestThree])\r\n        .then((responseData: any) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n\r\n            if (responseData[0] && responseData[0][0]) {\r\n              if (responseData[1].length > 0) {\r\n                setUserPortfolio({\r\n                  ...responseData[0][0],\r\n                  totalGuarantees: responseData[1][0].totalGurQAR,\r\n                });\r\n              } else {\r\n                setUserPortfolio(responseData[0][0]);\r\n              }\r\n            }\r\n\r\n            setInboxListing(responseData[2]);\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  const refresh = () => {\r\n    console.log(\"refresh called\");\r\n\r\n    setLoading(true);\r\n    GetInboxByCIF(currentContext.selectedCIF)\r\n      .then((responseData: IInboxDetail[]) => {\r\n        if (responseData && responseData.length > 0) {\r\n          setInboxListing(responseData);\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e))\r\n      .finally(() => setLoading(false));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <InboxContext.Provider value={{ messages, refresh }}>\r\n        <AuthCustomHeader />\r\n        {/* <Breadcrumb pageName={\"\"} /> */}\r\n        <section id=\"main-section\" className=\"main-section\">\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-9\">\r\n                <PortfolioContext.Provider value={userPortfolio}>\r\n                  <div className=\"main-container\">\r\n                    <AssetsLanding />\r\n                    <div className=\"row\">\r\n                      <LiabilitiesLanding />\r\n                      <TotalNetWorth />\r\n                    </div>\r\n                  </div>\r\n                </PortfolioContext.Provider>\r\n              </div>\r\n              <div className=\"col-lg-3\">\r\n                <div className=\"sidebar-container\">\r\n                  <InboxLanding showInboxDetailsModal={handleShowInboxDetails} />\r\n                  <RelationManger />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <Footer />\r\n        {message && !!message.adviceDate &&\r\n          <InboxDetails\r\n            item={message}\r\n            showInboxDetailsModal={showInboxDetails}\r\n            hideInboxDetailsModal={handleCloseInboxDetails}\r\n            backInboxListingModal={handleBackInboxDetails}\r\n          />}\r\n      </InboxContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Admin\\OfferSubscriptionsListing.tsx",["506","507","508","509","510","511","512","513"],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Landing.tsx",["514","515","516","517"],"import React, { useContext, useState } from \"react\";\r\nimport CustomHeader from \"../components/header/CustomHeader\";\r\nimport Footer from \"../components/Footer\";\r\nimport Login from \"../components/Login\";\r\nimport SubmitOTP from \"../components/SubmitOTP\";\r\nimport Register from \"../components/Register\";\r\nimport AppBox from \"../components/AppBox\";\r\nimport ProductsAndOffers from \"../components/ProductsAndOffers/ProductsAndOffersLanding\";\r\nimport ContactUsLanding from \"../components/ContactUs/ContactUsLanding\";\r\nimport ProductsAndOffersLanding from \"../components/ProductsAndOffers/ProductsAndOffersLanding\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AuthContext, User } from \"../providers/AuthProvider\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\n\r\nconst initialUserData = { username: \"\", password: \"\", otp: \"\" };\r\nfunction Landing() {\r\n  const history = useHistory();\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n\r\n  const [\r\n    showproductsAndOffersDetails,\r\n    setshowproductsAndOffersDetails,\r\n  ] = useState(false);\r\n  const [showContactUslanding, setshowContactUslanding] = useState(false);\r\n\r\n  const handleShowproductsAndOffersDetails = () => {\r\n    setshowproductsAndOffersDetails(true);\r\n  };\r\n  const handleShowcontactUsLanding = () => {\r\n    setshowContactUslanding(true);\r\n  };\r\n  const [loginData, setUserDetail] = useState<User>(initialUserData);\r\n  const [showValidateOTP, setOTPSubmissionRequired] = useState<boolean>(false);\r\n  auth.language === \"en\"\r\n    ? document.getElementsByTagName(\"html\")[0].setAttribute(\"dir\", \"ltr\")\r\n    : document.getElementsByTagName(\"html\")[0].setAttribute(\"dir\", \"rtl\");\r\n  auth.language === \"en\"\r\n    ? document.getElementsByTagName(\"html\")[0].setAttribute(\"lang\", \"en\")\r\n    : document.getElementsByTagName(\"html\")[0].setAttribute(\"lang\", \"ar\");\r\n\r\n  return (\r\n    <div>\r\n      <CustomHeader />\r\n      <div>\r\n        <div id=\"main-section\" className=\"main-section pt-4\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              {showValidateOTP ?\r\n                <SubmitOTP userDetail={loginData} />\r\n                : <Login setUserCredentials={setUserDetail} showOTP={setOTPSubmissionRequired} />}\r\n              <div className=\"col-lg-4 col-container flex-column\">\r\n                <Register />\r\n                <AppBox />\r\n              </div>\r\n              <div className=\"col-lg-4 col-container flex-column loginSideBoxBoxes\">\r\n                <ProductsAndOffersLanding\r\n                  showProductsAndOffersDetailsModal={\r\n                    handleShowproductsAndOffersDetails\r\n                  }\r\n                />\r\n\r\n                <ContactUsLanding\r\n                  showContactUsDetailsModal={handleShowcontactUsLanding}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Admin\\Admin.tsx",["518","519","520","521"],"import React, { createContext, useEffect, useState } from \"react\";\r\nimport AuthCustomHeader from \"../../components/header/AuthCustomHeader\";\r\nimport Footer from \"../../components/Footer\";\r\nimport ProductsAndOffersListing from \"../../components/ProductsAndOffers/Listing\";\r\nimport NotificationsListing from \"../../components/Notifications/Listing\";\r\nimport OffersListing from \"../../components/ManageOffers/Listing\";\r\nimport DocumentsListing from \"../../components/ManageDocuments/Listing\";\r\nimport { emptyCustomer, ICustomer } from \"../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { GetAllCustomerList } from \"../../services/cmsService\";\r\n\r\nexport const CustomerListContext = createContext<ICustomer[]>(\r\n  [emptyCustomer]\r\n);\r\n\r\nfunction Landing() {\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n  const [customerList, setCustomerList] = useState<ICustomer[]>([emptyCustomer]);\r\n  const [showLeftSection, setLeftSection] = useState({\r\n    ProductsAndOffers: true,\r\n    Notifications: false,\r\n    Offers: false,\r\n    Documents: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    setLoading(true);\r\n\r\n    GetAllCustomerList()\r\n      .then((responseData: ICustomer[]) => {\r\n        if (responseData && responseData.length > 0 && isMounted) {\r\n          setCustomerList(responseData);\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e))\r\n      .finally(() => setLoading(false));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <AuthCustomHeader />\r\n      <div>\r\n        <div id=\"main-section\" className=\"main-section pt-4\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-8 col-container flex-column\">\r\n                <LoadingOverlay\r\n                  active={isLoading}\r\n                  spinner={<PuffLoader\r\n                    size={Constant.SpnnerSize}\r\n                    color={Constant.SpinnerColor}\r\n                  />}\r\n                />\r\n                <CustomerListContext.Provider value={customerList}>\r\n                  {showLeftSection.ProductsAndOffers && (\r\n                    <ProductsAndOffersListing />\r\n                  )}\r\n                  {showLeftSection.Notifications && <NotificationsListing />}\r\n                  {showLeftSection.Offers && <OffersListing />}\r\n                  {showLeftSection.Documents && <DocumentsListing />}\r\n                </CustomerListContext.Provider>\r\n              </div>\r\n              <div className=\"col-lg-4 col-container flex-column loginSideBoxBoxes\">\r\n                <div className=\"box pb-0 min-h-16\">\r\n                  <div className=\"box-header\">\r\n                    <h3>Admin Sections</h3>\r\n                  </div>\r\n                  <ul className=\"box-list\" id=\"dataList\">\r\n                    <li className=\"shown\">\r\n                      <a\r\n                        href=\"#\"\r\n                        className=\"row align-items-center\"\r\n                        onClick={() =>\r\n                          setLeftSection({\r\n                            ProductsAndOffers: true,\r\n                            Notifications: false,\r\n                            Offers: false,\r\n                            Documents: false,\r\n                          })\r\n                        }\r\n                      >\r\n                        <h6 className=\"mb-1\">Manage Products And Offers</h6>\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"shown\">\r\n                      <a\r\n                        href=\"#\"\r\n                        className=\"row align-items-center\"\r\n                        onClick={() =>\r\n                          setLeftSection({\r\n                            ProductsAndOffers: false,\r\n                            Notifications: true,\r\n                            Offers: false,\r\n                            Documents: false,\r\n                          })\r\n                        }\r\n                      >\r\n                        <h6 className=\"mb-1\">Manage Notifications</h6>\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"shown\">\r\n                      <a\r\n                        href=\"#\"\r\n                        className=\"row align-items-center\"\r\n                        onClick={() =>\r\n                          setLeftSection({\r\n                            ProductsAndOffers: false,\r\n                            Notifications: false,\r\n                            Offers: true,\r\n                            Documents: false,\r\n                          })\r\n                        }\r\n                      >\r\n                        <h6 className=\"mb-1\">Manage Offers</h6>\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"shown\">\r\n                      <a\r\n                        href=\"#\"\r\n                        className=\"row align-items-center\"\r\n                        onClick={() =>\r\n                          setLeftSection({\r\n                            ProductsAndOffers: false,\r\n                            Notifications: false,\r\n                            Offers: false,\r\n                            Documents: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <h6 className=\"mb-1\">Manage Documents</h6>\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\pages\\Admin\\ContactUsListing.tsx",["522","523","524","525","526","527","528"],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\services\\axiosMainConfig.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\translations\\localStrings.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\Helpers\\publicInterfaces.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Footer.tsx",["529"],"import React from \"react\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"belowFooter\">\r\n        {local_Strings.footerTxt}\r\n\r\n        <a href=\"#\"> {local_Strings.footerTxtTerms}</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Register.tsx",["530"],"import React from \"react\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\n\r\nfunction Register() {\r\n  return (\r\n    <div className=\"box register-container min-h-12\">\r\n      <div className=\"box-body py-2\">\r\n        <h3> {local_Strings.registerLandingTitle}</h3>\r\n        <p className=\"my-2\">{local_Strings.registerLandingInfo}</p>\r\n        <a className=\"btn btn-primary btn-block mt-1\" href=\"#\" id=\"\">\r\n          {local_Strings.registerLandingButton}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Breadcrumb.tsx",["531","532"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\n\r\nfunction Breadcrumb({ pageName }) {\r\n  const location = useLocation();\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n\r\n  return (\r\n    <div id=\"breadcrumb-section\" className=\"breadcrumb-section\">\r\n      <div className=\"container-fluid\">\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol className=\"breadcrumb\">\r\n            <li className=\"breadcrumb-item\">\r\n              <Link to=\"/\">{local_Strings.FooterItem1}</Link>\r\n            </li>\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {location.pathname.replace(`/${auth.language}/`, \"\")}\r\n            </li>\r\n            {!!pageName && (\r\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                {pageName}\r\n              </li>\r\n            )}\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Breadcrumb;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\AuthCustomHeader.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AppBox.tsx",["533","534","535","536"],"import React from \"react\";\r\nimport appstore from \"../images/appstore.png\";\r\nimport playstore from \"../images/playstore.png\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\n\r\nfunction AppBox() {\r\n  return (\r\n    <div className=\"box appBox-container min-h-12\">\r\n      <div className=\"box-body\">\r\n        <p className=\"mb-1\">{local_Strings.appLandingTitle}</p>\r\n        <h3 className=\"mb-3\">{local_Strings.appLandingInfo}</h3>\r\n        <p className=\"m-0\">\r\n          <a href=\"#\" className=\"mx-1\">\r\n            <img src={appstore} className=\"img-fluid appImg\" />\r\n          </a>\r\n          <a href=\"#\" className=\"mx-1\">\r\n            <img src={playstore} className=\"img-fluid appImg\" />\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppBox;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\CustomHeader.tsx",["537","538"],"import React from \"react\";\r\nimport ToolBarLeft from \"./ToolBarLeft\";\r\nimport ToolBarRight from \"./ToolBarRight\";\r\nimport Navigation from \"./Navigation\";\r\nimport Logo from \"./Logo\";\r\n\r\nfunction CustomHeader() {\r\n  return (\r\n    <div>\r\n      <div className=\"topHeader\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row align-items-center\">\r\n            <ToolBarLeft></ToolBarLeft>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <header className=\"header\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row align-items-center\">\r\n            <Logo></Logo>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomHeader;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersLanding.tsx",["539","540","541","542"],"import React, { useContext, useState } from \"react\";\r\nimport productsICon from \"../../images/products-offers-icon.svg\";\r\nimport ProductsAndOffersDetails from \"./ProductsAndOffersDetails\";\r\nimport ProductsAndOffersListing from \"./ProductsAndOffersListing\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface iProductsAndOffersLanding {\r\n  showProductsAndOffersDetailsModal: () => void;\r\n}\r\nfunction ProductsAndOffersLanding(\r\n  productsAndOffersLandingProps: iProductsAndOffersLanding\r\n) {\r\n  const history = useHistory();\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n\r\n  const [\r\n    showProductsAndOffersListing,\r\n    setShowProductsAndOffersListing,\r\n  ] = useState(false);\r\n\r\n  const handleCloseProductsAndOffersListing = () => {\r\n    setShowProductsAndOffersListing(false);\r\n  };\r\n  const handleShowProductsAndOffersListing = () => {\r\n    setShowProductsAndOffersListing(true);\r\n  };\r\n\r\n  const [\r\n    showProductsAndOffersDetails,\r\n    setshowProductsAndOffersDetails,\r\n  ] = useState(false);\r\n\r\n  const handleCloseProductsAndOffersDetails = () =>\r\n    setshowProductsAndOffersDetails(false);\r\n  const handleShowProductsAndOffersDetails = () => {\r\n    handleCloseProductsAndOffersListing();\r\n    setshowProductsAndOffersDetails(true);\r\n    //productsAndOffersListingProps.hideProductsAndOffersListingModal;\r\n  };\r\n  const handleBackProductsAndOffersDetails = () => {\r\n    setshowProductsAndOffersDetails(false);\r\n\r\n    setShowProductsAndOffersListing(true);\r\n  };\r\n  return (\r\n    <div className=\"inner-box box mt-0 mb-3\">\r\n      <div className=\"d-flex py-2\">\r\n        <div className=\"ib-icon\">\r\n          <img src={productsICon} className=\"img-fluid\" />\r\n        </div>\r\n        <div className=\"ib-text px-4\">\r\n          <h3 className=\"mb-2\">{local_Strings.productAndOffersLandingTitle}</h3>\r\n          <p>{local_Strings.productAndOffersLandingInfo}</p>\r\n          <a\r\n            href=\"#\"\r\n            onClick={handleShowProductsAndOffersListing}\r\n            className=\"btn btn-sm btn-primary mt-1\"\r\n          >\r\n            {local_Strings.productAndOffersLandingButton}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <ProductsAndOffersListing\r\n        showProductsAndOffersListingModal={showProductsAndOffersListing}\r\n        hideProductsAndOffersListingModal={handleCloseProductsAndOffersListing}\r\n        showProductsAndOffersDetailsModal={handleShowProductsAndOffersDetails}\r\n      ></ProductsAndOffersListing>\r\n      <ProductsAndOffersDetails\r\n        showProductsAndOffersDetailsModal={showProductsAndOffersDetails}\r\n        hideProductsAndOffersDetailsModal={handleCloseProductsAndOffersDetails}\r\n        backProductsAndOffersListingModal={handleBackProductsAndOffersDetails}\r\n      ></ProductsAndOffersDetails>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductsAndOffersLanding;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ContactUs\\ContactUsLanding.tsx",["543","544"],"import React, { useState } from \"react\";\r\nimport inquiriesIcon from \"../../images/inquiries-icon.svg\";\r\nimport ContactUsForm from \"./ContactUsForm\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\ninterface iContactUsLanding {\r\n  showContactUsDetailsModal: () => void;\r\n}\r\nfunction ContactUsLanding(contactUsLandingProps: iContactUsLanding) {\r\n  const [showContactUsForm, setShowContactUsForm] = useState(false);\r\n\r\n  const handleCloseContactUsForm = () => {\r\n    setShowContactUsForm(false);\r\n  };\r\n  const handleShowContactUsForm = () => {\r\n    setShowContactUsForm(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"inner-box box mt-0\">\r\n      <div className=\"d-flex py-2\">\r\n        <div className=\"ib-icon\">\r\n          <img src={inquiriesIcon} className=\"img-fluid\" />\r\n        </div>\r\n        <div className=\"ib-text px-4\">\r\n          <h3 className=\"mb-2\">{local_Strings.contactUsLandingTitle}</h3>\r\n          <p>{local_Strings.contactUsLandingInfo}</p>\r\n          <a\r\n            href=\"#\"\r\n            onClick={handleShowContactUsForm}\r\n            className=\"btn btn-sm btn-primary mt-1\"\r\n          >\r\n            {local_Strings.contactUsLandingButton}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <ContactUsForm\r\n        showContactUsFormModal={showContactUsForm}\r\n        hideContactUsFormModal={handleCloseContactUsForm}\r\n      ></ContactUsForm>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactUsLanding;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Login.tsx",["545","546","547","548"],"import React, { useContext, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { AuthContext, User } from \"../providers/AuthProvider\";\r\nimport InvalidFieldError from '../shared/invalid-field-error';\r\nimport { localStrings as local_Strings } from '../translations/localStrings';\r\nimport * as helper from '../Helpers/helper';\r\nimport { SendOTP } from \"../services/cmsService\";\r\nimport { authenticate } from \"../services/authenticationService\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport Constant from \"../constants/defaultData\";\r\nimport Swal from 'sweetalert2';\r\ninterface IProps {\r\n  setUserCredentials: any;\r\n  showOTP: any;\r\n}\r\n\r\nconst Login: React.FC<IProps> = (props) => {\r\n\r\n  const history = useHistory();\r\n  const auth = useContext(AuthContext);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const initialValues: User = { username: \"\", password: \"\", otp: \"\" };\r\n  local_Strings.setLanguage(auth.language);\r\n  const loginFormValidationSchema = yup.object({\r\n    username: yup.string().required(\"User name is required\"),\r\n    password: yup.string().required(\"Password is required\"),\r\n  });\r\n\r\n  const submitLogin = async (values: User) => {\r\n\r\n    setLoading(true);\r\n    const isValidCredentials = await authenticate(\r\n      values.username,\r\n      values.password\r\n    );\r\n\r\n    if (isValidCredentials) {\r\n\r\n      SendOTP(values.username)\r\n        .then((res) => {\r\n          props.setUserCredentials({\r\n            username: values.username,\r\n            password: values.password,\r\n            otp: \"\",\r\n          });\r\n          props.showOTP(true);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      setLoading(false);\r\n      \r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'error',\r\n        title: local_Strings.landingPageInvaildLoginMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-lg-4 col-container\">\r\n      <div className=\"box login-container\">\r\n        <div className=\"box-header\">\r\n          <h3>{local_Strings.LoginWithCredentialsTitle}</h3>\r\n        </div>\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={\r\n            <PuffLoader\r\n              size={Constant.SpnnerSize}\r\n              color={Constant.SpinnerColor}\r\n            />\r\n          }\r\n        />\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={loginFormValidationSchema}\r\n          onSubmit={(values) => submitLogin(values)}\r\n        >\r\n          {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            handleSubmit,\r\n            errors,\r\n            touched,\r\n          }) => (\r\n            <div className=\"box-body\" id=\"loginBox\">\r\n              <div className=\"form-group\">\r\n                <label>{local_Strings.LoginWithCredentialsUserNameLabel}</label>\r\n                <input type=\"text\" className=\"form-control\" id=\"usernameField\"\r\n                  value={values.username || \"\"}\r\n                  onChange={handleChange(\"username\")}\r\n                  onBlur={handleBlur(\"username\")} />\r\n                {touched.username && errors.username && InvalidFieldError(errors.username)}\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>{local_Strings.LoginWithCredentialsPasswordLabel}</label>\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  id=\"passwordField\"\r\n                  value={values.password || \"\"}\r\n                  onChange={handleChange(\"password\")}\r\n                  onBlur={handleBlur(\"password\")} />\r\n                {touched.password && errors.password && InvalidFieldError(errors.password)}\r\n              </div>\r\n              <div className=\"form-group text-right\">\r\n                <a href=\"#\" className=\"forgotLink\">\r\n                  {local_Strings.LoginWithCredentialsPasswordResetLabel}\r\n                </a>\r\n              </div>\r\n              <div className=\"form-group\">\r\n\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\"\r\n                  onClick={() => handleSubmit()}\r\n                >\r\n                  {local_Strings.LoginWithCredentialsLoginButton}</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\SubmitOTP.tsx",["549","550"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { AuthContext, User } from \"../providers/AuthProvider\";\r\nimport InvalidFieldError from '../shared/invalid-field-error';\r\nimport { localStrings as local_Strings } from '../translations/localStrings';\r\nimport * as helper from '../Helpers/helper';\r\nimport { SendOTP, ValidateOTP } from \"../services/cmsService\";\r\nimport { getUserRole } from \"../services/apiServices\";\r\nimport Constant from \"../constants/defaultData\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport Swal from 'sweetalert2';\r\ninterface iPasswordResetOTP {\r\n  otp: string;\r\n}\r\ninterface IProps {\r\n  userDetail: User;\r\n}\r\n\r\nconst SubmitOTP: React.FC<IProps> = ({ userDetail }) => {\r\n  const history = useHistory();\r\n  const currentContext = useContext(AuthContext);\r\n  const [isLoading, setLoading] = useState(false);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const initialValues: iPasswordResetOTP = {\r\n    otp: \"\",\r\n  };\r\n  const loginFormValidationSchema = yup.object({\r\n    otp: yup.string().required(local_Strings.GeneralValidation),\r\n  });\r\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\r\n  const submitOTP = async (values: iPasswordResetOTP) => {\r\n\r\n    setLoading(true);\r\n    setShowErrorMessage(false);\r\n    const isValidateOTP = await ValidateOTP(userDetail.username, values.otp);\r\n    if (isValidateOTP) {\r\n      const loginResponse = await currentContext.login({ ...userDetail, otp: values.otp });\r\n      if (loginResponse) {\r\n        const role = await getUserRole(userDetail.username)\r\n          .finally(() => {\r\n            setLoading(false);\r\n          });\r\n        if (role && role !== undefined) {\r\n          if (role.name === Constant.Customer) {\r\n            history.push(`/${currentContext.language}/Home`);\r\n          } else if (role.name === Constant.Management) {\r\n            history.push(`/${currentContext.language}/Admin`);\r\n          } else {\r\n            Swal.fire({\r\n              position: 'top-end',\r\n              icon: 'error',\r\n              title: local_Strings.GenericErrorMessage,\r\n              showConfirmButton: false,\r\n              timer: Constant.AlertTimeout\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        setLoading(false);\r\n        \r\n        Swal.fire({\r\n          position: 'top-end',\r\n          icon: 'error',\r\n          title: local_Strings.landingPageInvaildLoginMessage,\r\n          showConfirmButton: false,\r\n          timer: Constant.AlertTimeout\r\n        });\r\n      }\r\n    } else {\r\n      setLoading(false);\r\n      \r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'error',\r\n        title: local_Strings.otpErrorMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n      setShowErrorMessage(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-lg-4 col-container\">\r\n      <div className=\"box login-container\">\r\n        <div className=\"box-header\">\r\n          <h3>{local_Strings.LoginWithCredentialsTitle}</h3>\r\n        </div>\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={\r\n            <PuffLoader\r\n              size={Constant.SpnnerSize}\r\n              color={Constant.SpinnerColor}\r\n            />\r\n          }\r\n        />\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={loginFormValidationSchema}\r\n          onSubmit={(values) => submitOTP(values)}\r\n        >\r\n          {({\r\n            values,\r\n            handleBlur,\r\n            handleSubmit,\r\n            errors,\r\n            touched,\r\n            setFieldValue\r\n          }) => (\r\n            <div className=\"box-body\" id=\"OtpBox\">\r\n              <div className=\"form-group\">\r\n                <p>{local_Strings.PasswordResetOTPHint}</p>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>{local_Strings.PasswordResetOTPEnterOTP}</label>\r\n                <input type=\"text\" className=\"form-control\"\r\n                  pattern=\"[0-9]*\" maxLength={6}\r\n                  value={values.otp || \"\"}\r\n                  onChange={(e) => {\r\n                    if (e.currentTarget.validity.valid && e.currentTarget.value.length <= 6) {\r\n                      setFieldValue(\"otp\", e.target.value.replace(/[^0-9]*/, ''));\r\n                    }\r\n                  }}\r\n                  onBlur={handleBlur(\"otp\")} />\r\n                {touched.otp && errors.otp && InvalidFieldError(errors.otp)}\r\n                {showErrorMessage && InvalidFieldError(local_Strings.otpErrorMessage)}\r\n              </div>\r\n              <div className=\"form-group text-right\">\r\n                <a href=\"#\" className=\"forgotLink\"\r\n                  onClick={async () => await SendOTP(userDetail.username)}>\r\n                  {local_Strings.PasswordResetOTPResendOTP}\r\n                </a>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\"\r\n                  onClick={() => handleSubmit()}\r\n                >\r\n                  {local_Strings.PasswordResetOTPButton}</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubmitOTP;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\Listing.tsx",["551","552","553","554","555","556","557","558","559","560","561","562"],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageOffers\\Listing.tsx",["563","564","565","566","567","568","569","570","571"],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Notifications\\Listing.tsx",["572","573","574","575","576","577","578"],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageDocuments\\Listing.tsx",["579","580","581","582","583","584","585","586","587"],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\InboxDetails.tsx",["588","589","590","591","592","593","594","595","596","597","598"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { emptyInboxDetail, IInboxDetail } from \"../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport moment from \"moment\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport {\r\n  GetInboxByCIFAndType,\r\n  SetInboxItemAsRead,\r\n} from \"../../services/cmsService\";\r\nimport axios from \"axios\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport NoResult from \"../../shared/NoResult\";\r\nimport FilterMoreButtonControl from '../../shared/FilterMoreButtonControl';\r\nimport { InboxContext } from \"../../pages/Homepage\";\r\n\r\ninterface iInboxDetails {\r\n  showInboxDetailsModal: boolean;\r\n  hideInboxDetailsModal: () => void;\r\n  backInboxListingModal: () => void;\r\n  item: IInboxDetail;\r\n}\r\n\r\nfunction InboxDetails(props: iInboxDetails) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const InboxMessages = useContext(InboxContext);\r\n  const [data, setData] = useState<IInboxDetail[]>([emptyInboxDetail]);\r\n  const [filteredData, setFilteredData] = useState<IInboxDetail[]>([emptyInboxDetail]);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(data.length < rowLimit ? data.length : rowLimit);\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const requestOne = GetInboxByCIFAndType(\r\n      currentContext.selectedCIF,\r\n      props.item.adviceType\r\n    );\r\n    const requestTwo = SetInboxItemAsRead({ ...props.item, isRead: true });\r\n\r\n    axios\r\n      .all([requestOne, requestTwo])\r\n      .then((responseData: any) => {\r\n        if (responseData && responseData.length > 0 && isMounted) {\r\n          const previousItems = (responseData[0] as IInboxDetail[]).filter(\r\n            (i) =>\r\n              i.description !== props.item.description && i.pdfName !== props.item.pdfName\r\n          );\r\n\r\n          setData(previousItems);\r\n          setFilteredData(previousItems);\r\n          if (previousItems.length < rowLimit) {\r\n            setOffset(previousItems.length);\r\n          }\r\n          InboxMessages.refresh();\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e))\r\n      .finally(() => setLoading(false));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [props.item.description]);\r\n\r\n  const renderItem = (item: IInboxDetail, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <div className=\"row align-items-center py-2\">\r\n        <div className=\"col-md-8 col-sm-12 \">\r\n          <div className=\"mb-1 d-flex align-items-center\">\r\n            <img src={dateIcon} className=\"img-fluid\" />\r\n            <span className=\"mx-1 text-15 color-light-gold\">\r\n              {item.adviceDate\r\n                ? moment(item.adviceDate).format(\r\n                  \"dddd DD MMM YYYY\"\r\n                )\r\n                : \"\"}\r\n            </span>\r\n          </div>\r\n          <h6 className=\"mb-1 text-600\">{item.description || \"\"}</h6>\r\n          <div className=\"text-15\">{item.dateRange || \"\"}</div>\r\n        </div>\r\n        <div className=\"col-md-4 text-right\">\r\n          <a className=\"download-link d-inline-block \" target=\"_blank\" href={item.pdfUrl || \"#\"}>\r\n            <i className=\"mx-1 fa fa-file color-white\"></i>\r\n            <i className=\"mx-1 fa fa-download color-white\"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showInboxDetailsModal}\r\n      onHide={props.hideInboxDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.backInboxListingModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">{local_Strings.InboxMessageDetailsTitle}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideInboxDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n          <ul className=\"box-list mb-0\">\r\n            <li className=\"shown\">\r\n              <div className=\"row align-items-center py-2\">\r\n                <div className=\"col-md-8 col-sm-12 \">\r\n                  <div className=\"mb-1 d-flex align-items-center\">\r\n                    <img src={dateIcon} className=\"img-fluid\" />\r\n                    <span className=\"mx-1 text-15 color-light-gold\">\r\n                      {props.item.adviceDate\r\n                        ? moment(props.item.adviceDate).format(\r\n                          \"dddd DD MMM YYYY\"\r\n                        )\r\n                        : \"\"}\r\n                    </span>\r\n                  </div>\r\n                  <h6 className=\"mb-1 text-600\">{props.item.description || \"\"}</h6>\r\n                  <div className=\"text-15\">{props.item.dateRange || \"\"}</div>\r\n                </div>\r\n                <div className=\"col-md-4 text-right\">\r\n                  <a className=\"download-link d-inline-block \" target=\"_blank\" href={props.item.pdfUrl || \"#\"}>\r\n                    <i className=\"mx-1 fa fa-file color-white\"></i>\r\n                    <i className=\"mx-1 fa fa-download color-white\"></i>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n\r\n          <ul className=\"box-list\" id=\"dataList\">\r\n            <li className=\"bg-light-gray pt-3 pb-2\">\r\n              <h4 className=\"box-list-sub-header\">{local_Strings.InboxMessageDetailsPreviousLabel}</h4>\r\n            </li>\r\n            {filteredData &&\r\n              filteredData.length > 0 &&\r\n              !!filteredData[0].adviceDate ?\r\n              filteredData.slice(0, offset).map((item, index) => renderItem(item, index)\r\n              ) : NoResult(local_Strings.NoDataToShow)}\r\n\r\n          </ul>\r\n        </div>\r\n        <FilterMoreButtonControl showMore={data.length > rowLimit &&\r\n          offset < filteredData.length} onClickMore={() => setOffset(offset + 5)} />\r\n\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default InboxDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\InboxLanding.tsx",["599","600","601","602"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport InboxDetails from \"./InboxDetails\";\r\nimport InboxListing from \"./InboxListing\";\r\nimport { emptyInboxDetail, IInboxDetail } from \"../../Helpers/publicInterfaces\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { InboxContext } from \"../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport moment from \"moment\";\r\n\r\ninterface iInboxLanding {\r\n  showInboxDetailsModal: (detail: IInboxDetail) => void;\r\n}\r\n\r\nfunction InboxLanding(props: iInboxLanding) {\r\n  const [showInboxListing, setShowInboxListing] = useState(false);\r\n  const [message, setMessageDetail] = useState<IInboxDetail>(emptyInboxDetail);\r\n  const currentContext = useContext(AuthContext);\r\n  const InboxMessages = useContext(InboxContext);\r\n  const [isLoading, setLoading] = useState(false);\r\n  local_Strings.setLanguage(currentContext.language);\r\n\r\n  const handleCloseInboxListing = () => {\r\n    setShowInboxListing(false);\r\n  };\r\n  const handleShowInboxListing = () => {\r\n    setShowInboxListing(true);\r\n  };\r\n\r\n  const [showInboxDetails, setshowInboxDetails] = useState(false);\r\n  const handleCloseInboxDetails = () => setshowInboxDetails(false);\r\n  const handleShowInboxDetails = (detail: IInboxDetail) => {\r\n    handleCloseInboxListing();\r\n    setshowInboxDetails(true);\r\n    setMessageDetail(detail);\r\n  };\r\n  const handleBackInboxDetails = () => {\r\n    setshowInboxDetails(false);\r\n    setShowInboxListing(true);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"box pb-0 min-h-16\">\r\n      <div className=\"box-header\">\r\n        <h3>{local_Strings.landingInboxTitle}</h3>\r\n        <a href=\"#\" className=\"viewLink\" onClick={handleShowInboxListing}>\r\n          {local_Strings.landingMore} <i className=\"fa fa-arrow-right\"></i>\r\n        </a>\r\n      </div>\r\n      <LoadingOverlay\r\n        active={isLoading}\r\n        spinner={\r\n          <PuffLoader\r\n            size={Constant.SpnnerSize}\r\n            color={Constant.SpinnerColor}\r\n          />\r\n        }\r\n      />\r\n      <ul className=\"box-list\">\r\n        {InboxMessages.messages &&\r\n          InboxMessages.messages.length > 0 &&\r\n          InboxMessages.messages.slice(0, 3).map((item, index) =>\r\n            <li key={index}>\r\n              <a\r\n                href=\"#\"\r\n                className=\"d-block\"\r\n                onClick={() => props.showInboxDetailsModal(item)}\r\n              >\r\n                <h4>\r\n                  <span className={!item.isRead\r\n                    ? \"unread\" : \"\"}>{item.adviceType || \"\"}</span>\r\n                  <small>{item.adviceDate\r\n                    ? moment(item.adviceDate).format(\r\n                      \"DD/MM/YYYY h:mm a\"\r\n                    )\r\n                    : \"\"}</small>\r\n                </h4>\r\n                <p>{item.description || \"\"}</p>\r\n              </a>\r\n            </li>)\r\n        }\r\n      </ul>\r\n      {InboxMessages.messages && InboxMessages.messages.length > 0\r\n        && !!InboxMessages.messages[0].adviceDate &&\r\n        <InboxListing\r\n          showInboxListingModal={showInboxListing}\r\n          hideInboxListingModal={handleCloseInboxListing}\r\n          showInboxDetailsModal={handleShowInboxDetails}\r\n        />\r\n      }\r\n      {message && !!message.adviceDate &&\r\n        <InboxDetails\r\n          item={message}\r\n          showInboxDetailsModal={showInboxDetails}\r\n          hideInboxDetailsModal={handleCloseInboxDetails}\r\n          backInboxListingModal={handleBackInboxDetails}\r\n        />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InboxLanding;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\translations\\english.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\translations\\arabic.ts",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\Logo.tsx",["603"],"import React from \"react\";\r\nimport QFPlogo from \"../../images/qfb-logo-w.png\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\nfunction Logo() {\r\n  return (\r\n    <div className=\"col-md-5\">\r\n      <div className=\"logo\">\r\n        <img src={QFPlogo} className=\"images-fluid mx-1\" />\r\n        {local_Strings.headerLogoTxt}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\ToolBarLeft.tsx",["604","605","606"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCogs, faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\n\r\nfunction ToolBarLeft() {\r\n  const history = useHistory();\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n\r\n  const switchLanguage = (language: string) => {\r\n    if (language === \"en\") {\r\n      history.replace(\r\n        window.location.pathname.replace(helper.getLanguage(), \"ar\")\r\n      );\r\n      auth.changeLanguage(\"ar\");\r\n    } else {\r\n      history.replace(\r\n        window.location.pathname.replace(helper.getLanguage(), \"en\")\r\n      );\r\n      auth.changeLanguage(\"en\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-3\">\r\n      <div className=\"topLeftIcons\">\r\n        <Link to={`/${auth.language}/Home`}>\r\n          <FontAwesomeIcon icon={faHome} />\r\n        </Link>\r\n        <a\r\n          onClick={() => switchLanguage(auth.language)}\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          {auth.language === \"en\"\r\n            ? local_Strings.arabic\r\n            : local_Strings.english}\r\n        </a>\r\n        <Link to={`/${auth.language}/Admin`}>\r\n          <FontAwesomeIcon icon={faCogs} />\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolBarLeft;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\ToolBarRight.tsx",["607","608","609","610"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\nfunction ToolBarRight() {\r\n  const history = useHistory();\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n\r\n  return (\r\n    <div className=\"col-md-9\">\r\n      <div className=\"topRight text-right\">\r\n        <Link to=\"/HomePage1\"> {local_Strings.topBarRightItem1}</Link>\r\n        <Link to=\"/HomePage2\"> {local_Strings.topBarRightItem2}</Link>\r\n        <Link to={`/${auth.language}/OfferSubscriptions`}>\r\n          {local_Strings.topBarRightItem3}\r\n        </Link>\r\n        <Link to={`/${auth.language}/ContactUs`}>\r\n          {local_Strings.topBarRightItem4}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolBarRight;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\invalid-field-error.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ContactUs\\ContactUsForm.tsx",["611","612","613","614","615"],"import React, { useState } from \"react\";\r\nimport { Button, Col, Form, Modal } from \"react-bootstrap\";\r\nimport callIcon from \"../../images/call-icon.png\";\r\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\ninterface iContactUsForm {\r\n  showContactUsFormModal: boolean;\r\n  hideContactUsFormModal: () => void;\r\n}\r\nfunction ContactUsForm(contactUsFormProps: iContactUsForm) {\r\n  const [showClearFilter, setShowClearFilter] = useState(false);\r\n  const [openTransactionInfo, setOpenTransactionInfo] = useState(false);\r\n  const mapStyles = {\r\n    height: \"200px\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  const defaultCenter = {\r\n    lat: 41.3851,\r\n    lng: 2.1734,\r\n  };\r\n\r\n  const locations = [\r\n    {\r\n      name: \"Location 1\",\r\n      location: {\r\n        lat: 41.3954,\r\n        lng: 2.162,\r\n      },\r\n    },\r\n    {\r\n      name: \"Location 2\",\r\n      location: {\r\n        lat: 41.3917,\r\n        lng: 2.1649,\r\n      },\r\n    },\r\n    {\r\n      name: \"Location 3\",\r\n      location: {\r\n        lat: 41.3773,\r\n        lng: 2.1585,\r\n      },\r\n    },\r\n    {\r\n      name: \"Location 4\",\r\n      location: {\r\n        lat: 41.3797,\r\n        lng: 2.1682,\r\n      },\r\n    },\r\n    {\r\n      name: \"Location 5\",\r\n      location: {\r\n        lat: 41.4055,\r\n        lng: 2.1915,\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={contactUsFormProps.showContactUsFormModal}\r\n        onHide={contactUsFormProps.hideContactUsFormModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <img src={callIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.ContactUsTite}</h4>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={contactUsFormProps.hideContactUsFormModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box p-0 scrollabel-modal-box\">\r\n            <LoadScript googleMapsApiKey=\"AIzaSyBkzMg4m8KTfJ3yW-EfNSuVgt0OVlze7uI\">\r\n              <GoogleMap\r\n                mapContainerStyle={mapStyles}\r\n                zoom={13}\r\n                center={defaultCenter}\r\n              >\r\n                {locations.map((item) => {\r\n                  return <Marker key={item.name} position={item.location} />;\r\n                })}\r\n              </GoogleMap>\r\n            </LoadScript>\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row my-4\">\r\n                <div className=\"col-md-8\">\r\n                  <Form>\r\n                    <Form.Row>\r\n                      <Col md={6}>\r\n                        <Form.Group controlId=\"formName\">\r\n                          <Form.Label>\r\n                            {local_Strings.ContactUsNameLabel}\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Mohamed Ahmed\"\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={6}>\r\n                        <Form.Group controlId=\"formCountry\">\r\n                          <Form.Label>\r\n                            {local_Strings.ContactUsCountryLabel}\r\n                          </Form.Label>\r\n                          <Form.Control as=\"select\" placeholder=\"Country\">\r\n                            <option>Qatar</option>\r\n                            <option>Egypt</option>\r\n                            <option>USA</option>\r\n                            <option>UAE</option>\r\n                          </Form.Control>\r\n                        </Form.Group>\r\n                      </Col>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                      <Col md={6}>\r\n                        <Form.Group controlId=\"formMobile\">\r\n                          <Form.Label>\r\n                            {local_Strings.ContactUsMobileLabel}\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            placeholder=\"+974 00000000\"\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                      <Col md={6}>\r\n                        <Form.Group controlId=\"formMobile\">\r\n                          <Form.Label>\r\n                            {local_Strings.ContactUsEmailAddressLabel}\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"test@test.com\"\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                      <Col md={12}>\r\n                        <Form.Group controlId=\"forQuery\">\r\n                          <Form.Label>\r\n                            {local_Strings.ContactUsQueryLabel}\r\n                          </Form.Label>\r\n                          <Form.Control\r\n                            as=\"textarea\"\r\n                            placeholder=\"We'll never share your email with anyone else. We'll never share your email with anyone else. We'll never share your email with anyone else. We'll never share your email with anyone else. We'll never share your email with anyone else. We'll never share your email with anyone else.\"\r\n                          />\r\n                        </Form.Group>\r\n                      </Col>\r\n                    </Form.Row>\r\n                  </Form>\r\n                </div>\r\n                <div className=\"offset-md-2 col-md-2\"></div>\r\n              </div>\r\n              <div className=\"row my-4\">\r\n                <div className=\"col-md-10\"></div>\r\n                <div className=\"col-md-2\">\r\n                  <Button variant=\"primary\" type=\"submit\" className=\"w-100\">\r\n                    {local_Strings.ContactUsSubmitButton}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactUsForm;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersDetails.tsx",["616","617","618","619","620","621","622","623"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\ninterface iProductsAndOffersDetails {\r\n  showProductsAndOffersDetailsModal: boolean;\r\n  hideProductsAndOffersDetailsModal: () => void;\r\n  backProductsAndOffersListingModal: () => void;\r\n}\r\nfunction ProductsAndOffersDetails(\r\n  productsAndOffersDetailsProps: iProductsAndOffersDetails\r\n) {\r\n  const showMoreProductsAndOffersDetails = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={productsAndOffersDetailsProps.showProductsAndOffersDetailsModal}\r\n      onHide={productsAndOffersDetailsProps.hideProductsAndOffersDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={\r\n                  productsAndOffersDetailsProps.backProductsAndOffersListingModal\r\n                }\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">\r\n                {local_Strings.ProductsAndOffersDetailsTitle}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={\r\n            productsAndOffersDetailsProps.hideProductsAndOffersDetailsModal\r\n          }\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n          <ul className=\"box-list mb-0\">\r\n            <li className=\"shown\">\r\n              <div className=\"row align-items-center py-2\">\r\n                <div className=\"col-md-12 col-sm-12 \">\r\n                  <div className=\"text-xs color-gray\">\r\n                    {local_Strings.dummyDate}\r\n                  </div>\r\n                  <h6 className=\"mb-1 text-600 text-18 \">\r\n                    {local_Strings.dummyTitle}\r\n                  </h6>\r\n                  <div className=\"color-gray\">{local_Strings.dummyDesc}</div>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"p-3 mb-5\">{local_Strings.dummyContent}</div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ProductsAndOffersDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersListing.tsx",["624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639"],"import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport productsIcon from \"../../images/products-icon.png\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\ninterface iProductsAndOffersListing {\r\n  showProductsAndOffersListingModal: boolean;\r\n  hideProductsAndOffersListingModal: () => void;\r\n  showProductsAndOffersDetailsModal: () => void;\r\n}\r\nfunction ProductsAndOffersListing(\r\n  productsAndOffersListingProps: iProductsAndOffersListing\r\n) {\r\n  const [showClearFilter, setShowClearFilter] = useState(false);\r\n  const [openTransactionInfo, setOpenTransactionInfo] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={productsAndOffersListingProps.showProductsAndOffersListingModal}\r\n        onHide={productsAndOffersListingProps.hideProductsAndOffersListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <img src={productsIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.productAndOffersLandingTitle}</h4>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={\r\n              productsAndOffersListingProps.hideProductsAndOffersListingModal\r\n            }\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box p-4 scrollabel-modal-box\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-4 col-container\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={\r\n                    productsAndOffersListingProps.showProductsAndOffersDetailsModal\r\n                  }\r\n                  className=\"box login-container\"\r\n                >\r\n                  <div className=\"box-header bg-beige\">\r\n                    <h3>\r\n                      {local_Strings.productAndOffersListingLabel} | 123456789\r\n                    </h3>\r\n                  </div>\r\n                  <div className=\"box-body p-3\">\r\n                    <div className=\"box-brief mb-3\">\r\n                      {local_Strings.dummyDesc}\r\n                    </div>\r\n                    <div className=\"box-date\">16/11/2020</div>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductsAndOffersListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\header\\Navigation.tsx",["640","641","642"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport holdingsIcon from \"../../images/holdings-icon.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Requests from \"../requests/Requests\";\r\nimport Transactions from \"../transactions/Transactions\";\r\nimport Inbox from \"../Inbox/Inbox\";\r\nimport AuthOffersLanding from \"../AuthOffers/AuthOffersLanding\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport { emptyUserInfo, IUserInfo } from \"../../Helpers/publicInterfaces\";\r\nimport { GetUserWelcomeData } from \"../../services/cmsService\";\r\n\r\nfunction Navigation() {\r\n\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [userInfo, setUserInfo] = useState<IUserInfo>(emptyUserInfo);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n    GetUserWelcomeData(currentContext.selectedCIF)\r\n      .then((responseData: any) => {\r\n        if (responseData && responseData.length > 0 && isMounted) {\r\n          setUserInfo(responseData[0] as IUserInfo);\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e));\r\n    }\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n\r\n  return (\r\n    <div className=\"col-md-7\">\r\n      \r\n      <div className=\"welcomeText text-right\">\r\n        <Link to={`/${currentContext.language}/Home`} className=\"\">\r\n          {local_Strings.WelcomeScreenTitle + \" \" + (userInfo.customerShortName || \"\") + \" \"}\r\n          <i className=\"fa fa-user-circle-o\"></i>\r\n        </Link>&nbsp;\r\n        <a\r\n          className=\"cursor-pointer\"\r\n          href=\"#\"\r\n          title=\"Click to logout\"\r\n          onClick={currentContext.logout}\r\n        >\r\n          <i className=\"fa fa-sign-out\" />\r\n        </a>\r\n      </div>\r\n      <nav className=\"navbar navbar-expand-md\">\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarNavDropdown\"\r\n          aria-controls=\"navbarNavDropdown\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"fa fa-bars\"></span>\r\n        </button>\r\n        <div\r\n          className=\"collapse navbar-collapse justify-content-end\"\r\n          id=\"navbarNavDropdown\"\r\n        >\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item active\">\r\n              <Link className=\"nav-link\" to=\"/\">\r\n                <img src={holdingsIcon} className=\"images-fluid\" />\r\n                {local_Strings.navigationItem1}\r\n              </Link>\r\n            </li>\r\n\r\n            <Transactions></Transactions>\r\n            <AuthOffersLanding></AuthOffersLanding>\r\n            <Requests></Requests>\r\n            <li className=\"nav-item\">\r\n              <Inbox />\r\n              <a\r\n                className=\"\"\r\n                href=\"#\"\r\n                onClick={() => { }}\r\n              >\r\n                <i className=\"fa fa-bell unread\" />\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\TotalNetWorth.tsx",["643","644"],"import React, { useContext, useState } from \"react\";\r\nimport Chart from \"../images/Chart.png\";\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\n\r\nfunction TotalNetWorth() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n\r\n  return (\r\n    <div className=\"col-lg-7 col-container\">\r\n      <div className=\"box box min-h-24\">\r\n        <h3>{local_Strings.PortfolioTotalNetWorth}</h3>\r\n        <h2 className=\"mb-3\">\r\n          {(userPortfolio.networth || \"0\") + \" \"}\r\n          <small>{currentContext.userSettings.currency}</small>\r\n        </h2>\r\n        <div className=\"chart-block\">\r\n          <img src={Chart} className=\"img-fluid\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TotalNetWorth;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\LiabilitiesLanding.tsx",["645"],"import React, { useContext, useState } from \"react\";\r\nimport Facilities from \"./Facilities/Facilities\";\r\nimport Guarantees from \"./Guarantees/Guarantees\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\nfunction LiabilitiesLanding() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n\r\n  return (\r\n    <div className=\"col-lg-5 col-container\">\r\n      <div className=\"box box min-h-24\">\r\n        <h3>{local_Strings.PortfolioLiabilitiesTitle}</h3>\r\n        <h2 className=\"mb-4\">\r\n          {userPortfolio.totalLiabilities + \" \"}\r\n          <small>{currentContext.userSettings.currency}</small>\r\n        </h2>\r\n        <Facilities></Facilities>\r\n        <Guarantees></Guarantees>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiabilitiesLanding;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\RelationManger.tsx",["646","647","648","649","650","651","652","653","654","655","656","657"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport phoneIcon from \"../images/phone-fill.svg\";\r\nimport messageIcon from \"../images/message.svg\";\r\nimport cellPhoneIcon from \"../images/cell-phone.svg\";\r\nimport emailIcon from \"../images/email.svg\";\r\nimport { Carousel } from \"react-bootstrap\";\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\nimport { GetUserWelcomeData } from \"../services/cmsService\";\r\nimport { localStrings as local_Strings } from \"../translations/localStrings\";\r\n\r\ninterface ItemProps {\r\n  accountOfficer?: string;\r\n  customerShortName?: string;\r\n  id?: string;\r\n  name: string;\r\n  telephone: string;\r\n  rmMobile: string;\r\n  rmEmail: string;\r\n  //callmeBackLink: string;\r\n}\r\n\r\ninterface CustomCarouselProps { }\r\ninterface RenderItemProps {\r\n  item: ItemProps;\r\n  index: number;\r\n}\r\n\r\nfunction RelationManger() {\r\n  const [index, setIndex] = useState(0);\r\n  const currentContext = useContext(AuthContext);\r\n  const [carouselItems, setCarouselItems] = useState<ItemProps[]>([]);\r\n  const handleSelect = (selectedIndex: any, e: any) => {\r\n    setIndex(selectedIndex);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const initialLoadMethod = async () => {\r\n      GetUserWelcomeData(currentContext.selectedCIF).then((s) => {\r\n        if (isMounted) {\r\n          setCarouselItems(s);\r\n        }\r\n      });\r\n    }\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  return (\r\n    <Carousel\r\n      id=\"carouselExampleIndicators\"\r\n      className=\"carousel slide\"\r\n      activeIndex={index}\r\n      onSelect={handleSelect}\r\n      controls={false}\r\n    >\r\n      {carouselItems &&\r\n        carouselItems.length > 0 &&\r\n        carouselItems.map((item, index) => (\r\n          <Carousel.Item key={index}>\r\n            <div className=\"box min-h-24\">\r\n              <div className=\"box-header\">\r\n                <h3>{local_Strings.WelcomeScreenTitle}</h3>\r\n              </div>\r\n              <ul className=\"box-list\">\r\n                <li>\r\n                  <div className=\"box-list-details\">\r\n                    <h5> {local_Strings.WelcomeScreenRMNameLabel}</h5>\r\n                    <h6 className=\"\">{item.name || \"\"}</h6>\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div className=\"box-list-details\">\r\n                    <div className=\"row no-gutters align-items-center\">\r\n                      <div className=\"col-8\">\r\n                        <h5> {local_Strings.WelcomeScreenRMPhoneLabel}</h5>\r\n                        <h6 className=\"\">{item.telephone || \"\"}</h6>\r\n                      </div>\r\n                      <div className=\"col-4 text-right\">\r\n                        <a href=\"#\" className=\"actionIcon\">\r\n                          <img src={phoneIcon} className=\"img-fluid\" />\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div className=\"box-list-details\">\r\n                    <div className=\"row no-gutters align-items-center\">\r\n                      <div className=\"col-6\">\r\n                        <h5>{local_Strings.WelcomeScreenRMMobileLabel}</h5>\r\n                        <h6 className=\"\">{item.rmMobile || \"\"}</h6>\r\n                      </div>\r\n                      <div className=\"col-6 text-right\">\r\n                        <a href=\"#\" className=\"actionIcon mx-1\">\r\n                          {local_Strings.WelcomeScreenSMS}\r\n                          <img src={messageIcon} className=\"img-fluid\" />\r\n                        </a>\r\n                        <a href=\"#\" className=\"actionIcon mx-1\">\r\n                          {local_Strings.WelcomeScreenCall}\r\n                          <img src={cellPhoneIcon} className=\"img-fluid\" />\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <div className=\"box-list-details\">\r\n                    <div className=\"row no-gutters align-items-center\">\r\n                      <div className=\"col-10\">\r\n                        <h5>{local_Strings.WelcomeScreenEmail}</h5>\r\n                        <h6 className=\"text-break d-block\">\r\n                          {item.rmEmail || \"\"}\r\n                        </h6>\r\n                      </div>\r\n                      <div className=\"col-2 text-right\">\r\n                        <a href=\"#\" className=\"actionIcon\">\r\n                          <img src={emailIcon} className=\"img-fluid\" />\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n              <div className=\"text-center px-3\">\r\n                <a className=\"btn btn-primary btn-block\" href=\"#\">\r\n                  {local_Strings.WelcomeScreenEmail}\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </Carousel.Item>\r\n        ))}\r\n    </Carousel>\r\n  );\r\n}\r\n\r\nexport default RelationManger;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\NoResult.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\pagination.tsx",["658"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { localStrings as local_Strings } from '../translations/localStrings';\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\n\r\ninterface IPaginationProps {\r\n    items: [],\r\n    onChangePage: any,\r\n    initialPage?: number,\r\n    pageSize?: number,\r\n}\r\n\r\nconst Pagination = (props: IPaginationProps) => {\r\n\r\n    const auth = useContext(AuthContext);\r\n    local_Strings.setLanguage(auth.language);\r\n    const [pager, setPaging] = useState({\r\n        totalItems: [],\r\n        currentPage: 0,\r\n        pageSize: 0,\r\n        totalPages: 0,\r\n        startPage: 0,\r\n        endPage: 0,\r\n        startIndex: 0,\r\n        endIndex: 0,\r\n        pages: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        setPage(props.initialPage);\r\n    }, [props.items]);\r\n\r\n    const setPage = (page: any) => {\r\n        var { items, pageSize = 5 } = props;\r\n\r\n        // get new pager object for specified page\r\n        const newPage: any = getPager(items.length, page, pageSize);\r\n\r\n        // get new page of items from items array\r\n        var pageOfItems = items.slice(newPage.startIndex, newPage.endIndex + 1);\r\n\r\n        // update state\r\n        setPaging(newPage);\r\n\r\n        // call change page function in parent component\r\n        props.onChangePage(pageOfItems);\r\n    }\r\n\r\n    const getPager = (totalItems: any, currentPage: any, pageSize: number) => {\r\n        // default to first page\r\n        currentPage = currentPage || 1;\r\n\r\n        // default page size is 10\r\n        pageSize = pageSize || 10;\r\n\r\n        // calculate total pages\r\n        let totalPages: number = Math.ceil(totalItems / pageSize);\r\n\r\n        let startPage: number = 1, endPage: number = 1;\r\n        if (totalPages <= 10) {\r\n            // less than 10 total pages so show all\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // more than 10 total pages so calculate start and end pages\r\n            if (currentPage <= 6) {\r\n                startPage = 1;\r\n                endPage = 10;\r\n            } else if (currentPage + 4 >= totalPages) {\r\n                startPage = totalPages - 9;\r\n                endPage = totalPages;\r\n            } else {\r\n                startPage = currentPage - 5;\r\n                endPage = currentPage + 4;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        var startIndex = (currentPage - 1) * pageSize;\r\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        var pages: any = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems: totalItems,\r\n            currentPage: currentPage,\r\n            pageSize: pageSize,\r\n            totalPages: totalPages,\r\n            startPage: startPage,\r\n            endPage: endPage,\r\n            startIndex: startIndex,\r\n            endIndex: endIndex,\r\n            pages: pages\r\n        };\r\n    }\r\n\r\n    // (pager && pager.pages && pager.pages.length > 1) ? null : (\r\n    return (\r\n        <div className=\"paging-block\">\r\n            <nav aria-label=\"Page navigation\">\r\n                <ul className=\"pagination justify-content-end\">\r\n                    <li className={'page-item ' + (pager.currentPage === 1 ? 'disabled' : '')}>\r\n                        <button type=\"button\" className=\"page-link\"\r\n                            onClick={() => setPage(pager.currentPage - 1)}>\r\n                            {local_Strings.pagingPrevious}</button>\r\n                    </li>\r\n                    {pager && pager.pages && pager.pages.map((page, index: number) =>\r\n                        <li key={index} className={'page-item ' + (pager.currentPage === page ? 'active' : '')}>\r\n                            <button type=\"button\" className=\"page-link\"\r\n                                onClick={() => setPage(page)}>{page}</button>\r\n                        </li>\r\n                    )}\r\n                    <li className={'page-item ' + (pager.currentPage === pager.totalPages ? 'disabled' : '')}>\r\n                        <button type=\"button\" className=\"page-link\"\r\n                            onClick={() => setPage(pager.currentPage + 1)}>\r\n                            {local_Strings.pagingNext}</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\AssetsLanding.tsx",["659"],"import React, { useContext, useState } from \"react\";\r\nimport Cash from \"./cash/Cash\";\r\nimport Investments from \"./investments/Investments\";\r\nimport Deposite from \"./deposite/Deposite\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\nfunction AssetsLanding() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n\r\n  return (\r\n    <div className=\"box min-h-16\">\r\n      <h3 className=\"mt-1\">{local_Strings.PortfolioAssetsTitle}</h3>\r\n      <h2 className=\"mb-2\">\r\n        {(userPortfolio.totalAssets || \"0\") + \" \"}\r\n        <small>{currentContext.userSettings.currency}</small>\r\n      </h2>\r\n\r\n      <div className=\"inner-boxes\">\r\n        <div className=\"row\">\r\n          <Cash></Cash>\r\n          <Investments></Investments>\r\n          <Deposite></Deposite>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssetsLanding;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterMoreButtonControl.tsx",["660"],"import React, { useContext } from 'react';\r\nimport { localStrings as local_Strings } from '../translations/localStrings';\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\n\r\ninterface IFilterMoreButtonControlProps {\r\n    onClickMore: any;\r\n    showMore: boolean;\r\n}\r\n\r\nconst FilterMoreButtonControl: React.FC<IFilterMoreButtonControlProps> = (props) => {\r\n\r\n    const auth = useContext(AuthContext);\r\n    local_Strings.setLanguage(auth.language);\r\n\r\n    return props.showMore ? (\r\n        <div className=\"actionScrollButtons\">\r\n            <a\r\n                id=\"moreButton\"\r\n                onClick={props.onClickMore}\r\n                className=\"d-block\"\r\n            >\r\n                {local_Strings.ScrollForMoreLabel} <i className=\"fa fa-caret-down\"></i>\r\n            </a>\r\n        </div>\r\n    ) : null;\r\n}\r\n\r\nexport default FilterMoreButtonControl;","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageDocuments\\DocumentForm.tsx",["661","662","663","664","665","666","667"],"import React, { createRef, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { AddNewDocument, GetDocumentById, UpdateDocumentDetail } from \"../../services/cmsService\";\r\nimport moment from \"moment\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport InvalidFieldError from '../../shared/invalid-field-error';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport '@ckeditor/ckeditor5-build-classic/build/translations/ar.js';\r\n//import Base64UploadAdapter from '@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { emptyDocumentData, IDocumentDetail } from \"../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport fileIcon from \"../../images/pdf.png\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport { saveAs } from 'file-saver';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst mime = require('mime');\r\n\r\ninterface DetailsProps {\r\n  itemID?: number\r\n  show: boolean;\r\n  editable: boolean;\r\n  OnHide: () => void;\r\n  OnBack: () => void;\r\n  refreshList: () => void;\r\n}\r\n\r\nfunction DocumentForm(props: DetailsProps) {\r\n  const fileInputRef = createRef<any>();\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n  const [data, setData] = useState<IDocumentDetail>(emptyDocumentData);\r\n  const [fileSize, setFileSize] = useState<number>(0);\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n\r\n  const formValidationSchema = yup.object({\r\n    documentName: yup.string().nullable().required(\"Document Name is required\"),\r\n    documentNameAr: yup.string().nullable().required(\"Document Arabic Name is required\"),\r\n    fileName: yup.string().nullable().required(\"Please upload a PDF file. \" + local_Strings.moreThanLimit),\r\n    documentDate: yup.string().nullable().required(\"Document date is required\"),\r\n    documentDescription: yup.string().required(\"Document Description is required\"),\r\n    documentDescriptionAr: yup.string().required(\"Document Arabic Description is required\"),\r\n    orderId: yup.number().nullable().moreThan(0, \"Document Display Priority is required and must be number only.\"),\r\n  });\r\n\r\n  const submitTheRecord = async (values: IDocumentDetail) => {\r\n\r\n    setLoading(true);\r\n    const item = values.id > 0 ? values : {\r\n      documentName: values.documentName,\r\n      documentNameAr: values.documentNameAr,\r\n      documentDate: moment(values.documentDate).utc(true),\r\n      documentDescription: values.documentDescription,\r\n      documentDescriptionAr: values.documentDescriptionAr,\r\n      fileName: values.fileName,\r\n      fileContent: values.fileContent,\r\n      orderId: values.orderId\r\n    };\r\n\r\n    const x = values.id > 0 ? await UpdateDocumentDetail(item) : await AddNewDocument(item);\r\n    if (x) {\r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'success',\r\n        title: local_Strings.documentSavedMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n      props.refreshList();\r\n      props.OnHide();\r\n    } else {\r\n      Swal.fire('Oops...', local_Strings.GenericErrorMessage, 'error');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (props.itemID && props.itemID > 0) {\r\n\r\n      setLoading(true);\r\n      GetDocumentById(props.itemID)\r\n        .then((responseData: any) => {\r\n          if (responseData && responseData.length > 0 && isMounted) {\r\n            const _item = responseData[0] as IDocumentDetail;\r\n            setData(_item);\r\n            const _calSize = (3 * (_item.fileContent.length / 4 / 1024 / 1024)).toFixed(4);\r\n            setFileSize(Math.round((Number(_calSize) + Number.EPSILON) * 100) / 100);\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    } else {\r\n      setData(emptyDocumentData);\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [props.itemID, props.show]);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.OnHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.OnBack}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">{local_Strings.DocumentsDetailsTitle}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.OnHide}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={<PuffLoader\r\n            size={Constant.SpnnerSize}\r\n            color={Constant.SpinnerColor}\r\n          />}\r\n        />\r\n        <Formik\r\n          initialValues={data}\r\n          validationSchema={formValidationSchema}\r\n          onSubmit={(values) => submitTheRecord(values)}\r\n          enableReinitialize={true}\r\n          validateOnChange={props.editable}\r\n          validateOnBlur={props.editable}\r\n        >\r\n          {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            setFieldValue,\r\n            handleSubmit,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n            validateForm\r\n          }) => (\r\n            <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n              <div className=\"box-body\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.documentName}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.documentName || \"\"}\r\n                    onChange={handleChange(\"documentName\")}\r\n                    onBlur={handleBlur(\"documentName\")} />\r\n                  {touched.documentName && errors.documentName && InvalidFieldError(errors.documentName)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.documentNameAr}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.documentNameAr || \"\"}\r\n                    onChange={handleChange(\"documentNameAr\")}\r\n                    onBlur={handleBlur(\"documentNameAr\")} />\r\n                  {touched.documentNameAr && errors.documentNameAr && InvalidFieldError(errors.documentNameAr)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.documentDate}</label>\r\n\r\n                  <DatePicker name=\"documentDate\"\r\n                    selected={!!values.documentDate ? new Date(values.documentDate) : null}\r\n                    onChange={(date: Date) => setFieldValue(\"documentDate\", date)}\r\n                    onBlur={handleBlur(\"documentDate\")}\r\n                    placeholderText={\"\"}\r\n                    readOnly={!props.editable}\r\n                    //minDate={new Date()}\r\n                    dateFormat=\"MMMM dd, yyyy\" />\r\n                  {touched.documentDate && errors.documentDate && InvalidFieldError(errors.documentDate)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.documentPriority}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.orderId || \"\"}\r\n                    pattern=\"[0-9]*\" maxLength={6}\r\n                    onBlur={handleBlur(\"orderId\")}\r\n                    style={{ width: 120 }}\r\n                    onChange={(e) => {\r\n                      \r\n                      if (e.currentTarget.validity.valid && e.currentTarget.value.length <= 6) {\r\n                        setFieldValue(\"orderId\", !!e.currentTarget.value ? parseInt(e.target.value.replace(/[^0-9]*/, '')) : 0);\r\n                      }\r\n                    }}\r\n                  />\r\n                  {touched.orderId && errors.orderId && InvalidFieldError(errors.orderId)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.documentShortDescription}</label>\r\n                  {props.editable ?\r\n                    <React.Fragment>\r\n                      <CKEditor\r\n                        editor={ClassicEditor}\r\n                        data={values.documentDescription || \"\"}\r\n                        onChange={(event: any, editor: any) => {\r\n                          const _text = editor.getData();\r\n                          setFieldValue(\"documentDescription\", _text);\r\n                        }}\r\n                        config={{\r\n                          //plugins: [Base64UploadAdapter],\r\n                          toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                          allowedContent: true,\r\n                          extraAllowedContent: 'div(*)',\r\n                          language: \"en\",\r\n                          content: \"en\",\r\n                        }}\r\n                      />\r\n                      {touched.documentDescription && errors.documentDescription && InvalidFieldError(errors.documentDescription)}\r\n                    </React.Fragment>\r\n                    : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.documentDescription\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.documentShortDescriptionAr}</label>\r\n                  {props.editable ?\r\n                    <React.Fragment>\r\n                      <CKEditor\r\n                        editor={ClassicEditor}\r\n                        data={values.documentDescriptionAr || \"\"}\r\n                        onChange={(event: any, editor: any) => {\r\n                          const _text = editor.getData();\r\n                          setFieldValue(\"documentDescriptionAr\", _text);\r\n                        }}\r\n                        config={{\r\n                          //plugins: [Base64UploadAdapter],\r\n                          toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                          allowedContent: true,\r\n                          extraAllowedContent: 'div(*)',\r\n                          language: \"ar\",\r\n                          content: \"ar\",\r\n                        }}\r\n                      />\r\n                      {touched.documentDescriptionAr && errors.documentDescriptionAr && InvalidFieldError(errors.documentDescriptionAr)}\r\n                    </React.Fragment>\r\n                    : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.documentDescriptionAr\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n\r\n                  <label className=\"mb-1 text-600\">{local_Strings.OfferAttachment}</label>\r\n                  {props.editable ?\r\n                    <React.Fragment>\r\n                      <label className=\"file\">\r\n                        <input type=\"file\" multiple={false}\r\n                          id=\"file\" aria-label=\"File browser example\"\r\n                          lang={auth.language}\r\n                          className=\"\"\r\n                          accept='application/pdf'\r\n                          ref={fileInputRef}\r\n                          onBlur={handleBlur(\"fileName\")}\r\n                          onChange={() => {\r\n\r\n                            const file = fileInputRef.current.files[0];\r\n                            const supportedExtensions = ['pdf'];\r\n                            if (file) {\r\n                              if (file.size <= 0) {                                \r\n                                Swal.fire({\r\n                                  position: 'top-end',\r\n                                  icon: 'error',\r\n                                  title: file.name + local_Strings.isEmptyText,\r\n                                  showConfirmButton: false,\r\n                                  timer: Constant.AlertTimeout\r\n                                });\r\n                                fileInputRef.current.value = \"\";\r\n                              } else if (!supportedExtensions.includes(file.name.toLowerCase().split('.').pop())) {\r\n                                \r\n                                Swal.fire({\r\n                                  position: 'top-end',\r\n                                  icon: 'error',\r\n                                  title: local_Strings.supportedFileTypeError.replace(\"{*}\", file.name),\r\n                                  showConfirmButton: false,\r\n                                  timer: Constant.AlertTimeout\r\n                                });\r\n                                fileInputRef.current.value = \"\";\r\n                              } else if ((file.size / 1024 / 1024) > 10 ||\r\n                                (file.size / 1024 / 1024) > 10\r\n                              ) {\r\n                                \r\n                                Swal.fire({\r\n                                  position: 'top-end',\r\n                                  icon: 'error',\r\n                                  title: local_Strings.moreThanLimit,\r\n                                  showConfirmButton: false,\r\n                                  timer: Constant.AlertTimeout\r\n                                });\r\n                                fileInputRef.current.value = \"\";\r\n                              } else {\r\n                                const reader = new FileReader();\r\n                                reader.onload = (e: any) => {\r\n                                  const content = new TextDecoder().decode(Buffer.from(e.target.result));\r\n                                  const fileContent = content.split(',').pop();\r\n\r\n                                  setFieldValue(\"fileName\", file.name);\r\n                                  setFieldValue(\"fileContent\", fileContent);\r\n\r\n                                  const _calSize = (3 * ((fileContent ? fileContent.length : 1) / 4 / 1024 / 1024)).toFixed(4);\r\n                                  setFileSize(Math.round((Number(_calSize) + Number.EPSILON) * 100) / 100);\r\n                                }\r\n                                reader.readAsDataURL(file);\r\n                                fileInputRef.current.value = \"\";\r\n                              }\r\n                            }\r\n                          }} />\r\n\r\n                        <span className=\"file-custom\">\r\n                          {local_Strings.OfferFileBrowseLabel}\r\n                        </span>\r\n                      </label>\r\n                    </React.Fragment> : null}\r\n\r\n                  {touched.fileName && errors.fileName && InvalidFieldError(errors.fileName)}\r\n                </div>\r\n                {values.fileName && !!values.fileName ?\r\n                  <div className=\"row no-gutters align-items-center view-attachment\">\r\n                    <div className=\"col-2 col-lg-2 text-center\">\r\n                      <img alt=\"\" src={fileIcon}\r\n                        style={{ maxWidth: \"75%\" }} className=\"img-fluid\" />\r\n                    </div>\r\n                    <div className=\"col-8 col-lg-9 cursor-pointer\"\r\n                      onClick={() => {\r\n                        const blob = helper.b64toBlob(values.fileContent, mime.getType(values.fileName));\r\n                        saveAs(blob, values.fileName);\r\n                      }}>\r\n                      <h5>{values.fileName}<br />\r\n                        <small>{local_Strings.sizeLabel}: {fileSize} MB</small></h5>\r\n                    </div>\r\n                    {props.editable &&\r\n                      <div className=\"col-2 col-lg-1 text-center\">\r\n                        <button className=\"btnFileDelete\" onClick={() => {\r\n                          setFieldValue(\"fileName\", \"\");\r\n                          setFieldValue(\"fileContent\", \"\");\r\n                          setData({\r\n                            ...data, fileName: \"\", fileContent: \"\",\r\n                          });\r\n                        }}\r\n                        >\r\n                          <i className=\"fa fa-trash-o\"></i>\r\n                        </button>\r\n                      </div>\r\n                    }\r\n                  </div> : null}\r\n                {props.editable &&\r\n                  <div className=\"form-group\">\r\n\r\n                    <button className=\"btn btn-sm btn-primary mt-1\" type=\"submit\" style={{ float: \"right\", margin: 20 }}\r\n                      onClick={(e) => {\r\n                        validateForm(values);\r\n                        \r\n                        if (isValid) {\r\n                          handleSubmit();\r\n                        } else {\r\n                          \r\n                          Swal.fire({\r\n                            position: 'top-end',\r\n                            icon: 'error',\r\n                            title: local_Strings.formValidationMessage,\r\n                            showConfirmButton: false,\r\n                            timer: Constant.AlertTimeout\r\n                          });\r\n                          touched.documentName = true;\r\n                          touched.documentNameAr = true;\r\n                          touched.documentDate = true;\r\n                          touched.fileName = true;\r\n                          touched.documentDescription = true;\r\n                          touched.documentDescriptionAr = true;\r\n                          touched.orderId = true;\r\n                        }\r\n                      }}>\r\n                      {local_Strings.OfferSaveButton}</button>\r\n                  </div>\r\n                }\r\n              </div>\r\n\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </Modal.Body>\r\n    </Modal >\r\n  );\r\n}\r\n\r\nexport default DocumentForm;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\InboxListing.tsx",["668","669","670","671","672"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { emptyInboxDetail, IInboxFilter, IInboxDetail } from \"../../Helpers/publicInterfaces\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { InboxContext } from \"../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport moment from \"moment\";\r\nimport FilterMoreButtonControl from '../../shared/FilterMoreButtonControl';\r\nimport FilterDropDownControl from '../../shared/FilterDropDownControl';\r\nimport FilterButtonControl from '../../shared/FilterButtonControl';\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport NoResult from \"../../shared/NoResult\";\r\n\r\ninterface iInboxListing {\r\n  showInboxListingModal: boolean;\r\n  hideInboxListingModal: () => void;\r\n  showInboxDetailsModal: (detail: IInboxDetail)  => void;\r\n}\r\n\r\nfunction InboxListing(props: iInboxListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  const InboxMessages = useContext(InboxContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [filteredData, setFilteredData] = useState<IInboxDetail[]>(InboxMessages.messages);\r\n  const [filters, setFilter] = useState<IInboxFilter>({\r\n    filterApplied: false,\r\n    Status: \"0\",\r\n  });\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(InboxMessages.messages && InboxMessages.messages.length < rowLimit ? InboxMessages.messages.length : rowLimit);\r\n\r\n  const renderItem = (item: IInboxDetail, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showInboxDetailsModal(item)}\r\n      >\r\n        <div className=\"col-12 col-sm-12\">\r\n          <div className=\"mb-1 d-flex align-items-center\">\r\n            <img src={dateIcon} className=\"img-fluid\" />\r\n            <span className=\"mx-1 text-15 color-light-gold\">\r\n              {item.adviceDate\r\n                ? moment(item.adviceDate).format(\r\n                  \"dddd DD MMM YYYY\"\r\n                )\r\n                : \"\"}\r\n            </span>\r\n          </div>\r\n          <h6 className=\"mb-1 text-600\">\r\n            {item.description || \"\"}\r\n          </h6>\r\n          <div className=\"text-15\">\r\n            {item.dateRange || \"\"}\r\n          </div>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n  const statusFilterOptions = [\r\n    { label: local_Strings.MessageFilter_All, value: \"All Messages\" },\r\n    { label: local_Strings.MessageFilter_Read, value: \"Read Messages\" },\r\n    { label: local_Strings.MessageFilter_UnRead, value: \"UnRead Messages\" },\r\n  ];\r\n\r\n  //console.log(JSON.stringify(InboxMessages.messages, null, 2));\r\n  \r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showInboxListingModal}\r\n        onHide={props.hideInboxListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.InboxMessageListingTitle}</h4>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideInboxListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n          <form className=\"filter-box\">\r\n            <div className=\"row headRow align-items-center justify-content-between\">\r\n              <div className=\"col-sm-5\">\r\n                <FilterDropDownControl label={local_Strings.InboxMessageListingFilterWithLabel}\r\n                  options={statusFilterOptions} value={filters.Status || \"0\"}\r\n                  onChange={(_value: string) =>\r\n                    setFilter({ ...filters, Status: _value })} />\r\n              </div>\r\n\r\n              <div className=\"col-sm-2\">\r\n                <FilterButtonControl\r\n                  clearFilter={() => {\r\n                    setFilter({\r\n                      filterApplied: false,\r\n                      Status: \"0\",\r\n                    });\r\n                    setFilteredData(InboxMessages.messages);\r\n                    setOffset(rowLimit);\r\n                  }}\r\n                  applyFilter={() => {\r\n                    setFilter({ ...filters, filterApplied: true });\r\n                    const _filteredData = helper.filterReadableList(\r\n                      InboxMessages.messages,\r\n                      filters\r\n                    );\r\n                    setFilteredData(_filteredData);\r\n                  }}\r\n                  showClearFilter={filters.filterApplied} />\r\n              </div>\r\n              <div className=\"col-sm-9 py-3 customDate d-none\" id=\"\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-4\">\r\n                    <label>{local_Strings.InboxMessageListingFilterWithLabel}</label>\r\n                    <input type=\"date\" className=\"form-control\" />\r\n                  </div>\r\n                  <div className=\"col-lg-4\">\r\n                    <label>{local_Strings.InboxMessageListingFilterWithLabel}</label>\r\n                    <input type=\"date\" className=\"form-control\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n\r\n          <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n            <ul className=\"box-list\" id=\"dataList\">\r\n              {filteredData &&\r\n                filteredData.length > 0 &&\r\n                !!filteredData[0].adviceDate ?\r\n                filteredData.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.NoDataToShow)}\r\n            </ul>\r\n          </div>\r\n          <FilterMoreButtonControl showMore={InboxMessages.messages && InboxMessages.messages.length > rowLimit &&\r\n            offset < filteredData.length} onClickMore={() => setOffset(offset + 5)} />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InboxListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Notifications\\NotificationsForm.tsx",["673","674","675","676","677","678","679","680","681","682","683"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { GetAllCustomerList, SendNotificationsToCIFs, SendNotificationsToAll } from \"../../services/cmsService\";\r\nimport moment from \"moment\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport InvalidFieldError from '../../shared/invalid-field-error';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport '@ckeditor/ckeditor5-build-classic/build/translations/ar.js';\r\n//import Base64UploadAdapter from '@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter';\r\nimport { emptyCustomer, ICustomer, emptyNotificationsDetail, INotificationsDetail } from \"../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { CustomerListContext } from \"../../pages/Admin/Admin\";\r\nimport Swal from 'sweetalert2';\r\n\r\ninterface DetailsProps {\r\n  item?: INotificationsDetail\r\n  show: boolean;\r\n  editable: boolean;\r\n  OnHide: () => void;\r\n  OnBack: () => void;\r\n  refreshList: () => void;\r\n}\r\n\r\nfunction NotificationsForm(props: DetailsProps) {\r\n  const showMoreNotificationsForm = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n  const customerList = useContext(CustomerListContext);\r\n  const [data, setData] = useState<INotificationsDetail>(emptyNotificationsDetail);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [showCustomerError, setCustomerError] = useState<boolean>(false);\r\n  const formValidationSchema = yup.object({\r\n    selectedCIFs: yup.string().nullable().min(1).required(\"Select at least one customer\"),\r\n    messageTitle: yup.string().nullable().required(\"Subject is required\"),\r\n    messageTitleAr: yup.string().nullable().required(\"Arabic Subject is required\"),\r\n    expiryDate: yup.string().nullable().required(\"Expire date is required\"),\r\n  });\r\n\r\n  const submitTheRecord = async (values: INotificationsDetail) => {\r\n\r\n    setLoading(true);\r\n    const item = {\r\n      cif: values.selectedCIFs.length === customerList.length ? \"\" : values.selectedCIFs.flatMap(x => x[\"value\"]).toString(),\r\n      title: values.messageTitle,\r\n      titleAr: values.messageTitleAr,\r\n      expiryData: moment(values.expiryDate).utc(true),\r\n      message: values.messageBody,\r\n      messageAr: values.messageBodyAr,\r\n    };\r\n\r\n    const x = values.selectedCIFs.length === customerList.length ? await SendNotificationsToAll(item) : await SendNotificationsToCIFs(item);\r\n    if (x) {\r\n\r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'success',\r\n        title: local_Strings.NotificationsSavedMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n      props.refreshList();\r\n      props.OnHide();\r\n    } else {\r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'error',\r\n        title: local_Strings.GenericErrorMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    if (props.item && props.item.id > 0) {\r\n      //setData(props.item);\r\n\r\n      if (customerList.length > 0 && !!customerList[0].id) {\r\n        const _selectCustomers = customerList.filter((i) => i.id === props.item.customerId);\r\n        if (_selectCustomers.length > 0) {\r\n          setData({\r\n            ...props.item, selectedCIFs: [{\r\n              \"value\": _selectCustomers[0].id,\r\n              \"label\": _selectCustomers[0].shortName\r\n            }]\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      setData(emptyNotificationsDetail);\r\n    }\r\n\r\n  }, [props.item]);\r\n\r\n  const options = customerList ? customerList.map((c) => ({\r\n    \"value\": (c.id ? c.id : \"\"),\r\n    \"label\": (c.shortName ? c.shortName : \"\")\r\n  })) : [];\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.OnHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.OnBack}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">{local_Strings.NotificationsListingTitle}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.OnHide}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={<PuffLoader\r\n            size={Constant.SpnnerSize}\r\n            color={Constant.SpinnerColor}\r\n          />}\r\n        />\r\n        <Formik\r\n          initialValues={data}\r\n          validationSchema={formValidationSchema}\r\n          onSubmit={(values) => submitTheRecord(values)}\r\n          enableReinitialize={true}\r\n          validateOnChange={props.editable}\r\n          validateOnBlur={props.editable}\r\n        >\r\n          {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            setFieldValue,\r\n            handleSubmit,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n            validateForm\r\n          }) => (\r\n            <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n              <div className=\"box-body\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.NotificationsCustomerNameLabel}</label>\r\n                  {props.editable ?\r\n                    <React.Fragment>\r\n                      <MultiSelect\r\n                        options={options}\r\n                        value={values.selectedCIFs && values.selectedCIFs.length > 0\r\n                          && values.selectedCIFs[0].value !== \"0\" ? values.selectedCIFs : null}\r\n                        onChange={(_item) => {\r\n                          setFieldValue(\"selectedCIFs\", _item);\r\n                          handleBlur(\"selectedCIFs\");\r\n                          if (_item.length !== 0) {\r\n                            setCustomerError(false);\r\n                          }\r\n                        }}\r\n                        labelledBy={\"Select\"}\r\n                      />\r\n                      {showCustomerError && InvalidFieldError(\"Select at least one customer\")}\r\n                    </React.Fragment>\r\n                    : <span className=\"box-brief mb-3\">\r\n                      {values.selectedCIFs && values.selectedCIFs.length > 0 ? values.selectedCIFs[0].label : \"\"}\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.NotificationsNameLabel}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.messageTitle || \"\"}\r\n                    onChange={handleChange(\"messageTitle\")}\r\n                    onBlur={handleBlur(\"messageTitle\")} />\r\n                  {touched.messageTitle && errors.messageTitle && InvalidFieldError(errors.messageTitle)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.NotificationsArNameLabel}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.messageTitleAr || \"\"}\r\n                    onChange={handleChange(\"messageTitleAr\")}\r\n                    onBlur={handleBlur(\"messageTitleAr\")} />\r\n                  {touched.messageTitleAr && errors.messageTitleAr && InvalidFieldError(errors.messageTitleAr)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.NotificationsExpireLabel}</label>\r\n\r\n                  <DatePicker name=\"expiryDate\"\r\n                    selected={!!values.expiryDate ? new Date(values.expiryDate) : null}\r\n                    onChange={(date: Date) => setFieldValue(\"expiryDate\", date)}\r\n                    onBlur={handleBlur(\"expiryDate\")}\r\n                    placeholderText={\"\"}\r\n                    readOnly={!props.editable}\r\n                    minDate={new Date()}\r\n                    dateFormat=\"MMMM dd, yyyy\" />\r\n                  {touched.expiryDate && errors.expiryDate && InvalidFieldError(errors.expiryDate)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.NotificationsDescrLabel}</label>\r\n                  {props.editable ? <CKEditor\r\n                    editor={ClassicEditor}\r\n                    readOnly={!props.editable}\r\n                    data={values.messageBody || \"\"}\r\n                    onChange={(event: any, editor: any) => {\r\n                      const _text = editor.getData();\r\n                      setFieldValue(\"messageBody\", _text);\r\n                    }}\r\n                    config={{\r\n                      //plugins: [Base64UploadAdapter],\r\n                      toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                      allowedContent: true,\r\n                      extraAllowedContent: 'div(*)',\r\n                      language: \"en\",\r\n                      content: \"en\",\r\n                    }}\r\n                  /> : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.messageBody\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.NotificationsArDescrLabel}</label>\r\n                  {props.editable ? <CKEditor\r\n                    editor={ClassicEditor}\r\n                    readOnly={!props.editable}\r\n                    data={values.messageBodyAr || \"\"}\r\n                    onChange={(event: any, editor: any) => {\r\n                      const _text = editor.getData();\r\n                      setFieldValue(\"messageBodyAr\", _text);\r\n                    }}\r\n                    config={{\r\n                      //plugins: [Base64UploadAdapter],\r\n                      toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                      allowedContent: true,\r\n                      extraAllowedContent: 'div(*)',\r\n                      language: \"ar\",\r\n                      content: \"ar\",\r\n                    }}\r\n                  /> : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.messageBodyAr\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                {props.editable &&\r\n                  <div className=\"form-group\">\r\n\r\n                    <button className=\"btn btn-sm btn-primary mt-1\" type=\"submit\" style={{ float: \"right\", margin: 20 }}\r\n                      onClick={(e) => {\r\n                        validateForm(values);\r\n                        if (isValid) {\r\n                          handleSubmit();\r\n                        } else {\r\n\r\n                          Swal.fire({\r\n                            position: 'top-end',\r\n                            icon: 'error',\r\n                            title: local_Strings.formValidationMessage,\r\n                            showConfirmButton: false,\r\n                            timer: Constant.AlertTimeout\r\n                          });\r\n                          handleBlur(\"selectedCIFs\");\r\n                          touched.messageTitle = true;\r\n                          touched.messageTitleAr = true;\r\n                          touched.expiryDate = true;\r\n                          if (values.selectedCIFs.length === 0 || values.selectedCIFs[0].value === \"0\") {\r\n                            setCustomerError(true);\r\n                          } else {\r\n                            setCustomerError(false);\r\n                          }\r\n                        }\r\n                      }}>\r\n                      {local_Strings.NotificationsSaveButton}</button>\r\n                  </div>\r\n                }\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default NotificationsForm;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ManageOffers\\OffersForm.tsx",["684","685","686","687"],"import React, { createRef, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { AddNewOffer, GetOfferById, UpdateOfferDetail } from \"../../services/cmsService\";\r\nimport moment from \"moment\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport InvalidFieldError from '../../shared/invalid-field-error';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport '@ckeditor/ckeditor5-build-classic/build/translations/ar.js';\r\n//import Base64UploadAdapter from '@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { emptyOfferData, IOfferDetail } from \"../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport pdfIcon from \"../../images/pdf.png\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport { saveAs } from 'file-saver';\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport axios from \"axios\";\r\nimport { CustomerListContext } from \"../../pages/Admin/Admin\";\r\nimport Swal from 'sweetalert2';\r\nconst mime = require('mime');\r\n\r\ninterface DetailsProps {\r\n  itemID?: number\r\n  show: boolean;\r\n  editable: boolean;\r\n  OnHide: () => void;\r\n  OnBack: () => void;\r\n  refreshList: () => void;\r\n}\r\n\r\nfunction OffersForm(props: DetailsProps) {\r\n  const fileInputRef = createRef<any>();\r\n  const auth = useContext(AuthContext);\r\n  const customerList = useContext(CustomerListContext);\r\n  local_Strings.setLanguage(auth.language);\r\n  const [data, setData] = useState<IOfferDetail>(emptyOfferData);\r\n  const [fileSize, setFileSize] = useState<number>(0);\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n  const [showCustomerError, setCustomerError] = useState<boolean>(false);\r\n\r\n  const formValidationSchema = yup.object({\r\n    selectedCIFs: yup.string().nullable().min(1).required(\"Select at least one customer\"),\r\n    title: yup.string().nullable().required(\"Title is required\"),\r\n    titleAr: yup.string().nullable().required(\"Arabic title is required\"),\r\n    //fileName: yup.string().nullable().required(\"Please upload a PDF file. \" + local_Strings.moreThanLimit),\r\n    expireDate: yup.string().nullable().required(\"Expire date is required\"),\r\n  });\r\n\r\n  const submitTheRecord = async (values: any) => {\r\n\r\n    setLoading(true);\r\n\r\n    const requests = [];\r\n    values.selectedCIFs.forEach(element => {\r\n      const item = {\r\n        cif: element.value,\r\n        title: values.title,\r\n        titleAr: values.titleAr,\r\n        createdDate: moment().utc(true),\r\n        expireDate: moment(values.expireDate).utc(true),\r\n        description: \"\",\r\n        descriptionAr: \"\",\r\n        selectedOfferDetails: values.selectedOfferDetails,\r\n        selectedOfferDetailsAr: values.selectedOfferDetailsAr,\r\n        fileName: values.fileName,\r\n        fileContent: values.fileContent,\r\n        offersSubscriptions: []\r\n      };\r\n\r\n      requests.push(AddNewOffer(item));\r\n    });\r\n    axios\r\n      .all(requests)\r\n      .then(() => {\r\n\r\n        Swal.fire({\r\n          position: 'top-end',\r\n          icon: 'success',\r\n          title: local_Strings.OfferSavedMessage,\r\n          showConfirmButton: false,\r\n          timer: Constant.AlertTimeout\r\n        });\r\n        props.refreshList();\r\n        props.OnHide();\r\n      })\r\n      .catch((e: any) => Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'error',\r\n        title: local_Strings.GenericErrorMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      }))\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const updateRecord = async (values: any) => {\r\n\r\n    setLoading(true);\r\n    const x = await UpdateOfferDetail(values);\r\n    if (x) {\r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'success',\r\n        title: local_Strings.OfferSavedMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n      props.refreshList();\r\n      props.OnHide();\r\n    } else {\r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'error',\r\n        title: local_Strings.GenericErrorMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetOfferById(props.itemID)\r\n        .then((responseData: any) => {\r\n          if (responseData && responseData.length > 0 && isMounted) {\r\n            const _item = responseData[0] as IOfferDetail;\r\n            setData(_item);\r\n            const _calSize = (3 * (_item.fileContent.length / 4 / 1024 / 1024)).toFixed(4);\r\n            setFileSize(Math.round((Number(_calSize) + Number.EPSILON) * 100) / 100);\r\n\r\n            if (customerList.length > 0 && !!customerList[0].id) {\r\n              const _selectCustomers = customerList.filter((i) => i.id === _item.cif);\r\n              if (_selectCustomers.length > 0) {\r\n                setData({\r\n                  ..._item, selectedCIFs: [{\r\n                    \"value\": _selectCustomers[0].id,\r\n                    \"label\": _selectCustomers[0].shortName\r\n                  }]\r\n                });\r\n              }\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (props.show && props.itemID && props.itemID > 0) {\r\n      initialLoadMethod();\r\n    } else {\r\n      setData(emptyOfferData);\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [props.itemID, props.show]);\r\n\r\n  const options = customerList && customerList.length > 0 ? customerList.map((c) => ({\r\n    \"value\": (c.id ? c.id : \"\"),\r\n    \"label\": (c.shortName ? c.shortName : \"\")\r\n  })) : [];\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.OnHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.OnBack}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">{local_Strings.OffersDetailsTitle}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.OnHide}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={<PuffLoader\r\n            size={Constant.SpnnerSize}\r\n            color={Constant.SpinnerColor}\r\n          />}\r\n        />\r\n        <Formik\r\n          initialValues={data}\r\n          validationSchema={formValidationSchema}\r\n          onSubmit={(values) => values.id > 0 ? updateRecord(values) : submitTheRecord(values)}\r\n          enableReinitialize={true}\r\n          validateOnChange={props.editable}\r\n          validateOnBlur={props.editable}\r\n        >\r\n          {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            setFieldValue,\r\n            handleSubmit,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n            validateForm\r\n          }) => (\r\n            <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n              <div className=\"box-body\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.NotificationsCustomerNameLabel}</label>\r\n                  {props.editable && values.id === 0 ?\r\n                    <React.Fragment>\r\n                      <MultiSelect\r\n                        hasSelectAll={false}\r\n                        options={options}\r\n                        value={values.selectedCIFs && values.selectedCIFs.length > 0\r\n                          && values.selectedCIFs[0].value !== \"0\" ? values.selectedCIFs : null}\r\n                        onChange={(_item) => {\r\n                          setFieldValue(\"selectedCIFs\", _item);\r\n                          handleBlur(\"selectedCIFs\");\r\n                          if (_item.length !== 0) {\r\n                            setCustomerError(false);\r\n                          }\r\n                        }}\r\n                        labelledBy={\"Select\"}\r\n                        disabled={values.id > 0}\r\n                        disableSearch={values.id > 0}\r\n                      />\r\n                      {showCustomerError && InvalidFieldError(\"Select at least one customer\")}\r\n                    </React.Fragment>\r\n                    : <span className=\"box-brief mb-3\">\r\n                      {values.selectedCIFs && values.selectedCIFs.length > 0 ? values.selectedCIFs[0].label : \"\"}\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.OfferNameLabel}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.title || \"\"}\r\n                    onChange={handleChange(\"title\")}\r\n                    onBlur={handleBlur(\"title\")} />\r\n                  {touched.title && errors.title && InvalidFieldError(errors.title)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.OfferArNameLabel}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.titleAr || \"\"}\r\n                    onChange={handleChange(\"titleAr\")}\r\n                    onBlur={handleBlur(\"titleAr\")} />\r\n                  {touched.titleAr && errors.titleAr && InvalidFieldError(errors.titleAr)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.OfferExpireLabel}</label>\r\n\r\n                  <DatePicker name=\"expireDate\"\r\n                    selected={!!values.expireDate ? new Date(values.expireDate) : null}\r\n                    onChange={(date: Date) => setFieldValue(\"expireDate\", date)}\r\n                    onBlur={handleBlur(\"expireDate\")}\r\n                    placeholderText={\"\"}\r\n                    readOnly={!props.editable}\r\n                    minDate={new Date()}\r\n                    dateFormat=\"MMMM dd, yyyy\" />\r\n                  {touched.expireDate && errors.expireDate && InvalidFieldError(errors.expireDate)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.selectedOfferDetailsLabel}</label>\r\n                  {props.editable ?\r\n                    <CKEditor\r\n                      editor={ClassicEditor}\r\n                      data={values.selectedOfferDetails || \"\"}\r\n                      onChange={(event: any, editor: any) => {\r\n                        const _text = editor.getData();\r\n                        setFieldValue(\"selectedOfferDetails\", _text);\r\n                      }}\r\n                      config={{\r\n                        //plugins: [Base64UploadAdapter],\r\n                        toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                        allowedContent: true,\r\n                        extraAllowedContent: 'div(*)',\r\n                        language: \"en\",\r\n                        content: \"en\",\r\n                      }}\r\n                    /> : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.selectedOfferDetails\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.selectedOfferDetailsArLabel}</label>\r\n                  {props.editable ?\r\n                    <CKEditor\r\n                      editor={ClassicEditor}\r\n                      data={values.selectedOfferDetailsAr || \"\"}\r\n                      onChange={(event: any, editor: any) => {\r\n                        const _text = editor.getData();\r\n                        setFieldValue(\"selectedOfferDetailsAr\", _text);\r\n                      }}\r\n                      config={{\r\n                        //plugins: [Base64UploadAdapter],\r\n                        toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                        allowedContent: true,\r\n                        extraAllowedContent: 'div(*)',\r\n                        language: \"ar\",\r\n                        content: \"ar\",\r\n                      }}\r\n                    /> : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.selectedOfferDetailsAr\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n\r\n                  <label className=\"mb-1 text-600\">{local_Strings.OfferAttachment}</label>\r\n                  {props.editable ?\r\n                    <React.Fragment>\r\n                      <label className=\"file\">\r\n                        <input type=\"file\" multiple={false}\r\n                          id=\"file\" aria-label=\"File browser example\"\r\n                          lang={auth.language}\r\n                          className=\"\"\r\n                          accept='application/pdf,.pdf'\r\n                          ref={fileInputRef}\r\n                          onBlur={handleBlur(\"fileName\")}\r\n                          onChange={() => {\r\n\r\n                            const file = fileInputRef.current.files[0];\r\n                            const supportedExtensions = ['pdf'];\r\n                            if (file) {\r\n                              if (file.size <= 0) {\r\n                                Swal.fire({\r\n                                  position: 'top-end',\r\n                                  icon: 'error',\r\n                                  title: file.name + local_Strings.isEmptyText,\r\n                                  showConfirmButton: false,\r\n                                  timer: Constant.AlertTimeout\r\n                                });\r\n                                fileInputRef.current.value = \"\";\r\n                              } else if (!supportedExtensions.includes(file.name.toLowerCase().split('.').pop())) {\r\n\r\n                                Swal.fire({\r\n                                  position: 'top-end',\r\n                                  icon: 'error',\r\n                                  title: local_Strings.supportedFileTypeError.replace(\"{*}\", file.name),\r\n                                  showConfirmButton: false,\r\n                                  timer: Constant.AlertTimeout\r\n                                });\r\n                                fileInputRef.current.value = \"\";\r\n                              } else if ((file.size / 1024 / 1024) > 10 ||\r\n                                (file.size / 1024 / 1024) > 10\r\n                              ) {\r\n\r\n                                Swal.fire({\r\n                                  position: 'top-end',\r\n                                  icon: 'error',\r\n                                  title: local_Strings.moreThanLimit,\r\n                                  showConfirmButton: false,\r\n                                  timer: Constant.AlertTimeout\r\n                                });\r\n                                fileInputRef.current.value = \"\";\r\n                              } else {\r\n                                const reader = new FileReader();\r\n                                reader.onload = (e: any) => {\r\n                                  const content = new TextDecoder().decode(Buffer.from(e.target.result));\r\n                                  const fileContent = content.split(',').pop();\r\n\r\n                                  setFieldValue(\"fileName\", file.name);\r\n                                  setFieldValue(\"fileContent\", fileContent);\r\n\r\n                                  const _calSize = (3 * ((fileContent ? fileContent.length : 1) / 4 / 1024 / 1024)).toFixed(4);\r\n                                  setFileSize(Math.round((Number(_calSize) + Number.EPSILON) * 100) / 100);\r\n                                }\r\n                                reader.readAsDataURL(file);\r\n                                fileInputRef.current.value = \"\";\r\n                              }\r\n                            }\r\n                          }} />\r\n\r\n                        <span className=\"file-custom\">\r\n                          {local_Strings.OfferFileBrowseLabel}\r\n                        </span>\r\n                      </label>\r\n                    </React.Fragment> : null}\r\n\r\n                  {/* {touched.fileName && errors.fileName && InvalidFieldError(errors.fileName)} */}\r\n                </div>\r\n                {values.fileName && !!values.fileName ?\r\n                  <div className=\"row no-gutters align-items-center view-attachment\">\r\n                    <div className=\"col-2 col-lg-2 text-center\">\r\n                      <img alt=\"\" src={pdfIcon}\r\n                        style={{ maxWidth: \"75%\" }} className=\"img-fluid\" />\r\n                    </div>\r\n                    <div className=\"col-8 col-lg-9 cursor-pointer\"\r\n                      onClick={() => {\r\n                        const blob = helper.b64toBlob(values.fileContent, mime.getType(values.fileName));\r\n                        saveAs(blob, values.fileName);\r\n                      }}>\r\n                      <h5>{values.fileName}<br />\r\n                        <small>{local_Strings.sizeLabel}: {fileSize} MB</small></h5>\r\n                    </div>\r\n                    {props.editable &&\r\n                      <div className=\"col-2 col-lg-1 text-center\">\r\n                        <button className=\"btnFileDelete\" onClick={() => {\r\n                          setFieldValue(\"fileName\", \"\");\r\n                          setFieldValue(\"fileContent\", \"\");\r\n                        }}\r\n                        >\r\n                          <i className=\"fa fa-trash-o\"></i>\r\n                        </button>\r\n                      </div>\r\n                    }\r\n                  </div> : null}\r\n                {props.editable &&\r\n                  <div className=\"form-group\">\r\n\r\n                    <button className=\"btn btn-sm btn-primary mt-1\" type=\"submit\" style={{ float: \"right\", margin: 20 }}\r\n                      onClick={(e) => {\r\n\r\n                        validateForm(values);\r\n                        if (isValid) {\r\n                          handleSubmit();\r\n                        } else {\r\n                          Swal.fire({\r\n                            position: 'top-end',\r\n                            icon: 'error',\r\n                            title: local_Strings.formValidationMessage,\r\n                            showConfirmButton: false,\r\n                            timer: Constant.AlertTimeout\r\n                          });\r\n                          if (values.selectedCIFs.length === 0 || values.selectedCIFs[0].value === \"0\") {\r\n                            setCustomerError(true);\r\n                          } else {\r\n                            setCustomerError(false);\r\n                          }\r\n                          handleBlur(\"selectedCIFs\");\r\n                          touched.title = true;\r\n                          touched.titleAr = true;\r\n                          touched.expireDate = true;\r\n                          \r\n                        }\r\n                      }}>\r\n                      {local_Strings.OfferSaveButton}</button>\r\n                  </div>\r\n                }\r\n              </div>\r\n\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default OffersForm;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\ProductsAndOffers\\ProductsAndOffersForm.tsx",["688","689","690","691","692","693","694"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { AddProductsAndOffers, UpdateProductsAndOffers } from \"../../services/cmsService\";\r\nimport moment from \"moment\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport InvalidFieldError from '../../shared/invalid-field-error';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport '@ckeditor/ckeditor5-build-classic/build/translations/ar.js';\r\n//import Base64UploadAdapter from '@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { emptyProductAndOffersData, IProductAndOffersDetail } from \"../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport Swal from 'sweetalert2';\r\n\r\ninterface DetailsProps {\r\n  item?: IProductAndOffersDetail\r\n  show: boolean;\r\n  editable: boolean;\r\n  OnHide: () => void;\r\n  OnBack: () => void;\r\n  refreshList: () => void;\r\n}\r\n\r\nfunction ProductsAndOffersForm(props: DetailsProps) {\r\n  const showMoreProductsAndOffersForm = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n  const [data, setData] = useState<IProductAndOffersDetail>(emptyProductAndOffersData);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const formValidationSchema = yup.object({\r\n    name: yup.string().nullable().required(\"Name is required\"),\r\n    nameAr: yup.string().nullable().required(\"Arabic Name is required\"),\r\n    expiryDate: yup.string().nullable().required(\"Expire date is required\"),\r\n  });\r\n\r\n  const submitTheRecord = async (values: IProductAndOffersDetail) => {\r\n\r\n    setLoading(true);\r\n    const item = data.id > 0 ? values : {\r\n      name: values.name,\r\n      nameAr: values.nameAr,\r\n      createdDate: moment().utc(true),\r\n      expiryDate: moment(values.expiryDate).utc(true),\r\n      details: values.details,\r\n      detailsAr: values.detailsAr,\r\n    };\r\n\r\n    const x = data.id > 0 ? await UpdateProductsAndOffers(item) : await AddProductsAndOffers(item);\r\n    if (x) {\r\n      \r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'success',\r\n        title: local_Strings.ProductsAndOffersSavedMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n      props.refreshList();\r\n      props.OnHide();\r\n    } else {\r\n      Swal.fire({\r\n        position: 'top-end',\r\n        icon: 'error',\r\n        title: local_Strings.GenericErrorMessage,\r\n        showConfirmButton: false,\r\n        timer: Constant.AlertTimeout\r\n      });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setData(props.item || emptyProductAndOffersData);\r\n  }, [props.item, props.show]);\r\n\r\n  //console.log(data);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.OnHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.OnBack}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">{local_Strings.ProductsAndOffersDetailsTitle}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.OnHide}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={<PuffLoader\r\n            size={Constant.SpnnerSize}\r\n            color={Constant.SpinnerColor}\r\n          />}\r\n        />\r\n        <Formik\r\n          initialValues={data}\r\n          validationSchema={formValidationSchema}\r\n          onSubmit={(values) => submitTheRecord(values)}\r\n          enableReinitialize={true}\r\n          validateOnChange={props.editable}\r\n          validateOnBlur={props.editable}\r\n        >\r\n          {({\r\n            values,\r\n            handleBlur,\r\n            handleChange,\r\n            setFieldValue,\r\n            handleSubmit,\r\n            errors,\r\n            touched,\r\n            isValid,\r\n            validateForm\r\n          }) => (\r\n            <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n              <div className=\"box-body\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.ProductsAndOffersNameLabel}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.name || \"\"}\r\n                    onChange={handleChange(\"name\")}\r\n                    onBlur={handleBlur(\"name\")} />\r\n                  {touched.name && errors.name && InvalidFieldError(errors.name)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.ProductsAndOffersArNameLabel}</label>\r\n                  <input type=\"text\" className=\"form-control\"\r\n                    readOnly={!props.editable}\r\n                    value={values.nameAr || \"\"}\r\n                    onChange={handleChange(\"nameAr\")}\r\n                    onBlur={handleBlur(\"nameAr\")} />\r\n                  {touched.nameAr && errors.nameAr && InvalidFieldError(errors.nameAr)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.ProductsAndOffersExpireLabel}</label>\r\n\r\n                  <DatePicker name=\"expiryDate\"\r\n                    selected={!!values.expiryDate ? new Date(values.expiryDate) : null}\r\n                    onChange={(date: Date) => setFieldValue(\"expiryDate\", date)}\r\n                    onBlur={handleBlur(\"expiryDate\")}\r\n                    placeholderText={\"\"}\r\n                    readOnly={!props.editable}\r\n                    minDate={new Date()}\r\n                    dateFormat=\"MMMM dd, yyyy\" />\r\n                  {touched.expiryDate && errors.expiryDate && InvalidFieldError(errors.expiryDate)}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.ProductsAndOffersDescrLabel}</label>\r\n                  {props.editable ? <CKEditor\r\n                    editor={ClassicEditor}\r\n                    readOnly={!props.editable}\r\n                    data={values.details || \"\"}\r\n                    onChange={(event: any, editor: any) => {\r\n                      const _text = editor.getData();\r\n                      setFieldValue(\"details\", _text);\r\n                    }}\r\n                    config={{\r\n                      //plugins: [Base64UploadAdapter],\r\n                      toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                      allowedContent: true,\r\n                      extraAllowedContent: 'div(*)',\r\n                      language: \"en\",\r\n                      content: \"en\",\r\n                    }}\r\n                  /> : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.details\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 text-600\">{local_Strings.ProductsAndOffersArDescrLabel}</label>\r\n                  {props.editable ? <CKEditor\r\n                    editor={ClassicEditor}\r\n                    readOnly={!props.editable}\r\n                    data={values.detailsAr || \"\"}\r\n                    onChange={(event: any, editor: any) => {\r\n                      const _text = editor.getData();\r\n                      setFieldValue(\"detailsAr\", _text);\r\n                    }}\r\n                    config={{\r\n                      //plugins: [Base64UploadAdapter],\r\n                      toolbar: ['heading', '|', 'bold', 'italic', '|', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|', 'undo', 'redo'],\r\n                      allowedContent: true,\r\n                      extraAllowedContent: 'div(*)',\r\n                      language: \"ar\",\r\n                      content: \"ar\",\r\n                    }}\r\n                  /> : <span className=\"box-brief mb-3\">\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: values.detailsAr\r\n                        }} />\r\n                    </span>}\r\n                </div>\r\n                {props.editable &&\r\n                  <div className=\"form-group\">\r\n\r\n                    <button className=\"btn btn-sm btn-primary mt-1\" type=\"submit\" style={{ float: \"right\", margin: 20 }}\r\n                      onClick={(e) => {\r\n                        validateForm(values);\r\n                        if (isValid) {\r\n                          handleSubmit();\r\n                        } else {\r\n                          \r\n                          Swal.fire({\r\n                            position: 'top-end',\r\n                            icon: 'error',\r\n                            title: local_Strings.formValidationMessage,\r\n                            showConfirmButton: false,\r\n                            timer: Constant.AlertTimeout\r\n                          });\r\n                          touched.name = true;\r\n                          touched.nameAr = true;\r\n                          touched.expiryDate = true;\r\n                        }\r\n                      }}>\r\n                      {local_Strings.ProductsAndOffersSaveButton}</button>\r\n                  </div>\r\n                }\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ProductsAndOffersForm;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\Inbox\\Inbox.tsx",["695","696"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport InboxDetails from \"./InboxDetails\";\r\nimport InboxListing from \"./InboxListing\";\r\nimport { emptyInboxDetail, IInboxDetail } from \"../../Helpers/publicInterfaces\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { InboxContext } from \"../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\n\r\nfunction Inbox() {\r\n  const [showInboxListing, setShowInboxListing] = useState(false);\r\n  const [message, setMessageDetail] = useState<IInboxDetail>(emptyInboxDetail);\r\n  const currentContext = useContext(AuthContext);\r\n  const InboxMessages = useContext(InboxContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const countUnreadInbox = InboxMessages.messages && InboxMessages.messages.length > 0\r\n    ? InboxMessages.messages.filter((i: any) => !i.isRead).length : 0;\r\n\r\n  const handleCloseInboxListing = () => {\r\n    setShowInboxListing(false);\r\n  };\r\n  const handleShowInboxListing = () => {\r\n    setShowInboxListing(true);\r\n  };\r\n\r\n  const [showInboxDetails, setshowInboxDetails] = useState(false);\r\n  const handleCloseInboxDetails = () => setshowInboxDetails(false);\r\n  const handleShowInboxDetails = (detail: IInboxDetail) => {\r\n    handleCloseInboxListing();\r\n    setshowInboxDetails(true);\r\n    setMessageDetail(detail);\r\n  };\r\n  const handleBackInboxDetails = () => {\r\n    setshowInboxDetails(false);\r\n    setShowInboxListing(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        className=\"\"\r\n        href=\"#\"\r\n        onClick={handleShowInboxListing}\r\n      >\r\n        <i className={countUnreadInbox > 0 ? \"fa fa-envelope unread\" : \"fa fa-envelope\"} />\r\n      </a>\r\n      {InboxMessages.messages && InboxMessages.messages.length > 0\r\n        && !!InboxMessages.messages[0].adviceDate &&\r\n        <InboxListing\r\n          showInboxListingModal={showInboxListing}\r\n          hideInboxListingModal={handleCloseInboxListing}\r\n          showInboxDetailsModal={handleShowInboxDetails}\r\n        />}\r\n      {message && !!message.adviceDate &&\r\n        <InboxDetails\r\n          item={message}\r\n          showInboxDetailsModal={showInboxDetails}\r\n          hideInboxDetailsModal={handleCloseInboxDetails}\r\n          backInboxListingModal={handleBackInboxDetails}\r\n        />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Inbox;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\Requests.tsx",["697","698","699","700","701"],"import React, { useState } from \"react\";\r\n\r\nimport depositIcon from \"../../../images/deposit-icon.svg\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport RequestsListing from \"./RequestsListing\";\r\nimport RequestsDetails from \"./RequestsDetails\";\r\nimport NewRequest from \"./NewRequest\";\r\nimport requestIcon from \"../../images/request-icon.svg\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport { emptyRequestDetail, IRequestDetail } from \"../../Helpers/publicInterfaces\";\r\n\r\n\r\nfunction Requests() {\r\n  const [showRequestsListing, setShowRequestsListing] = useState(false);\r\n  const [item, setDetail] = useState<IRequestDetail>(emptyRequestDetail);\r\n\r\n  const handleCloseRequestsListing = () => {\r\n    setShowRequestsListing(false);\r\n  };\r\n  const handleShowRequestsListing = () => {\r\n    setShowRequestsListing(true);\r\n  };\r\n\r\n  const [showRequestsDetails, setshowRequestsDetails] = useState(false);\r\n\r\n  const handleCloseRequestsDetails = () => setshowRequestsDetails(false);\r\n  const handleShowRequestsDetails = (detail: IRequestDetail) => {\r\n    handleCloseRequestsListing();\r\n    setshowRequestsDetails(true);\r\n    setDetail(detail);\r\n  };\r\n  \r\n  const handleBackRequestsDetails = () => {\r\n    setshowRequestsDetails(false);\r\n\r\n    handleShowRequestsListing();\r\n  };\r\n\r\n  const [showNewRequest, setShowNewRequest] = useState(false);\r\n\r\n  const handleCloseNewRequest = () => {\r\n    setShowNewRequest(false);\r\n  };\r\n  const handleShowNewRequest = () => {\r\n    handleCloseRequestsListing();\r\n    setShowNewRequest(true);\r\n  };\r\n  const handleBackNewRequest = () => {\r\n    setShowNewRequest(false);\r\n\r\n    handleShowRequestsListing();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"#\" onClick={handleShowRequestsListing}>\r\n          <img src={requestIcon} className=\"images-fluid\" />\r\n          {local_Strings.navigationItem4}\r\n        </a>\r\n      </li>\r\n      <RequestsListing\r\n        showRequestsListingModal={showRequestsListing}\r\n        hideRequestsListingModal={handleCloseRequestsListing}\r\n        showRequestsDetailsModal={handleShowRequestsDetails}\r\n        showNewRequestModal={handleShowNewRequest}\r\n      />\r\n      {item && !!item.requestCreateDate &&\r\n        <RequestsDetails\r\n          showRequestsDetailsModal={showRequestsDetails}\r\n          hideRequestsDetailsModal={handleCloseRequestsDetails}\r\n          backRequestsListingModal={handleBackRequestsDetails}\r\n          showNewRequestModal={handleShowNewRequest}\r\n          item={item}\r\n        />}\r\n      <NewRequest\r\n        showNewRequestModal={showNewRequest}\r\n        hideNewRequestModal={handleCloseNewRequest}\r\n        backNewRequestModal={handleBackNewRequest}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Requests;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\Transactions.tsx",["702","703","704","705","706"],"import React, { useState } from \"react\";\r\n\r\nimport depositIcon from \"../../../images/deposit-icon.svg\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport TransactionsListing from \"./TransactionsListing\";\r\nimport TransactionsDetails from \"./TransactionsDetails\";\r\nimport NewTransaction from \"./NewTransactions\";\r\nimport transactionIcon from \"../../images/transaction-icon.svg\";\r\nimport NewBeneficiary from \"../beneficiaries/NewBeneficiaries\";\r\nimport BeneficiariesDetails from \"../beneficiaries/BeneficiariesDetails\";\r\nimport BeneficiariesListing from \"../beneficiaries/BeneficiariesListing\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport { emptyTransactionDetail, ITransactionDetail } from \"../../Helpers/publicInterfaces\";\r\n\r\nfunction Transactions() {\r\n  const [showTransactionsListing, setShowTransactionsListing] = useState(false);\r\n  const [item, setDetail] = useState<ITransactionDetail>(emptyTransactionDetail);\r\n  const handleCloseTransactionsListing = () => {\r\n    setShowTransactionsListing(false);\r\n  };\r\n  const handleShowTransactionsListing = () => {\r\n    setShowTransactionsListing(true);\r\n  };\r\n\r\n  const [showTransactionsDetails, setshowTransactionsDetails] = useState(false);\r\n\r\n  const handleCloseTransactionsDetails = () =>\r\n    setshowTransactionsDetails(false);\r\n  const handleShowTransactionsDetails = (detail: ITransactionDetail) => {\r\n    handleCloseTransactionsListing();\r\n    setDetail(detail);\r\n    setshowTransactionsDetails(true);\r\n  };\r\n  const handleBackTransactionsDetails = () => {\r\n    setshowTransactionsDetails(false);\r\n\r\n    handleShowTransactionsListing();\r\n  };\r\n\r\n  const [showNewTransaction, setShowNewTransaction] = useState(false);\r\n\r\n  const handleCloseNewTransaction = () => {\r\n    setShowNewTransaction(false);\r\n  };\r\n  const handleShowNewTransaction = () => {\r\n    handleCloseTransactionsListing();\r\n    setShowNewTransaction(true);\r\n  };\r\n  const handleBackNewTransaction = () => {\r\n    setShowNewTransaction(false);\r\n\r\n    handleShowTransactionsListing();\r\n  };\r\n  ///benfeciaries\r\n  const [showBeneficiariesListing, setShowBeneficiariesListing] = useState(\r\n    false\r\n  );\r\n\r\n  const handleCloseBeneficiariesListing = () => {\r\n    setShowBeneficiariesListing(false);\r\n  };\r\n  const handleShowBeneficiariesListing = () => {\r\n    handleCloseTransactionsListing();\r\n    setShowBeneficiariesListing(true);\r\n  };\r\n  const handleBackBeneficiariesListing = () => {\r\n    handleCloseBeneficiariesListing();\r\n\r\n    handleShowTransactionsListing();\r\n  };\r\n\r\n  const [showBeneficiariesDetails, setshowBeneficiariesDetails] = useState(\r\n    false\r\n  );\r\n\r\n  const handleCloseBeneficiariesDetails = () =>\r\n    setshowBeneficiariesDetails(false);\r\n  const handleShowBeneficiariesDetails = () => {\r\n    handleCloseBeneficiariesListing();\r\n    setshowBeneficiariesDetails(true);\r\n  };\r\n  const handleBackBeneficiariesDetails = () => {\r\n    setshowBeneficiariesDetails(false);\r\n\r\n    handleShowBeneficiariesListing();\r\n  };\r\n\r\n  const [showNewBeneficiary, setShowNewBeneficiary] = useState(false);\r\n\r\n  const handleCloseNewBeneficiary = () => {\r\n    setShowNewBeneficiary(false);\r\n  };\r\n  const handleShowNewBeneficiary = () => {\r\n    handleCloseBeneficiariesListing();\r\n    setShowNewBeneficiary(true);\r\n  };\r\n  const handleBackNewBeneficiary = () => {\r\n    setShowNewBeneficiary(false);\r\n\r\n    handleShowBeneficiariesListing();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <li className=\"nav-item\">\r\n        <a\r\n          className=\"nav-link px-2\"\r\n          href=\"#\"\r\n          onClick={handleShowTransactionsListing}\r\n        >\r\n          <img src={transactionIcon} className=\"images-fluid\" />\r\n          {local_Strings.navigationItem2}\r\n        </a>\r\n      </li>\r\n      <TransactionsListing\r\n        showTransactionsListingModal={showTransactionsListing}\r\n        hideTransactionsListingModal={handleCloseTransactionsListing}\r\n        showTransactionsDetailsModal={handleShowTransactionsDetails}\r\n        showNewTransactionModal={handleShowNewTransaction}\r\n        showBeneficiariesListing={handleShowBeneficiariesListing}\r\n      />\r\n      {item && item.id > 0 &&\r\n        <TransactionsDetails\r\n          showTransactionsDetailsModal={showTransactionsDetails}\r\n          hideTransactionsDetailsModal={handleCloseTransactionsDetails}\r\n          backTransactionsListingModal={handleBackTransactionsDetails}\r\n          showNewTransactionModal={handleShowNewTransaction}\r\n          item={item}\r\n        />}\r\n      <NewTransaction\r\n        showNewTransactionModal={showNewTransaction}\r\n        hideNewTransactionModal={handleCloseNewTransaction}\r\n        backNewTransactionModal={handleBackNewTransaction}\r\n      />\r\n      <BeneficiariesListing\r\n        showBeneficiariesListingModal={showBeneficiariesListing}\r\n        hideBeneficiariesListingModal={handleCloseBeneficiariesListing}\r\n        showBeneficiariesDetailsModal={handleShowBeneficiariesDetails}\r\n        backBeneficiariesListingModal={handleBackBeneficiariesListing}\r\n        showNewBeneficiaryModal={handleShowNewBeneficiary}\r\n      />\r\n      <BeneficiariesDetails\r\n        showBeneficiariesDetailsModal={showBeneficiariesDetails}\r\n        hideBeneficiariesDetailsModal={handleCloseBeneficiariesDetails}\r\n        backBeneficiariesDetailsgModal={handleBackBeneficiariesDetails}\r\n        showNewBeneficiaryModal={handleShowNewBeneficiary}\r\n      />\r\n      <NewBeneficiary\r\n        showNewBeneficiaryModal={showNewBeneficiary}\r\n        hideNewBeneficiaryModal={handleCloseNewBeneficiary}\r\n        backNewBeneficiaryModal={handleBackNewBeneficiary}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Transactions;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOffersLanding.tsx",["707","708","709","710","711","712","713"],"import React, { useContext, useState } from \"react\";\r\nimport productsICon from \"../../images/products-offers-icon.svg\";\r\nimport AuthOffersDetails from \"./AuthOffersDetails\";\r\nimport AuthOffersListing from \"./AuthOffersListing\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { localStrings as local_Strings } from \"../../translations/localStrings\";\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { Link } from \"react-router-dom\";\r\nimport offerIcon from \"../../images/offer-icon.svg\";\r\nimport AuthOfferRequest from \"./AuthOfferRequest\";\r\nimport { emptyOfferData, IOfferDetail } from \"../../Helpers/publicInterfaces\";\r\n\r\ninterface iAuthOffersLanding {\r\n  showAuthOffersDetailsModal?: () => void;\r\n}\r\nfunction AuthOffersLanding(props: iAuthOffersLanding) {\r\n  const history = useHistory();\r\n  const auth = useContext(AuthContext);\r\n  local_Strings.setLanguage(auth.language);\r\n  const [itemID, setDetail] = useState<number>(0);\r\n  const [showAuthOffersListing, setShowAuthOffersListing] = useState(false);\r\n\r\n  const handleCloseAuthOffersListing = () => {\r\n    setShowAuthOffersListing(false);\r\n  };\r\n  const handleShowAuthOffersListing = () => {\r\n    setShowAuthOffersListing(true);\r\n  };\r\n\r\n  const [showAuthOffersDetails, setshowAuthOffersDetails] = useState(false);\r\n\r\n  const handleCloseAuthOffersDetails = () => setshowAuthOffersDetails(false);\r\n  const handleShowAuthOffersDetails = (itemID: number) => {\r\n    handleCloseAuthOffersListing();\r\n    setshowAuthOffersDetails(true);\r\n    setDetail(itemID);\r\n  };\r\n  const handleBackAuthOffersDetails = () => {\r\n    setshowAuthOffersDetails(false);\r\n\r\n    setShowAuthOffersListing(true);\r\n  };\r\n\r\n  const [showAuthOfferRequest, setshowAuthOfferRequest] = useState(false);\r\n\r\n  const handleCloseAuthOfferRequest = () => setshowAuthOfferRequest(false);\r\n  const handleShowAuthOfferRequest = () => {\r\n    handleCloseAuthOffersDetails();\r\n    setshowAuthOfferRequest(true);\r\n    //authOffersListingProps.hideAuthOffersListingModal;\r\n  };\r\n  const handleBackAuthOfferRequest = () => {\r\n    setshowAuthOfferRequest(false);\r\n\r\n    setshowAuthOffersDetails(true);\r\n  };\r\n  return (\r\n    <div>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" onClick={handleShowAuthOffersListing} href=\"#\">\r\n          <img src={offerIcon} className=\"images-fluid\" />\r\n          {local_Strings.navigationItem3}\r\n        </a>\r\n      </li>\r\n      <AuthOffersListing\r\n        showAuthOffersListingModal={showAuthOffersListing}\r\n        hideAuthOffersListingModal={handleCloseAuthOffersListing}\r\n        showAuthOffersDetailsModal={handleShowAuthOffersDetails}\r\n      />\r\n      {itemID > 0 &&\r\n      <AuthOffersDetails\r\n        showAuthOffersDetailsModal={showAuthOffersDetails}\r\n        hideAuthOffersDetailsModal={handleCloseAuthOffersDetails}\r\n        backAuthOffersDetailsModal={handleBackAuthOffersDetails}\r\n        showAuthOfferRequestModal={handleShowAuthOfferRequest}\r\n        itemID={itemID}\r\n      />}\r\n      <AuthOfferRequest\r\n        showAuthOfferRequestModal={showAuthOfferRequest}\r\n        hideAuthOfferRequestModal={handleCloseAuthOfferRequest}\r\n        backAuthOffersRequestModal={handleBackAuthOfferRequest}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AuthOffersLanding;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\Facilities.tsx",["714","715","716","717"],"import React, { useContext, useState } from \"react\";\r\nimport facilitiesIcon from \"../../../images/facilities-icon.svg\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport FacilitiesListing from \"./FacilitiesListing\";\r\nimport FacilitiesDetails from \"./FacilitiesDetails\";\r\nimport FacilitiesOutstandingPayment from \"./FacilitiesOutstandingPayment\";\r\nimport FacilitiesHistoricalPayment from \"./FacilitiesHistoricalPayment\";\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../../translations/localStrings\";\r\n\r\nfunction Facilities() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  const [facilityNumber, setReferenceId] = useState<string>(\"\");\r\n  const [showFacilitiesListing, setShowFacilitiesListing] = useState(false);\r\n  const [showFacilitiesDetails, setshowFacilitiesDetails] = useState(false);\r\n  const [\r\n    showFacilitiesOutstandingPayment,\r\n    setShowFacilitiesOutstandingPayment,\r\n  ] = useState(false);\r\n  const [\r\n    showFacilitiesHistoricalPayment,\r\n    setShowFacilitiesHistoricalPayment,\r\n  ] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"inner-box\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"ib-icon\">\r\n            <img src={facilitiesIcon} className=\"img-fluid\" />\r\n          </div>\r\n          <a href=\"#\" className=\"ib-text\" onClick={() => setShowFacilitiesListing(true)}>\r\n            <h4>{local_Strings.PortfolioLiabilitiesOption1}</h4>\r\n            <h5>\r\n              {(userPortfolio.totalLoans || \"0\") +\r\n                \" \" +\r\n                currentContext.userSettings.currency}\r\n            </h5>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <FacilitiesListing\r\n        showFacilitiesListingModal={showFacilitiesListing}\r\n        hideFacilitiesListingModal={() =>\r\n          setShowFacilitiesListing(false)\r\n        }\r\n        showFacilitiesDetailsModal={(facilityNumber: string) => {\r\n          setShowFacilitiesListing(false);\r\n          setshowFacilitiesDetails(true);\r\n          setReferenceId(facilityNumber);\r\n        }}\r\n      />\r\n      {facilityNumber && !!facilityNumber &&\r\n        <React.Fragment>\r\n          <FacilitiesDetails\r\n            showFacilitiesDetailsModal={showFacilitiesDetails}\r\n            hideFacilitiesDetailsModal={() => setshowFacilitiesDetails(false)}\r\n            backFacilitiesListingModal={() => {\r\n              setshowFacilitiesDetails(false);\r\n              setShowFacilitiesListing(true);\r\n            }}\r\n            showFacilitiesOutstandingPayment={() => {\r\n              setshowFacilitiesDetails(false);\r\n              setShowFacilitiesOutstandingPayment(true);\r\n            }}\r\n            showFacilitiesHistoricalPayment={() => {\r\n              setshowFacilitiesDetails(false);\r\n              setShowFacilitiesHistoricalPayment(true);\r\n            }}\r\n            facilityNumber={facilityNumber}\r\n          />\r\n          <FacilitiesOutstandingPayment\r\n            showFacilitiesOutstandingPaymentModal={showFacilitiesOutstandingPayment}\r\n            hideFacilitiesOutstandingPaymentModal={() =>\r\n              setShowFacilitiesOutstandingPayment(false)\r\n            }\r\n            backFacilitiesOutstandingPaymentModal={() => {\r\n              setShowFacilitiesOutstandingPayment(false);\r\n              setshowFacilitiesDetails(true);\r\n            }}\r\n            facilityNumber={facilityNumber}\r\n          />\r\n          <FacilitiesHistoricalPayment\r\n            showFacilitiesHistoricalPaymentModal={showFacilitiesHistoricalPayment}\r\n            hideFacilitiesHistoricalPaymentModal={() =>\r\n              setShowFacilitiesOutstandingPayment(false)}\r\n            backFacilitiesHistoricalPaymentModal={() =>\r\n              setShowFacilitiesHistoricalPayment(false)\r\n            }\r\n            facilityNumber={facilityNumber}\r\n          />\r\n        </React.Fragment>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Facilities;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Guarantees\\Guarantees.tsx",["718","719","720","721"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport guarantiesIcon from \"../../../images/guaranties-icon.svg\";\r\nimport GuaranteesListing from \"./GuaranteesListing\";\r\nimport GuaranteesDetails from \"./GuaranteesDetails\";\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../../translations/localStrings\";\r\n\r\nfunction Guarantees() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n\r\n  const [showGuaranteesListing, setShowGuaranteesListing] = useState(false);\r\n\r\n  const handleCloseGuaranteesListing = () => {\r\n    setShowGuaranteesListing(false);\r\n  };\r\n  const handleShowGuaranteesListing = () => {\r\n    setShowGuaranteesListing(true);\r\n  };\r\n\r\n  const [showGuaranteesDetails, setshowGuaranteesDetails] = useState(false);\r\n\r\n  const handleCloseGuaranteesDetails = () => setshowGuaranteesDetails(false);\r\n  const handleShowGuaranteesDetails = () => {\r\n    handleCloseGuaranteesListing();\r\n    setshowGuaranteesDetails(true);\r\n    //guaranteesListingProps.hideGuaranteesListingModal;\r\n  };\r\n  const handleBackGuaranteesDetails = () => {\r\n    setshowGuaranteesDetails(false);\r\n\r\n    setShowGuaranteesListing(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"inner-box\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"ib-icon\">\r\n            <img src={guarantiesIcon} className=\"img-fluid\" />\r\n          </div>\r\n          <a href=\"#\" className=\"ib-text\" onClick={handleShowGuaranteesListing}>\r\n            <h4>{local_Strings.PortfolioLiabilitiesOption2}</h4>\r\n            <h5>\r\n              {(userPortfolio.totalGuarantees || \"0\") +\r\n                \" \" +\r\n                currentContext.userSettings.currency}\r\n            </h5>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <GuaranteesListing\r\n        showGuaranteesListingModal={showGuaranteesListing}\r\n        hideGuaranteesListingModal={handleCloseGuaranteesListing}\r\n        showGuaranteesDetailsModal={handleShowGuaranteesDetails}\r\n      />\r\n      <GuaranteesDetails\r\n        showGuaranteesDetailsModal={showGuaranteesDetails}\r\n        hideGuaranteesDetailsModal={handleCloseGuaranteesDetails}\r\n        backGuaranteesListingModal={handleBackGuaranteesDetails}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Guarantees;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\cash\\Cash.tsx",["722","723","724","725"],"import React, { useContext, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport cashIcon from \"../../../images/cash-icon.svg\";\r\nimport CashListing from \"./CashListing\";\r\nimport CashDetails from \"./CashDetails\";\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../../translations/localStrings\";\r\n\r\nfunction Cash() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  const [params, setDetailScreenParams] = useState<{ accountNumber: string, balance: number }>({ accountNumber: \"\", balance: 0 });\r\n  const [showCashListing, setShowCashListing] = useState(false);\r\n\r\n  const handleCloseCashListing = () => {\r\n    setShowCashListing(false);\r\n  };\r\n  const handleShowCashListing = () => {\r\n    setShowCashListing(true);\r\n  };\r\n\r\n  const [showCashDetails, setshowCashDetails] = useState(false);\r\n\r\n  const handleCloseCashDetails = () => setshowCashDetails(false);\r\n  const handleShowCashDetails = (accountNumber: string, balance: number) => {\r\n    handleCloseCashListing();\r\n    setshowCashDetails(true);\r\n    setDetailScreenParams({ accountNumber, balance });\r\n  };\r\n  const handleBackCashDetails = () => {\r\n    setshowCashDetails(false);\r\n\r\n    setShowCashListing(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-lg-4 \">\r\n      <div className=\"inner-box\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"ib-icon\">\r\n            <img src={cashIcon} className=\"img-fluid\" />\r\n          </div>\r\n          <a href=\"#\" className=\"ib-text\" onClick={handleShowCashListing}>\r\n            <h4>{local_Strings.PortfolioAssetsOption1}</h4>\r\n            <h5>\r\n              {(userPortfolio.totalCash || \"0\") +\r\n                \" \" +\r\n                currentContext.userSettings.currency}\r\n            </h5>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <CashListing\r\n        showCashListingModal={showCashListing}\r\n        hideCashListingModal={handleCloseCashListing}\r\n        showCashDetailsModal={handleShowCashDetails}\r\n      />\r\n      {!!params.accountNumber &&\r\n        <CashDetails\r\n          showCashDetailsModal={showCashDetails}\r\n          hideCashDetailsModal={handleCloseCashDetails}\r\n          backCashListingModal={handleBackCashDetails}\r\n          params={params}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cash;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\Investments.tsx",["726","727","728","729"],"import React, { useContext, useState } from \"react\";\r\nimport investIcon from \"../../../images/invest-icon.svg\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport InvestmentsListing from \"./InvestmentsListing\";\r\nimport InvestmentsDetails from \"./InvestmentsDetails\";\r\nimport InvestmentsRecievedProfit from \"./InvestmentsRecievedProfit\";\r\nimport InvestmentsBuyAndSell from \"./InvestmentsBuyAndSell\";\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../../translations/localStrings\";\r\n\r\nfunction Investments() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  const [investmentNumber, setReferenceId] = useState<string>(\"\");\r\n\r\n  const [showInvestmentsListing, setShowInvestmentsListing] = useState(false);\r\n  const [showInvestmentsDetails, setshowInvestmentsDetails] = useState(false);\r\n  const [showInvestmentsRecievedProfit, setShowInvestmentsRecievedProfit,\r\n  ] = useState(false);\r\n  const [showInvestmentsBuyAndSell, setShowInvestmentsBuyAndSell] = useState(\r\n    false\r\n  );\r\n\r\n  return (\r\n    <div className=\"col-lg-4\">\r\n      <div className=\"inner-box\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"ib-icon\">\r\n            <img src={investIcon} className=\"img-fluid\" />\r\n          </div>\r\n          <a\r\n            href=\"#\"\r\n            className=\"ib-text\"\r\n            onClick={() => setShowInvestmentsListing(true)}\r\n          >\r\n            <h4>{local_Strings.PortfolioAssetsOption2}</h4>\r\n            <h5>\r\n              {(userPortfolio.totalInvestment || \"0\") +\r\n                \" \" +\r\n                currentContext.userSettings.currency}\r\n            </h5>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <InvestmentsListing\r\n        showInvestmentsListingModal={showInvestmentsListing}\r\n        hideInvestmentsListingModal={() => setShowInvestmentsListing(false)}\r\n        showInvestmentsDetailsModal={(investmentNumber: string) => {\r\n          setShowInvestmentsListing(false);\r\n          setshowInvestmentsDetails(true);\r\n          setReferenceId(investmentNumber);\r\n        }}\r\n      />\r\n      {investmentNumber && !!investmentNumber &&\r\n        <React.Fragment>\r\n          <InvestmentsDetails\r\n            showInvestmentsDetailsModal={showInvestmentsDetails}\r\n            hideInvestmentsDetailsModal={() => {\r\n              setshowInvestmentsDetails(false);\r\n              setShowInvestmentsBuyAndSell(true);\r\n            }}\r\n            backInvestmentsListingModal={() => {\r\n              setshowInvestmentsDetails(false);\r\n              setShowInvestmentsListing(true);\r\n            }}\r\n            showInvestmentsRecievedProfit={() => {\r\n              setshowInvestmentsDetails(false);\r\n              setShowInvestmentsRecievedProfit(true);\r\n            }}\r\n            showInvestmentsBuyAndSell={() => {\r\n              setshowInvestmentsDetails(false);\r\n              setShowInvestmentsBuyAndSell(true);\r\n            }}\r\n            investmentNumber={investmentNumber}\r\n          />\r\n          <InvestmentsRecievedProfit\r\n            showInvestmentsRecievedProfitModal={showInvestmentsRecievedProfit}\r\n            hideInvestmentsRecievedProfitModal={() => setShowInvestmentsRecievedProfit(false)}\r\n            backInvestmentsRecievedProfitModal={() => {\r\n              setShowInvestmentsRecievedProfit(false);\r\n              setshowInvestmentsDetails(true);\r\n            }}\r\n            investmentNumber={investmentNumber}\r\n          />\r\n          <InvestmentsBuyAndSell\r\n            showInvestmentsBuyAndSellModal={showInvestmentsBuyAndSell}\r\n            hideInvestmentsBuyAndSellModal={() => setShowInvestmentsBuyAndSell(false)}\r\n            backInvestmentsBuyAndSellModal={() => {\r\n              setShowInvestmentsBuyAndSell(false);\r\n              setshowInvestmentsDetails(true);\r\n            }}\r\n            investmentNumber={investmentNumber}\r\n          />\r\n        </React.Fragment>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Investments;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\Deposite.tsx",["730","731","732","733","734","735"],"import React, { useContext, useState } from \"react\";\r\n\r\nimport depositIcon from \"../../../images/deposit-icon.svg\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport DepositeListing from \"./DepositeListing\";\r\nimport DepositeDetails from \"./DepositeDetails\";\r\nimport DepositeRecievedProfit from \"./DepositeRecievedProfit\";\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\nimport { localStrings as local_Strings } from \"../../../translations/localStrings\";\r\nimport { emptyDeposit, IDeposit } from \"../../../Helpers/publicInterfaces\";\r\n\r\nfunction Deposite() {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  const [depositNumber, setReferenceId] = useState<string>(\"\");\r\n\r\n  const [showDepositeListing, setShowDepositeListing] = useState(false);\r\n  const [showDepositeDetails, setshowDepositeDetails] = useState(false);\r\n  const [showDepositeRecievedProfit, setShowDepositeRecievedProfit] = useState(false);\r\n\r\n  return (\r\n    <div className=\"col-lg-4\">\r\n      <div className=\"inner-box\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"ib-icon\">\r\n            <img src={depositIcon} className=\"img-fluid\" />\r\n          </div>\r\n          <a href=\"#\" className=\"ib-text\" onClick={() => setShowDepositeListing(true)}>\r\n            <h4>{local_Strings.PortfolioAssetsOption3}</h4>\r\n            <h5>\r\n              {(userPortfolio.totalDeposits || \"0\") +\r\n                \" \" +\r\n                currentContext.userSettings.currency}\r\n            </h5>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <DepositeListing\r\n        showDepositeListingModal={showDepositeListing}\r\n        hideDepositeListingModal={() => setShowDepositeListing(false)}\r\n        showDepositeDetailsModal={(depositNumber: string) => {\r\n          setShowDepositeListing(false);\r\n          setshowDepositeDetails(true);\r\n          setReferenceId(depositNumber);\r\n        }}\r\n      />\r\n      {depositNumber && !!depositNumber &&\r\n        <React.Fragment>\r\n          <DepositeDetails\r\n            showDepositeDetailsModal={showDepositeDetails}\r\n            hideDepositeDetailsModal={() => setshowDepositeDetails(false)}\r\n            backDepositeListingModal={() => {\r\n              setshowDepositeDetails(false);\r\n              setShowDepositeListing(true);\r\n            }}\r\n            showDepositeRecievedProfit={() => {\r\n              setshowDepositeDetails(false);\r\n              setShowDepositeRecievedProfit(true);\r\n            }}\r\n            depositNumber={depositNumber}\r\n          />\r\n          <DepositeRecievedProfit\r\n            showDepositeRecievedProfitModal={showDepositeRecievedProfit}\r\n            hideDepositeRecievedProfitModal={() => setShowDepositeRecievedProfit(false)}\r\n            backDepositeRecievedProfitModal={() => {\r\n              setShowDepositeRecievedProfit(false);\r\n              setshowDepositeDetails(true);\r\n            }}\r\n            depositNumber={depositNumber}\r\n          />\r\n        </React.Fragment>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Deposite;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterButtonControl.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterDropDownControl.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Guarantees\\GuaranteesDetails.tsx",["736","737","738","739","740","741","742","743","744"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\n\r\ninterface iGuaranteesDetails {\r\n  showGuaranteesDetailsModal: boolean;\r\n  hideGuaranteesDetailsModal: () => void;\r\n  backGuaranteesListingModal: () => void;\r\n}\r\nfunction GuaranteesDetails(guaranteesDetailsProps: iGuaranteesDetails) {\r\n  const [showClearFilter, setShowClearFilter] = useState(false);\r\n  const [openTransactionInfo, setOpenTransactionInfo] = useState(false);\r\n\r\n  const applyFilter = () => {\r\n    setShowClearFilter(true);\r\n  };\r\n\r\n  const clearFilter = () => {\r\n    setShowClearFilter(false);\r\n  };\r\n  const showMoreGuaranteesDetails = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n  const exportToExcel = (tableId: string, anchorId: string) => {\r\n    console.log(\"exported\");\r\n    var table = document.getElementById(tableId)!;\r\n    var html = table.outerHTML;\r\n    var url = \"data:application/vnd.ms-excel,\" + escape(html); // Set your html table into url\r\n    var anchor = document.getElementById(anchorId)!;\r\n    anchor.setAttribute(\"href\", url);\r\n    anchor.setAttribute(\"download\", \"qfb-statement.xls\"); // Choose the file name\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={guaranteesDetailsProps.showGuaranteesDetailsModal}\r\n      onHide={guaranteesDetailsProps.hideGuaranteesDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-2 col-sm-1 text-center\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={guaranteesDetailsProps.backGuaranteesListingModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Account No.</h5>\r\n              <h4>1223245672802900</h4>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Current Balance</h5>\r\n              <h4>3,150,000.00 QAR</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={guaranteesDetailsProps.hideGuaranteesDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form className=\"filter-box\">\r\n          <div className=\"row headRow align-items-center\">\r\n            <div className=\"col-sm-3\">\r\n              <label>Date</label>\r\n              <select className=\"form-control selectDateDD\" id=\"\">\r\n                <option value=\"0\">Select Date</option>\r\n                <option value=\"1\">Last Week</option>\r\n                <option value=\"2\">Last Month</option>\r\n                <option value=\"3\">Last 3 Months</option>\r\n                <option value=\"4\">Custom Date</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"col-sm-4\">\r\n              <label>Amount</label>\r\n              <select\r\n                className=\"form-control w-50\"\r\n                id=\"inlineFormCustomSelect2\"\r\n              >\r\n                <option>Equal to</option>\r\n                <option value=\"1\">More Than</option>\r\n                <option value=\"2\">Less than</option>\r\n              </select>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control w-50\"\r\n                placeholder=\"Amount\"\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-3\">\r\n              <label>Type</label>\r\n              <div className=\"form-row\">\r\n                <div className=\"custom-control custom-checkbox  custom-control-inline\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"radioType\"\r\n                    className=\"custom-control-input\"\r\n                    id=\"customCheck1\"\r\n                  />\r\n                  <label className=\"custom-control-label\">Debit</label>\r\n                </div>\r\n                <div className=\"custom-control custom-checkbox custom-control-inline\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"radioType\"\r\n                    className=\"custom-control-input\"\r\n                    id=\"customCheck2\"\r\n                  />\r\n                  <label className=\"custom-control-label\">Credit</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <label>\r\n                <button\r\n                  id=\"resetFilter\"\r\n                  type=\"reset\"\r\n                  className={\r\n                    showClearFilter\r\n                      ? \"resetBtn resetFilter\"\r\n                      : \"resetBtn resetFilter invisible\"\r\n                  }\r\n                  onClick={clearFilter}\r\n                >\r\n                  Clear Filter <i className=\"fa fa-close\"></i>\r\n                </button>\r\n              </label>\r\n              <button\r\n                id=\"applyFilter\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-sm btn-block applyFilter\"\r\n                onClick={applyFilter}\r\n              >\r\n                Apply\r\n              </button>\r\n            </div>\r\n            <div className=\"col-sm-9 py-3 customDate d-none\" id=\"\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-4\">\r\n                  <label>From</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                  <label>To</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        <div className=\"box table-box\">\r\n          <Accordion\r\n            as=\"table\"\r\n            className=\"table table-striped\"\r\n            id=\"internalActivities\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th colSpan={1}> Date </th>\r\n                <th colSpan={2}> Amount </th>\r\n                <th colSpan={3}> Description </th>\r\n                <th colSpan={2} className=\"text-right\">\r\n                  Balance\r\n                </th>\r\n                <th className=\"text-right\"> </th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"0\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n                <td colSpan={2} className=\"text-right\">\r\n                  1,150,000.00 QAR\r\n                </td>\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"0\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Transaction Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Payment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"1\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n                <td colSpan={2} className=\"text-right\">\r\n                  1,150,000.00 QAR\r\n                </td>\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"1\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Transaction Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Payment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"3\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n                <td colSpan={2} className=\"text-right\">\r\n                  1,150,000.00 QAR\r\n                </td>\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"3\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Transaction Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Payment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"4\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n                <td colSpan={2} className=\"text-right\">\r\n                  1,150,000.00 QAR\r\n                </td>\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"4\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Transaction Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Payment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"5\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n                <td colSpan={2} className=\"text-right\">\r\n                  1,150,000.00 QAR\r\n                </td>\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"5\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Transaction Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Payment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"6\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n                <td colSpan={2} className=\"text-right\">\r\n                  1,150,000.00 QAR\r\n                </td>\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"6\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Transaction Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Payment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Accordion>\r\n        </div>\r\n        <div className=\"actionScrollButtons\">\r\n          <a\r\n            id=\"seeMoreRecords\"\r\n            className=\"btn-block\"\r\n            onClick={showMoreGuaranteesDetails}\r\n          >\r\n            More <i className=\"fa fa-caret-down\"></i>\r\n          </a>\r\n          {/*  <!--<a id=\"seeLessRecords\">Less <i className=\"fa fa-caret-up\"></i></a>--> */}\r\n        </div>\r\n        <div className=\"exportExcel\">\r\n          <a\r\n            href=\"#\"\r\n            id=\"internalActivitiesdownloadLink\"\r\n            className=\"\"\r\n            onClick={() =>\r\n              exportToExcel(\r\n                \"internalActivities\",\r\n                \"internalActivitiesdownloadLink\"\r\n              )\r\n            }\r\n          >\r\n            <img src={excelIcon} className=\"img-fluid\" /> Export to Excel\r\n          </a>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default GuaranteesDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOfferRequest.tsx",["745","746","747","748","749","750","751","752"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\n\r\ninterface iAuthOfferRequest {\r\n  showAuthOfferRequestModal: boolean;\r\n  hideAuthOfferRequestModal: () => void;\r\n  backAuthOffersRequestModal: () => void;\r\n}\r\nfunction AuthOfferRequest(authOfferRequestProps: iAuthOfferRequest) {\r\n  const showMoreAuthOfferRequest = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={authOfferRequestProps.showAuthOfferRequestModal}\r\n      onHide={authOfferRequestProps.hideAuthOfferRequestModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={authOfferRequestProps.backAuthOffersRequestModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">Request To Subscribe</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={authOfferRequestProps.hideAuthOfferRequestModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n          <ul className=\"box-list mb-0\">\r\n            <li className=\"shown\">\r\n              <div className=\"row align-items-center py-2\">\r\n                <div className=\"col-md-12 \">\r\n                  <div className=\"text-xs color-grey\">\r\n                    Wednesday 22 Nov 2020\r\n                  </div>\r\n                  <h6 className=\"mb-1 text-600 text-18 \">\r\n                    Qatar First Bank aquires BSN sports’ HQ Building “Varsity\r\n                    Brands” located in Texas\r\n                  </h6>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"container-fluid\">\r\n            <div className=\"p-3 mb-5 row\">\r\n              <div className=\"col-lg-6 form-group\">\r\n                <label>Subscription Amount</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"2345678901234567\"\r\n                />\r\n              </div>\r\n              <div className=\"col-lg-6 form-group\">\r\n                <label>Select Currency</label>\r\n                <select className=\"form-control\">\r\n                  <option value=\"0\">QAR</option>\r\n                  <option value=\"1\">USD</option>\r\n                  <option value=\"2\">AED</option>\r\n                  <option value=\"3\">EGY</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"text-right p-3\">\r\n              <button id=\"applyReqBtn\" className=\"btn btn-primary\">\r\n                Request to subscribe\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default AuthOfferRequest;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Guarantees\\GuaranteesListing.tsx",["753","754","755","756","757","758"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport guaranteesIcon from \"../../../images/guaranties-icon.svg\";\r\nimport { emptyBankGuarantee, IBankGuarantee } from \"../../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport NoResult from \"../../../shared/NoResult\";\r\nimport { GetBankGuaranteeListing } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport FilterMoreButtonControl from '../../../shared/FilterMoreButtonControl';\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iGuaranteesListing {\r\n  showGuaranteesListingModal: boolean;\r\n  hideGuaranteesListingModal: () => void;\r\n  showGuaranteesDetailsModal: () => void;\r\n}\r\n\r\nfunction GuaranteesListing(props: iGuaranteesListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<IBankGuarantee[]>([emptyBankGuarantee]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetBankGuaranteeListing(currentContext.selectedCIF)\r\n        .then((responseData: IBankGuarantee[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            setData(responseData);\r\n            if (responseData.length < rowLimit) {\r\n              setOffset(responseData.length);\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  const renderItem = (item: IBankGuarantee, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={props.showGuaranteesDetailsModal}\r\n      >\r\n        <div className=\"col-2 col-sm-1\">\r\n          <span className=\"curr-icon\">{item.currency || currentContext.userSettings.currency}</span>\r\n        </div>\r\n        <div className=\"col-8 col-sm-4\">\r\n          <h5>{local_Strings.LoanNo}</h5>\r\n          <h4>{item.id || \"\"}</h4>\r\n        </div>\r\n        <div className=\"col-8 offset-2 offset-sm-0 col-sm-6\">\r\n          <h5>{local_Strings.CashDetailsBalanceLabel}</h5>\r\n          <h4>{(item.principalAmount || \"0\") + \" \" + item.currency}</h4>\r\n        </div>\r\n        <div className=\"col-2 col-sm-1 text-right\">\r\n          <i className=\"fa fa-chevron-right\"></i>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showGuaranteesListingModal}\r\n        onHide={props.hideGuaranteesListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <img src={guaranteesIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.BankGuarantee}</h4>\r\n              <h5>{(userPortfolio.totalGuarantees || \"0\") + \" \" + (currentContext.userSettings.currency || \"\")}</h5>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideGuaranteesListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"dataList\">\r\n              {data &&\r\n                data.length > 0 &&\r\n                !!data[0].id ?\r\n                data.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.NoDataToShow)}\r\n            </ul>\r\n          </div>\r\n          <FilterMoreButtonControl showMore={data && data.length > rowLimit &&\r\n            offset < data.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GuaranteesListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesHistoricalPayment.tsx",["759","760","761","762","763","764","765","766","767"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\n\r\ninterface iFacilitiesHistoricalPayment {\r\n  showFacilitiesHistoricalPaymentModal: boolean;\r\n  hideFacilitiesHistoricalPaymentModal: () => void;\r\n  backFacilitiesHistoricalPaymentModal: () => void;\r\n  facilityNumber: string;\r\n}\r\nfunction FacilitiesHistoricalPayment(\r\n  props: iFacilitiesHistoricalPayment\r\n) {\r\n  const [showClearFilter, setShowClearFilter] = useState(false);\r\n  const [openTransactionInfo, setOpenTransactionInfo] = useState(false);\r\n\r\n  const applyFilter = () => {\r\n    setShowClearFilter(true);\r\n  };\r\n\r\n  const clearFilter = () => {\r\n    setShowClearFilter(false);\r\n  };\r\n  const showMoreFacilitiesHistoricalPayment = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n  const exportToExcel = (tableId: string, anchorId: string) => {\r\n    console.log(\"exported\");\r\n    var table = document.getElementById(tableId)!;\r\n    var html = table.outerHTML;\r\n    var url = \"data:application/vnd.ms-excel,\" + escape(html); // Set your html table into url\r\n    var anchor = document.getElementById(anchorId)!;\r\n    anchor.setAttribute(\"href\", url);\r\n    anchor.setAttribute(\"download\", \"qfb-statement.xls\"); // Choose the file name\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={\r\n        props.showFacilitiesHistoricalPaymentModal\r\n      }\r\n      onHide={\r\n        props.hideFacilitiesHistoricalPaymentModal\r\n      }\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-2 col-sm-1 text-center\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={\r\n                  props.backFacilitiesHistoricalPaymentModal\r\n                }\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Investment Buy and Sell.</h5>\r\n              <h4>1223245672802900</h4>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Current Balance</h5>\r\n              <h4>3,150,000.00 QAR</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={\r\n            props.hideFacilitiesHistoricalPaymentModal\r\n          }\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form className=\"filter-box\">\r\n          <div className=\"row headRow align-items-center\">\r\n            <div className=\"col-sm-3\">\r\n              <label>Date</label>\r\n              <select className=\"form-control selectDateDD\" id=\"\">\r\n                <option value=\"0\">Select Date</option>\r\n                <option value=\"1\">Last Week</option>\r\n                <option value=\"2\">Last Month</option>\r\n                <option value=\"3\">Last 3 Months</option>\r\n                <option value=\"4\">Custom Date</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"col-sm-4\">\r\n              <label>Amount</label>\r\n              <select\r\n                className=\"form-control w-50\"\r\n                id=\"inlineFormCustomSelect2\"\r\n              >\r\n                <option>Equal to</option>\r\n                <option value=\"1\">More Than</option>\r\n                <option value=\"2\">Less than</option>\r\n              </select>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control w-50\"\r\n                placeholder=\"Amount\"\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-3\">\r\n              <label>Type</label>\r\n              <div className=\"form-row\">\r\n                <div className=\"custom-control custom-checkbox  custom-control-inline\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"radioType\"\r\n                    className=\"custom-control-input\"\r\n                    id=\"customCheck1\"\r\n                  />\r\n                  <label className=\"custom-control-label\">Buy</label>\r\n                </div>\r\n                <div className=\"custom-control custom-checkbox custom-control-inline\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"radioType\"\r\n                    className=\"custom-control-input\"\r\n                    id=\"customCheck2\"\r\n                  />\r\n                  <label className=\"custom-control-label\">Sell</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <label>\r\n                <button\r\n                  id=\"resetFilter\"\r\n                  type=\"reset\"\r\n                  className={\r\n                    showClearFilter\r\n                      ? \"resetBtn resetFilter\"\r\n                      : \"resetBtn resetFilter invisible\"\r\n                  }\r\n                  onClick={clearFilter}\r\n                >\r\n                  Clear Filter <i className=\"fa fa-close\"></i>\r\n                </button>\r\n              </label>\r\n              <button\r\n                id=\"applyFilter\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-sm btn-block applyFilter\"\r\n                onClick={applyFilter}\r\n              >\r\n                Apply\r\n              </button>\r\n            </div>\r\n            <div className=\"col-sm-9 py-3 customDate d-none\" id=\"\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-4\">\r\n                  <label>From</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                  <label>To</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        <div className=\"box table-box\">\r\n          <Accordion\r\n            as=\"table\"\r\n            className=\"table table-striped\"\r\n            id=\"FacilitiesHistoricalPayment\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th colSpan={1}> Date </th>\r\n                <th colSpan={2}> Amount </th>\r\n                <th colSpan={3}> Description </th>\r\n\r\n                <th className=\"text-right\"> </th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"0\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"0\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"1\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"1\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"3\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"3\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"4\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"4\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"5\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"5\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"6\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"6\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Accordion>\r\n        </div>\r\n        <div className=\"actionScrollButtons\">\r\n          <a\r\n            id=\"seeMoreRecords\"\r\n            className=\"btn-block\"\r\n            onClick={showMoreFacilitiesHistoricalPayment}\r\n          >\r\n            More <i className=\"fa fa-caret-down\"></i>\r\n          </a>\r\n          {/*  <!--<a id=\"seeLessRecords\">Less <i className=\"fa fa-caret-up\"></i></a>--> */}\r\n        </div>\r\n        <div className=\"exportExcel\">\r\n          <a\r\n            href=\"#\"\r\n            id=\"FacilitiesHistoricalPaymentdownloadLink\"\r\n            className=\"\"\r\n            onClick={() =>\r\n              exportToExcel(\r\n                \"FacilitiesHistoricalPayment\",\r\n                \"FacilitiesHistoricalPaymentdownloadLink\"\r\n              )\r\n            }\r\n          >\r\n            <img src={excelIcon} className=\"img-fluid\" /> Export to Excel\r\n          </a>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default FacilitiesHistoricalPayment;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesDetails.tsx",["768","769","770","771","772","773","774","775"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { emptyLoanDetail, ILoanDetail } from \"../../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { GetFacilityDetails } from \"../../../services/cmsService\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\n\r\ninterface iFacilitiesDetails {\r\n  showFacilitiesDetailsModal: boolean;\r\n  hideFacilitiesDetailsModal: () => void;\r\n  backFacilitiesListingModal: () => void;\r\n  showFacilitiesOutstandingPayment: () => void;\r\n  showFacilitiesHistoricalPayment: () => void;\r\n  facilityNumber: string;\r\n}\r\n\r\nfunction FacilitiesDetails(props: iFacilitiesDetails) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [item, setDetail] = useState<ILoanDetail>(emptyLoanDetail);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    setLoading(true);\r\n    GetFacilityDetails(currentContext.selectedCIF, props.facilityNumber)\r\n      .then((responseData: any) => {\r\n        if (responseData && responseData.length > 0 && isMounted) {\r\n          const _detail = helper.transformingStringToJSON(\r\n            responseData[0], currentContext.language\r\n          );\r\n          setDetail(_detail);\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e))\r\n      .finally(() => setLoading(false));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, []);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showFacilitiesDetailsModal}\r\n      onHide={props.hideFacilitiesDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"modal-header-text\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={props.backFacilitiesListingModal}\r\n              className=\"backToAccountsList\"\r\n            >\r\n              <i className=\"fa fa-chevron-left\"></i>\r\n            </a>\r\n          </div>\r\n          <div className=\"ib-text\">\r\n            <h4>Facilities</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideFacilitiesDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box\">\r\n          <ul className=\"box-list\" id=\"investmentModalDetails\">\r\n            <li className=\"pb-3 px-4\">\r\n              <div className=\"row align-items-center\">\r\n                <div className=\"col-sm-8\">\r\n                  <h3 className=\"text-capitalize\">Facility</h3>\r\n                  <h3 className=\"text-sm\">300,000,000</h3>\r\n                </div>\r\n                <div className=\"col-sm-4 text-sm-right\">\r\n                  <strong className=\"status-badge status-badge-lg color-black text-xs\">\r\n                    QAR\r\n                  </strong>\r\n                  <br />\r\n                  <strong className=\"status-badge status-badge-lg\">\r\n                    2.2 %\r\n                  </strong>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"px-4\">\r\n            <div className=\"formGrp\">\r\n              <label>Name</label>\r\n              <p>Lorem Ipsum Dolor Sit</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>Location</label>\r\n              <p>Lorem Ipsum Dolor Sit</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>Start Date</label>\r\n              <p>22/11/2020</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>Expected Profit Rate</label>\r\n              <p>100,000</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>Profit Distribution Term</label>\r\n              <p>100,000</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right px-4\">\r\n            <button\r\n              id=\"viewBuySellTransaction\"\r\n              className=\"text-capitalize btn btn-primary maxSizeBtn mx-1\"\r\n              onClick={props.showFacilitiesHistoricalPayment}\r\n            >\r\n              View Historical Payments\r\n            </button>\r\n            <a\r\n              id=\"viewReceivedTransaction\"\r\n              href=\"#\"\r\n              className=\"text-capitalize btn btn-primary maxSizeBtn mx-1\"\r\n              onClick={props.showFacilitiesOutstandingPayment}\r\n            >\r\n              View Outstanding Payments\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default FacilitiesDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesOutstandingPayment.tsx",["776","777","778","779","780","781","782","783","784"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\n\r\ninterface iFacilitiesOutstandingPayment {\r\n  showFacilitiesOutstandingPaymentModal: boolean;\r\n  hideFacilitiesOutstandingPaymentModal: () => void;\r\n  backFacilitiesOutstandingPaymentModal: () => void;\r\n  facilityNumber: string;\r\n}\r\n\r\nfunction FacilitiesOutstandingPayment(\r\n  props: iFacilitiesOutstandingPayment\r\n) {\r\n  const [showClearFilter, setShowClearFilter] = useState(false);\r\n  const [openTransactionInfo, setOpenTransactionInfo] = useState(false);\r\n\r\n  const applyFilter = () => {\r\n    setShowClearFilter(true);\r\n  };\r\n\r\n  const clearFilter = () => {\r\n    setShowClearFilter(false);\r\n  };\r\n  const showMoreFacilitiesOutstandingPayment = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n  const exportToExcel = (tableId: string, anchorId: string) => {\r\n    console.log(\"exported\");\r\n    var table = document.getElementById(tableId)!;\r\n    var html = table.outerHTML;\r\n    var url = \"data:application/vnd.ms-excel,\" + escape(html); // Set your html table into url\r\n    var anchor = document.getElementById(anchorId)!;\r\n    anchor.setAttribute(\"href\", url);\r\n    anchor.setAttribute(\"download\", \"qfb-statement.xls\"); // Choose the file name\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={\r\n        props.showFacilitiesOutstandingPaymentModal\r\n      }\r\n      onHide={\r\n        props.hideFacilitiesOutstandingPaymentModal\r\n      }\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-2 col-sm-1 text-center\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={\r\n                  props.backFacilitiesOutstandingPaymentModal\r\n                }\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Investment No.</h5>\r\n              <h4>1223245672802900</h4>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Current Balance</h5>\r\n              <h4>3,150,000.00 QAR</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={\r\n            props.hideFacilitiesOutstandingPaymentModal\r\n          }\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form className=\"filter-box\">\r\n          <div className=\"row headRow align-items-center\">\r\n            <div className=\"col-sm-3\">\r\n              <label>Date</label>\r\n              <select className=\"form-control selectDateDD\" id=\"\">\r\n                <option value=\"0\">Select Date</option>\r\n                <option value=\"1\">Last Week</option>\r\n                <option value=\"2\">Last Month</option>\r\n                <option value=\"3\">Last 3 Months</option>\r\n                <option value=\"4\">Custom Date</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"col-sm-4\">\r\n              <label>Amount</label>\r\n              <select\r\n                className=\"form-control w-50\"\r\n                id=\"inlineFormCustomSelect2\"\r\n              >\r\n                <option>Equal to</option>\r\n                <option value=\"1\">More Than</option>\r\n                <option value=\"2\">Less than</option>\r\n              </select>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control w-50\"\r\n                placeholder=\"Amount\"\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <label>\r\n                <button\r\n                  id=\"resetFilter\"\r\n                  type=\"reset\"\r\n                  className={\r\n                    showClearFilter\r\n                      ? \"resetBtn resetFilter\"\r\n                      : \"resetBtn resetFilter invisible\"\r\n                  }\r\n                  onClick={clearFilter}\r\n                >\r\n                  Clear Filter <i className=\"fa fa-close\"></i>\r\n                </button>\r\n              </label>\r\n              <button\r\n                id=\"applyFilter\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-sm btn-block applyFilter\"\r\n                onClick={applyFilter}\r\n              >\r\n                Apply\r\n              </button>\r\n            </div>\r\n            <div className=\"col-sm-9 py-3 customDate d-none\" id=\"\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-4\">\r\n                  <label>From</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                  <label>To</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        <div className=\"box table-box\">\r\n          <Accordion\r\n            as=\"table\"\r\n            className=\"table table-striped\"\r\n            id=\"FacilitiesOutstandingPayment\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th colSpan={1}> Date </th>\r\n                <th colSpan={2}> Amount </th>\r\n                <th colSpan={3}> Description </th>\r\n\r\n                <th className=\"text-right\"> </th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"0\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"0\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"1\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"1\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"3\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"3\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"4\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"4\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"5\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"5\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody>\r\n              <Accordion.Toggle as=\"tr\" eventKey=\"6\" className=\"clickRow\">\r\n                <td colSpan={1}> 05/11/2020 </td>\r\n                <td colSpan={2}> 10,000,000.00 QAR </td>\r\n                <td colSpan={3}> FW20310S1RYC - C.C AC NO 000005660930053 </td>\r\n\r\n                <td className=\"caretArrow\">\r\n                  <i className=\"fa fa-caret-right color-gray \"></i>\r\n                </td>\r\n              </Accordion.Toggle>\r\n\r\n              <tr>\r\n                <td colSpan={9} className=\"p-0\">\r\n                  <Accordion.Collapse eventKey=\"6\" className=\"collapseRow\">\r\n                    <div className=\"px-3 py-2\">\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Reference</div>\r\n                        <div className=\"color-gray\">FT12345</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Name</div>\r\n                        <div className=\"color-gray\">\r\n                          Ahmed Mohamed Ahmed Mohamed Ahmed\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Beneficiary Account</div>\r\n                        <div className=\"color-gray\">QAIBN12345678910</div>\r\n                      </div>\r\n                      <div className=\"item-row py-2\">\r\n                        <div className=\"color-black\">Investment Details</div>\r\n                        <div className=\"color-gray\">\r\n                          Purchase of property in London\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </Accordion.Collapse>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Accordion>\r\n        </div>\r\n        <div className=\"actionScrollButtons\">\r\n          <a\r\n            id=\"seeMoreRecords\"\r\n            className=\"btn-block\"\r\n            onClick={showMoreFacilitiesOutstandingPayment}\r\n          >\r\n            More <i className=\"fa fa-caret-down\"></i>\r\n          </a>\r\n          {/*  <!--<a id=\"seeLessRecords\">Less <i className=\"fa fa-caret-up\"></i></a>--> */}\r\n        </div>\r\n        <div className=\"exportExcel\">\r\n          <a\r\n            href=\"#\"\r\n            id=\"FacilitiesOutstandingPaymentdownloadLink\"\r\n            className=\"\"\r\n            onClick={() =>\r\n              exportToExcel(\r\n                \"FacilitiesOutstandingPayment\",\r\n                \"FacilitiesOutstandingPaymentdownloadLink\"\r\n              )\r\n            }\r\n          >\r\n            <img src={excelIcon} className=\"img-fluid\" /> Export to Excel\r\n          </a>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default FacilitiesOutstandingPayment;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\liabilities\\Facilities\\FacilitiesListing.tsx",["785","786","787","788","789","790"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport facilitiesIcon from \"../../../images/facilities-icon.svg\";\r\nimport { emptyLoanItem, ILoanItem } from \"../../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport NoResult from \"../../../shared/NoResult\";\r\nimport { GetFacilitiesListing } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport FilterMoreButtonControl from '../../../shared/FilterMoreButtonControl';\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iFacilitiesListing {\r\n  showFacilitiesListingModal: boolean;\r\n  hideFacilitiesListingModal: () => void;\r\n  showFacilitiesDetailsModal: (facilityNumber: string) => void;\r\n}\r\n\r\nfunction FacilitiesListing(props: iFacilitiesListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<ILoanItem[]>([emptyLoanItem]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetFacilitiesListing(currentContext.selectedCIF)\r\n        .then((responseData: ILoanItem[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            setData(responseData);\r\n            if (responseData.length < rowLimit) {\r\n              setOffset(responseData.length);\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  const renderItem = (item: ILoanItem, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showFacilitiesDetailsModal(item.ldReference)}\r\n      >\r\n        <div className=\"col-6 col-sm-4\">\r\n          <h5>{local_Strings.LoanNo}</h5>\r\n          <h4>{item.ldReference || \"\"}</h4>\r\n        </div>\r\n        <div className=\"col-6 col-sm-4\">\r\n          <h5>{local_Strings.CashDetailsBalanceLabel}</h5>\r\n          <h4>{(item.productBalance || \"0\") + \" \" + item.currency}</h4>\r\n        </div>\r\n        <div className=\"col-10 col-sm-3\">\r\n          <h5>{local_Strings.percentageLabel}</h5>\r\n          <h4>{(item.profitRate || \"\") + \"%\"}</h4>\r\n        </div>\r\n        <div className=\"col-2 col-sm-1 caretArrow\">\r\n          <i className=\"fa fa-chevron-right\"></i>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showFacilitiesListingModal}\r\n        onHide={props.hideFacilitiesListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <img src={facilitiesIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.Loan}</h4>\r\n              <h5>{(userPortfolio.totalLoans || \"0\") + \" \" + (currentContext.userSettings.currency || \"\")}</h5>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideFacilitiesListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"dataList\">\r\n              {data &&\r\n                data.length > 0 &&\r\n                !!data[0].ldReference ?\r\n                data.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.NoDataToShow)}\r\n            </ul>\r\n          </div>\r\n          <FilterMoreButtonControl showMore={data && data.length > rowLimit &&\r\n            offset < data.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FacilitiesListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOffersListing.tsx",["791","792","793","794"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport offerIcon from \"../../images/offer-icon-color.svg\";\r\nimport { emptyOfferData, IOfferDetail } from \"../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport NoResult from \"../../shared/NoResult\";\r\nimport { GetOfferAll } from \"../../services/cmsService\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport FilterMoreButtonControl from '../../shared/FilterMoreButtonControl';\r\n\r\ninterface iAuthOffersListing {\r\n  showAuthOffersListingModal: boolean;\r\n  hideAuthOffersListingModal: () => void;\r\n  showAuthOffersDetailsModal: (itemID: number) => void;\r\n}\r\n\r\nfunction AuthOffersListing(props: iAuthOffersListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(true);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<IOfferDetail[]>([emptyOfferData]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    GetOfferAll()\r\n      .then((responseData: IOfferDetail[]) => {\r\n        if (isMounted && responseData && responseData.length > 0) {\r\n          const _data = responseData.filter((d) => new Date(d.expireDate) > new Date());\r\n          setData(_data);\r\n          if (_data.length < rowLimit) {\r\n            setOffset(_data.length);\r\n          }\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e))\r\n      .finally(() => setLoading(false));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, []);\r\n\r\n  const renderItem = (item: IOfferDetail, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showAuthOffersDetailsModal(item.id)}\r\n      >\r\n        <div className=\"col-12 col-sm-12\">\r\n          <div className=\"text-15\">{moment(item.createdDate).format(\"DD MMM YYYY\")}</div>\r\n          <h6 className=\"mb-1 text-600\">\r\n            {currentContext.language === \"en\" ? item.title || \"\" : item.titleAr || \"\"}\r\n          </h6>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showAuthOffersListingModal}\r\n        onHide={props.hideAuthOffersListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon bg-icon\">\r\n              <img src={offerIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.OffersListingTitle}</h4>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideAuthOffersListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n            <ul className=\"box-list\" id=\"dataList\">\r\n              {data &&\r\n                data.length > 0 &&\r\n                data[0].id > 0 ?\r\n                data.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.NoDataToShow)}\r\n            </ul>\r\n          </div>\r\n\r\n          <FilterMoreButtonControl showMore={data && data.length > rowLimit &&\r\n            offset < data.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AuthOffersListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\DepositeRecievedProfit.tsx",["795","796","797","798"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\nimport FilterCommonControl from '../../../shared/FilterCommonControl';\r\nimport TransactionListing from '../../../shared/TransactionListing';\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { emptyTransaction, ICommonFilter, ITransaction } from \"../../../Helpers/publicInterfaces\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport { GetDepositsReceivedProfit } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport ReactExport from \"react-export-excel\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iDepositeRecievedProfit {\r\n  showDepositeRecievedProfitModal: boolean;\r\n  hideDepositeRecievedProfitModal: () => void;\r\n  backDepositeRecievedProfitModal: () => void;\r\n  depositNumber: string;\r\n}\r\n\r\nfunction DepositeRecievedProfit(\r\n  props: iDepositeRecievedProfit\r\n) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [data, setData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const [filteredData, setFilteredData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const ExcelFile = ReactExport.ExcelFile;\r\n  const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n  const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetDepositsReceivedProfit(currentContext.selectedCIF, props.depositNumber)\r\n        .then((responseData: ITransaction[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            const _data = responseData.filter(\r\n              (d) => new Date(d.bookingDate) > moment().add(-3, \"months\").toDate()\r\n            )\r\n            setData(responseData);\r\n            setFilteredData(_data);\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showDepositeRecievedProfitModal}\r\n      onHide={props.hideDepositeRecievedProfitModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-2 col-sm-1 text-center\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={\r\n                  props.backDepositeRecievedProfitModal\r\n                }\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>{local_Strings.DepositeListingAccountNumberLabel}</h5>\r\n              <h4>{props.depositNumber}</h4>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>{local_Strings.CurrentBalanceLabel}</h5>\r\n              <h4>{userPortfolio.totalDeposits || \"\"}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideDepositeRecievedProfitModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {data && data.length > 0 && !!data[0].bookingDate &&\r\n          <FilterCommonControl\r\n\r\n            clearFilter={() => {\r\n              setFilteredData(data);\r\n            }}\r\n\r\n            applyFilter={(filters: ICommonFilter) => {\r\n              console.log(filters);\r\n              const _filteredData = helper.filterTransactions(\r\n                data,\r\n                filters\r\n              );\r\n              setFilteredData(_filteredData);\r\n            }} />\r\n        }\r\n\r\n        <TransactionListing transactions={filteredData} showBalanceField={false} />\r\n\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={\r\n            <PuffLoader\r\n              size={Constant.SpnnerSize}\r\n              color={Constant.SpinnerColor}\r\n            />\r\n          }\r\n        />\r\n        {filteredData && filteredData.length > 0 && !!filteredData[0].accountNo &&\r\n          <div className=\"exportExcel\">\r\n            <ExcelFile filename={local_Strings.ViewReceivedProfit}\r\n              element={<a href=\"#\"><img src={excelIcon} className=\"img-fluid\" />\r\n                {local_Strings.exportToExcel}</a>}>\r\n              <ExcelSheet data={filteredData} name={local_Strings.ViewReceivedProfit}>\r\n                <ExcelColumn label={local_Strings.AccountNo} value=\"accountNo\" />\r\n                <ExcelColumn label={local_Strings.RequestListingFilterDate} value=\"bookingDate\" />\r\n                <ExcelColumn label={local_Strings.Amount} value=\"amount\" />\r\n                <ExcelColumn label={local_Strings.Description} value={\"trxDescirption\"} />\r\n              </ExcelSheet>\r\n            </ExcelFile>\r\n          </div>}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default DepositeRecievedProfit;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\DepositeListing.tsx",["799","800","801","802","803","804"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport depositeIcon from \"../../../images/deposit-icon.svg\";\r\nimport { emptyDeposit, IDeposit } from \"../../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport NoResult from \"../../../shared/NoResult\";\r\nimport { GetDepositeListing } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport FilterMoreButtonControl from '../../../shared/FilterMoreButtonControl';\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iDepositeListing {\r\n  showDepositeListingModal: boolean;\r\n  hideDepositeListingModal: () => void;\r\n  showDepositeDetailsModal: (depositNumber: string) => void;\r\n}\r\n\r\nfunction DepositeListing(props: iDepositeListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<IDeposit[]>([emptyDeposit]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetDepositeListing(currentContext.selectedCIF)\r\n        .then((responseData: IDeposit[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            setData(responseData);\r\n            if (responseData.length < rowLimit) {\r\n              setOffset(responseData.length);\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  const renderItem = (item: IDeposit, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showDepositeDetailsModal(item.contractNumber)}\r\n      >\r\n        <div className=\"col-6 col-sm-4\">\r\n          <h5>{local_Strings.DepositNo}</h5>\r\n          <h4>{item.contractNumber || \"\"}</h4>\r\n        </div>\r\n        <div className=\"col-6 col-sm-4\">\r\n          <h5>{local_Strings.CashDetailsBalanceLabel}</h5>\r\n          <h4>{item.depositAmount || \"\"}{item.currency || \"\"}</h4>\r\n        </div>\r\n        <div className=\"col-10 col-sm-3\">\r\n          <h5>{local_Strings.percentageLabel}</h5>\r\n          <h4>{(item.interestRate || \"\") + \"%\"}</h4>\r\n        </div>\r\n        <div className=\"col-2 col-sm-1 caretArrow\">\r\n          <i className=\"fa fa-chevron-right\"></i>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showDepositeListingModal}\r\n        onHide={props.hideDepositeListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <img src={depositeIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.DepositeListingCash}</h4>\r\n              <h5>{(userPortfolio.totalDeposits || \"0\") + \" \" + (currentContext.userSettings.currency || \"\")}</h5>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideDepositeListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"dataList\">\r\n              {data &&\r\n                data.length > 0 &&\r\n                !!data[0].contractNumber ?\r\n                data.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.DepositListing_NoData)}\r\n            </ul>\r\n          </div>\r\n          <FilterMoreButtonControl showMore={data && data.length > rowLimit &&\r\n            offset < data.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DepositeListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\deposite\\DepositeDetails.tsx",["805","806","807","808","809"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { emptyDepositDetail, IDepositDetail } from \"../../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { GetDepositsDetails } from \"../../../services/cmsService\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\n\r\ninterface iDepositeDetails {\r\n  showDepositeDetailsModal: boolean;\r\n  hideDepositeDetailsModal: () => void;\r\n  backDepositeListingModal: () => void;\r\n  showDepositeRecievedProfit: () => void;\r\n  depositNumber: string;\r\n}\r\n\r\nfunction DepositeDetails(props: iDepositeDetails) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [item, setDetail] = useState<IDepositDetail>(emptyDepositDetail);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    setLoading(true);\r\n    GetDepositsDetails(currentContext.selectedCIF, props.depositNumber)\r\n      .then((responseData: any) => {\r\n        if (responseData && responseData.length > 0 && isMounted) {\r\n          const _detail = helper.transformingStringToJSON(\r\n            responseData[0], currentContext.language\r\n          );\r\n          setDetail(_detail);\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e))\r\n      .finally(() => setLoading(false));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, []);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showDepositeDetailsModal}\r\n      onHide={props.hideDepositeDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"modal-header-text\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={props.backDepositeListingModal}\r\n              className=\"backToAccountsList\"\r\n            >\r\n              <i className=\"fa fa-chevron-left\"></i>\r\n            </a>\r\n          </div>\r\n          <div className=\"ib-text\">\r\n            <h4>{local_Strings.DepositDetail}</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideDepositeDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box\">\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n          <ul className=\"box-list\" id=\"investmentModalDetails\">\r\n            <li className=\"pb-3 px-4\">\r\n              <div className=\"row align-items-center\">\r\n                <div className=\"col-sm-8\">\r\n                  <h3 className=\"text-capitalize\">{local_Strings.DepositeListingAccountNumberLabel + props.depositNumber}</h3>\r\n                  <h3 className=\"text-sm\">{item.DepositAmount.value || \"\"}</h3>\r\n                </div>\r\n                <div className=\"col-sm-4 text-sm-right\">\r\n                  <strong className=\"status-badge status-badge-lg color-black text-xs\">\r\n                    {item.Currency.value || \"\"}\r\n                  </strong>\r\n                  <br />\r\n                  <strong className=\"status-badge status-badge-lg\">\r\n                    {item.ExpectedProfitRate.value || \"\"}\r\n                  </strong>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"px-4\">\r\n            <div className=\"formGrp\">\r\n              <label>{item.StartDate.label}</label>\r\n              <p>{item.StartDate.value || \"\"}</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>{item.MaturityDate.label}</label>\r\n              <p>{item.MaturityDate.value || \"\"}</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>{item.ExpectedProfitRate.label}</label>\r\n              <p>{item.ExpectedProfitRate.value || \"\"}</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>{item.ProfitDistributionFrequency.label}</label>\r\n              <p>{item.ProfitDistributionFrequency.value || \"\"}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right px-4\">\r\n            <a\r\n              id=\"viewReceivedTransaction\"\r\n              href=\"#\"\r\n              className=\"text-capitalize btn btn-primary maxSizeBtn mx-1\"\r\n              onClick={props.showDepositeRecievedProfit}\r\n            >\r\n              {local_Strings.ViewReceivedProfit}\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default DepositeDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsBuyAndSell.tsx",["810","811","812","813","814"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\nimport FilterCommonControl2 from '../../../shared/FilterCommonControl2';\r\nimport TransactionListing from '../../../shared/TransactionListing';\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { emptyTransaction, ICommonFilter, ITransaction } from \"../../../Helpers/publicInterfaces\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport { GetBuyAndSellTransactions } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport ReactExport from \"react-export-excel\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iInvestmentsBuyAndSell {\r\n  showInvestmentsBuyAndSellModal: boolean;\r\n  hideInvestmentsBuyAndSellModal: () => void;\r\n  backInvestmentsBuyAndSellModal: () => void;\r\n  investmentNumber: string;\r\n}\r\n\r\nfunction InvestmentsBuyAndSell(\r\n  props: iInvestmentsBuyAndSell\r\n) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [data, setData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const [filteredData, setFilteredData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const ExcelFile = ReactExport.ExcelFile;\r\n  const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n  const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetBuyAndSellTransactions(currentContext.selectedCIF, props.investmentNumber)\r\n        .then((responseData: ITransaction[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            const _data = responseData.filter(\r\n              (d) => new Date(d.bookingDate) > moment().add(-3, \"months\").toDate()\r\n            )\r\n            setData(responseData);\r\n            setFilteredData(_data);\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showInvestmentsBuyAndSellModal}\r\n      onHide={props.hideInvestmentsBuyAndSellModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-2 col-sm-1 text-center\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={\r\n                  props.backInvestmentsBuyAndSellModal\r\n                }\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Investment Buy and Sell.</h5>\r\n              <h4>1223245672802900</h4>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Current Balance</h5>\r\n              <h4>3,150,000.00 QAR</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideInvestmentsBuyAndSellModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {data && data.length > 0 && !!data[0].bookingDate &&\r\n          <FilterCommonControl2\r\n            CheckBoxTitle={local_Strings.RequestListingFilterStatus}\r\n            CheckBoxLabels={[\r\n              local_Strings.BuyAndSellTransactions_Status_Buy,\r\n              local_Strings.BuyAndSellTransactions_Status_Sell,\r\n            ]}\r\n            clearFilter={() => {\r\n              setFilteredData(data);\r\n            }}\r\n\r\n            applyFilter={(filters: ICommonFilter) => {\r\n              console.log(filters);\r\n              const _filteredData = helper.filterTransactions(\r\n                data,\r\n                filters\r\n              );\r\n              setFilteredData(_filteredData);\r\n            }} />\r\n        }\r\n\r\n        <TransactionListing transactions={filteredData} showBalanceField={false} />\r\n\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={\r\n            <PuffLoader\r\n              size={Constant.SpnnerSize}\r\n              color={Constant.SpinnerColor}\r\n            />\r\n          }\r\n        />\r\n        {filteredData && filteredData.length > 0 && !!filteredData[0].accountNo &&\r\n          <div className=\"exportExcel\">\r\n            <ExcelFile filename={local_Strings.ViewBuySellTransactions}\r\n              element={<a href=\"#\"><img src={excelIcon} className=\"img-fluid\" />\r\n                {local_Strings.exportToExcel}</a>}>\r\n              <ExcelSheet data={filteredData} name={local_Strings.ViewBuySellTransactions}>\r\n                <ExcelColumn label={local_Strings.AccountNo} value=\"accountNo\" />\r\n                <ExcelColumn label={local_Strings.RequestListingFilterDate} value=\"bookingDate\" />\r\n                <ExcelColumn label={local_Strings.Amount} value=\"amount\" />\r\n                <ExcelColumn label={local_Strings.RequestTypeLabel} value={\"transactionType\"} />\r\n              </ExcelSheet>\r\n            </ExcelFile>\r\n          </div>}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default InvestmentsBuyAndSell;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsRecievedProfit.tsx",["815","816","817","818","819"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\nimport FilterCommonControl from '../../../shared/FilterCommonControl';\r\nimport TransactionListing from '../../../shared/TransactionListing';\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { emptyTransaction, ICommonFilter, ITransaction } from \"../../../Helpers/publicInterfaces\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport { GetInvestmentsReceivedProfit } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport ReactExport from \"react-export-excel\";\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iInvestmentsRecievedProfit {\r\n  showInvestmentsRecievedProfitModal: boolean;\r\n  hideInvestmentsRecievedProfitModal: () => void;\r\n  backInvestmentsRecievedProfitModal: () => void;\r\n  investmentNumber: string;\r\n}\r\nfunction InvestmentsRecievedProfit(\r\n  props: iInvestmentsRecievedProfit\r\n) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [data, setData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const [filteredData, setFilteredData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const ExcelFile = ReactExport.ExcelFile;\r\n  const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n  const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetInvestmentsReceivedProfit(currentContext.selectedCIF, props.investmentNumber)\r\n        .then((responseData: ITransaction[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            const _data = responseData.filter(\r\n              (d) => new Date(d.bookingDate) > moment().add(-3, \"months\").toDate()\r\n            )\r\n            setData(responseData);\r\n            setFilteredData(_data);\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showInvestmentsRecievedProfitModal}\r\n      onHide={props.hideInvestmentsRecievedProfitModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-2 col-sm-1 text-center\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={\r\n                  props.backInvestmentsRecievedProfitModal\r\n                }\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Investment No.</h5>\r\n              <h4>1223245672802900</h4>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>Current Balance</h5>\r\n              <h4>3,150,000.00 QAR</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={\r\n            props.hideInvestmentsRecievedProfitModal\r\n          }\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {data && data.length > 0 && !!data[0].bookingDate &&\r\n          <FilterCommonControl\r\n\r\n            clearFilter={() => {\r\n              setFilteredData(data);\r\n            }}\r\n\r\n            applyFilter={(filters: ICommonFilter) => {\r\n              console.log(filters);\r\n              const _filteredData = helper.filterTransactions(\r\n                data,\r\n                filters\r\n              );\r\n              setFilteredData(_filteredData);\r\n            }} />\r\n        }\r\n\r\n        <TransactionListing transactions={filteredData} showBalanceField={false} />\r\n\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={\r\n            <PuffLoader\r\n              size={Constant.SpnnerSize}\r\n              color={Constant.SpinnerColor}\r\n            />\r\n          }\r\n        />\r\n        {filteredData && filteredData.length > 0 && !!filteredData[0].accountNo &&\r\n          <div className=\"exportExcel\">\r\n            <ExcelFile filename={local_Strings.ViewReceivedProfitTransactions}\r\n              element={<a href=\"#\"><img src={excelIcon} className=\"img-fluid\" />\r\n                {local_Strings.exportToExcel}</a>}>\r\n              <ExcelSheet data={filteredData} name={local_Strings.ViewReceivedProfitTransactions}>\r\n                <ExcelColumn label={local_Strings.AccountNo} value=\"accountNo\" />\r\n                <ExcelColumn label={local_Strings.RequestListingFilterDate} value=\"bookingDate\" />\r\n                <ExcelColumn label={local_Strings.Amount} value=\"amount\" />\r\n                <ExcelColumn label={local_Strings.Description} value={\"descirption\"} />\r\n              </ExcelSheet>\r\n            </ExcelFile>\r\n          </div>}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default InvestmentsRecievedProfit;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsListing.tsx",["820","821","822","823","824","825"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport investmentsIcon from \"../../../images/invest-icon.svg\";\r\nimport { emptyInvestment, IInvestment } from \"../../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport NoResult from \"../../../shared/NoResult\";\r\nimport { GetInvestmentsListing } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport FilterMoreButtonControl from '../../../shared/FilterMoreButtonControl';\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iInvestmentsListing {\r\n  showInvestmentsListingModal: boolean;\r\n  hideInvestmentsListingModal: () => void;\r\n  showInvestmentsDetailsModal: (investmentNumber: string) => void;\r\n}\r\nfunction InvestmentsListing(props: iInvestmentsListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<IInvestment[]>([emptyInvestment]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetInvestmentsListing(currentContext.selectedCIF)\r\n        .then((responseData: IInvestment[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            setData(responseData);\r\n            if (responseData.length < rowLimit) {\r\n              setOffset(responseData.length);\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n  \r\n  const renderItem = (item: IInvestment, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showInvestmentsDetailsModal(item.subAssetID)}\r\n      >\r\n        <div className=\"col-6 col-sm-4\">\r\n          <h5>{local_Strings.InvestmentNo}</h5>\r\n          <h4>{item.subAssetID || \"\"}</h4>\r\n        </div>\r\n        <div className=\"col-6 col-sm-4\">\r\n          <h5>{local_Strings.CashDetailsBalanceLabel}</h5>\r\n          <h4>{(item.nominalAmount || \"0\") + \" \" + item.securityCCY}</h4>\r\n        </div>\r\n        <div className=\"col-10 col-sm-3\">\r\n          <h5>{local_Strings.percentageLabel}</h5>\r\n          <h4>{(item.profitRate || \"\")}</h4>\r\n        </div>\r\n        <div className=\"col-2 col-sm-1 caretArrow\">\r\n          <i className=\"fa fa-chevron-right\"></i>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showInvestmentsListingModal}\r\n        onHide={props.hideInvestmentsListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <img src={investmentsIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.InvestmentsListingCash}</h4>\r\n              <h5>{(userPortfolio.totalInvestment || \"0\") + \" \" + (currentContext.userSettings.currency || \"\")}</h5>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideInvestmentsListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"dataList\">\r\n              {data &&\r\n                data.length > 0 &&\r\n                !!data[0].subAssetID ?\r\n                data.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.InvestmentListing_NoData)}\r\n            </ul>\r\n          </div>\r\n          <FilterMoreButtonControl showMore={data && data.length > rowLimit &&\r\n            offset < data.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InvestmentsListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\investments\\InvestmentsDetails.tsx",["826","827","828","829"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { emptyInvestmentDetail, IInvestmentDetail } from \"../../../Helpers/publicInterfaces\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { GetInvestmentsDetails } from \"../../../services/cmsService\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\n\r\ninterface iInvestmentsDetails {\r\n  showInvestmentsDetailsModal: boolean;\r\n  hideInvestmentsDetailsModal: () => void;\r\n  backInvestmentsListingModal: () => void;\r\n  showInvestmentsRecievedProfit: () => void;\r\n  showInvestmentsBuyAndSell: () => void;\r\n  investmentNumber: string;\r\n}\r\n\r\nfunction InvestmentsDetails(props: iInvestmentsDetails) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [item, setDetail] = useState<IInvestmentDetail>(emptyInvestmentDetail);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    setLoading(true);\r\n    GetInvestmentsDetails(currentContext.selectedCIF, props.investmentNumber)\r\n      .then((responseData: any) => {\r\n        if (responseData && responseData.length > 0 && isMounted) {\r\n          const _detail = helper.transformingStringToJSON(\r\n            responseData[0], currentContext.language\r\n          );\r\n          setDetail(_detail);\r\n        }\r\n      })\r\n      .catch((e: any) => console.log(e))\r\n      .finally(() => setLoading(false));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, []);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showInvestmentsDetailsModal}\r\n      onHide={props.hideInvestmentsDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"modal-header-text\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={props.backInvestmentsListingModal}\r\n              className=\"backToAccountsList\"\r\n            >\r\n              <i className=\"fa fa-chevron-left\"></i>\r\n            </a>\r\n          </div>\r\n          <div className=\"ib-text\">\r\n            <h4>{local_Strings.InvestmentDetail}</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideInvestmentsDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box\">\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n          <ul className=\"box-list\" id=\"investmentModalDetails\">\r\n            <li className=\"pb-3 px-4\">\r\n              <div className=\"row align-items-center\">\r\n                <div className=\"col-sm-8\">\r\n                  <h3 className=\"text-capitalize\">{local_Strings.InvestmentsListingAccountNumberLabel + props.investmentNumber}</h3>\r\n                  <h3 className=\"text-sm\">{item.InvestmentAmount.value || \"\"}</h3>\r\n                </div>\r\n                <div className=\"col-sm-4 text-sm-right\">\r\n                  <strong className=\"status-badge status-badge-lg color-black text-xs\">\r\n                    {item.Currency.value || \"\"}\r\n                  </strong>\r\n                  <br />\r\n                  <strong className=\"status-badge status-badge-lg\">\r\n                    {item.ExpectedProfitRate.value || \"\"}\r\n                  </strong>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"px-4\">\r\n            <div className=\"formGrp\">\r\n              <label>{item.InvestmentName.label}</label>\r\n              <p>{item.InvestmentName.value || \"\"}</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>{item.Location.label}</label>\r\n              <p>{item.Location.value || \"\"}</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>{item.StartDate.label}</label>\r\n              <p>{item.StartDate.value || \"\"}</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>{item.ExpectedProfitRate.label}</label>\r\n              <p>{item.ExpectedProfitRate.value || \"\"}</p>\r\n            </div>\r\n            <div className=\"formGrp\">\r\n              <label>{item.ProfitDistributionFrequency.label}</label>\r\n              <p>{item.ProfitDistributionFrequency.value || \"\"}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right px-4\">\r\n            <button\r\n              id=\"viewBuySellTransaction\"\r\n              className=\"text-capitalize btn btn-primary maxSizeBtn mx-1\"\r\n              onClick={props.showInvestmentsBuyAndSell}\r\n            >\r\n              {local_Strings.ViewBuySellTransactions}\r\n            </button>\r\n            <a\r\n              id=\"viewReceivedTransaction\"\r\n              href=\"#\"\r\n              className=\"text-capitalize btn btn-primary maxSizeBtn mx-1\"\r\n              onClick={props.showInvestmentsRecievedProfit}\r\n            >\r\n              {local_Strings.ViewReceivedProfitTransactions}\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default InvestmentsDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterCommonControl.tsx",["830"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { localStrings as local_Strings } from '../translations/localStrings';\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\nimport FilterDateControl from './FilterDateControl';\r\nimport FilterCustomDateControl from './FilterCustomDateControl';\r\nimport FilterAmountControl from './FilterAmountControl';\r\nimport FilterButtonControl from './FilterButtonControl';\r\nimport { emptyCommonFilter, ICommonFilter } from \"../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\n\r\ninterface IFilterCommonControlProps {\r\n    applyFilter: (filters: ICommonFilter) => void;\r\n    clearFilter: () => void;\r\n}\r\n\r\nconst FilterCommonControl: React.FC<IFilterCommonControlProps> = (props) => {\r\n\r\n    const auth = useContext(AuthContext);\r\n    local_Strings.setLanguage(auth.language);\r\n    const [filters, setFilter] = useState<ICommonFilter>(emptyCommonFilter);\r\n\r\n    return (\r\n        <form className=\"filter-box\">\r\n            <div className=\"row headRow align-items-center\">\r\n                <div className=\"col-sm-3\">\r\n                    <FilterDateControl value={filters.DateOption}\r\n                        onChange={(_value: string) => setFilter({ ...filters, DateOption: _value })} />\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                    <FilterAmountControl AmountOperator={filters.AmountOperator} Amount={filters.Amount}\r\n                        onChangeOperator={(_value: string) => setFilter({ ...filters, AmountOperator: _value })}\r\n                        onChangeAmount={(_value: string) => setFilter({ ...filters, Amount: _value })} />\r\n                </div>\r\n\r\n                <div className=\"col-sm-3 offset-sm-2\">\r\n                    <FilterButtonControl\r\n                        clearFilter={() => {\r\n                            setFilter(emptyCommonFilter);\r\n                            props.clearFilter();\r\n                        }}\r\n                        applyFilter={() => {\r\n                            setFilter({ ...filters, filterApplied: true });\r\n                            props.applyFilter({ ...filters, filterApplied: true });\r\n                        }}\r\n                        showClearFilter={filters.filterApplied} />\r\n                </div>\r\n                <FilterCustomDateControl\r\n                    onStartDateChange={(_value: string) => setFilter({ ...filters, StartDate: moment(_value).toDate() })}\r\n                    onEndDateChange={(_value: string) => setFilter({ ...filters, EndDate: moment(_value).toDate() })}\r\n                    StartDate={filters.StartDate}\r\n                    EndDate={filters.EndDate}\r\n                    showCustomDateFilter={filters.DateOption === \"4\"} />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FilterCommonControl;","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\TransactionListing.tsx",["831","832","833","834"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Accordion, Collapse } from \"react-bootstrap\";\r\nimport { localStrings as local_Strings } from '../translations/localStrings';\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\nimport { emptyTransaction, ITransaction, ITransactionAccordianDetail } from \"../Helpers/publicInterfaces\";\r\nimport Constant from \"../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport FilterMoreButtonControl from '../shared/FilterMoreButtonControl';\r\nimport NoResult from \"../shared/NoResult\";\r\nimport moment from \"moment\";\r\nimport * as helper from \"../Helpers/helper\";\r\n\r\ninterface ITransactionListingProps {\r\n    transactions: ITransaction[];\r\n    showBalanceField?: boolean;\r\n}\r\n\r\nconst TransactionListing: React.FC<ITransactionListingProps> = (props) => {\r\n\r\n    const currentContext = useContext(AuthContext);\r\n    local_Strings.setLanguage(currentContext.language);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const rowLimit: number = Constant.RecordPerPage;\r\n    const [offset, setOffset] = useState<number>(rowLimit);\r\n    const [isCollapsible, setCollapsible] = useState(false);\r\n    const filteredData = props.transactions;\r\n    // useEffect(() => {\r\n\r\n    //     setFilteredData(props.transactions);\r\n    //     if (props.transactions.length < rowLimit) {\r\n    //         setOffset(props.transactions.length);\r\n    //     }\r\n\r\n    // }, [props.transactions, offset]);\r\n\r\n    const renderItem = (item: ITransaction, index: string) => {\r\n        const transactionsDetails =\r\n            ((item.transactionsDetails && !!item.transactionsDetails)\r\n                || (item.paymentDetails && !!item.paymentDetails))\r\n                ? (helper.transformingTransactionDetail(\r\n                    item.paymentDetails ? item.paymentDetails : item.transactionsDetails,\r\n                    currentContext.language\r\n                ) as ITransactionAccordianDetail)\r\n                : null;\r\n\r\n        return (\r\n            <tbody key={index}>\r\n                <Accordion.Toggle as=\"tr\" eventKey={index} className=\"clickRow\"\r\n                    onClick={() => setCollapsible(!isCollapsible)} >\r\n                    <td colSpan={1}>{moment(!!item.bookingDate ? item.bookingDate : item.installmentDate).format(\"DD/MM/YYYY\")} </td>\r\n                    <td colSpan={2}>{(item.amount || item.transaction_Amount) + \" \" + currentContext.userSettings.currency}</td>\r\n                    <td colSpan={3}>{item.descirption ||\r\n                        item.trxDescirption ||\r\n                        item.transactionType ||\r\n                        item.transacitonType ||\r\n                        item.descriptions\r\n                    }</td>\r\n                    {props.showBalanceField ?\r\n                        <td colSpan={2} className=\"text-right\">\r\n                            {(item.balance || \"0\") + \" \" + currentContext.userSettings.currency}\r\n                        </td> : null}\r\n                    <td className=\"caretArrow\">\r\n                        <i className={(isCollapsible ? \"fa fa-caret-down\" : \"fa fa-caret-right\") + \" color-gray\"}></i>\r\n                    </td>\r\n                </Accordion.Toggle>\r\n                {transactionsDetails && isCollapsible &&\r\n                    <tr>\r\n                        <td colSpan={9} className=\"p-0\">\r\n                            <Accordion.Collapse eventKey={index} className=\"collapseRow\">\r\n                                <div className=\"px-3 py-2\">\r\n                                    {transactionsDetails.TransactionReference &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.TransactionReference.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.TransactionReference.value}</div>\r\n                                        </div>}\r\n                                    {transactionsDetails.DepositReference &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.DepositReference.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.DepositReference.value}</div>\r\n                                        </div>}\r\n                                    {transactionsDetails.TransferReference &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.TransferReference.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.TransferReference.value}</div>\r\n                                        </div>}\r\n                                    {transactionsDetails.InvestmentDescription &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.InvestmentDescription.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.InvestmentDescription.value}</div>\r\n                                        </div>}\r\n                                    {transactionsDetails.SecurityName &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.SecurityName.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.SecurityName.value}</div>\r\n                                        </div>}\r\n                                    {transactionsDetails.TransferDetails &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.TransferDetails.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.TransferDetails.value}</div>\r\n                                        </div>}\r\n                                    {transactionsDetails.BeneficiaryCustomer &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.BeneficiaryCustomer.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.BeneficiaryCustomer.value}</div>\r\n                                        </div>}\r\n                                    {transactionsDetails.BeneficiaryAccount &&\r\n                                        <div className=\"item-row py-2\">\r\n                                            <div className=\"color-black\">{transactionsDetails.BeneficiaryAccount.label}</div>\r\n                                            <div className=\"color-gray\">{transactionsDetails.BeneficiaryAccount.value}</div>\r\n                                        </div>}\r\n                                </div>\r\n                            </Accordion.Collapse>\r\n                        </td>\r\n                    </tr>\r\n                }\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"box table-box\">\r\n                <Accordion\r\n                    as=\"table\"\r\n                    className=\"table table-striped\"\r\n                    id=\"internalActivities\"\r\n                >\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan={1}>{local_Strings.RequestListingFilterDate} </th>\r\n                            <th colSpan={2}>{local_Strings.Amount} </th>\r\n                            <th colSpan={3}>{local_Strings.Description} </th>\r\n                            {props.showBalanceField &&\r\n                                <th colSpan={2} className=\"text-right\">\r\n                                    {local_Strings.CashDetailsBalanceLabel}\r\n                                </th>\r\n                            }\r\n                            <th className=\"text-right\"> </th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    {filteredData &&\r\n                        filteredData.length > 0 &&\r\n                        (!!filteredData[0].bookingDate || !!filteredData[0].installmentDate) ?\r\n                        filteredData.slice(0, offset).map((item, index) => renderItem(item, String(index))\r\n                        ) : NoResult(local_Strings.NoDataToShow)}\r\n\r\n                </Accordion>\r\n            </div>\r\n            <FilterMoreButtonControl showMore={filteredData && filteredData.length > rowLimit &&\r\n                offset < filteredData.length} onClickMore={() => setOffset(offset + 5)} />\r\n            <LoadingOverlay\r\n                active={isLoading}\r\n                spinner={\r\n                    <PuffLoader\r\n                        size={Constant.SpnnerSize}\r\n                        color={Constant.SpinnerColor}\r\n                    />\r\n                }\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TransactionListing;","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterCommonControl2.tsx",["835","836"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { localStrings as local_Strings } from '../translations/localStrings';\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\nimport FilterDateControl from './FilterDateControl';\r\nimport FilterCustomDateControl from './FilterCustomDateControl';\r\nimport FilterAmountControl from './FilterAmountControl';\r\nimport FilterButtonControl from './FilterButtonControl';\r\nimport FilterDropDownControl from './FilterDropDownControl';\r\nimport { emptyCommonFilter, ICommonFilter } from \"../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\n\r\ninterface IFilterCommonControl2Props {\r\n    applyFilter: (filters: ICommonFilter) => void;\r\n    clearFilter: () => void;\r\n    CheckBoxTitle?: string;\r\n    CheckBoxLabels?: string[];\r\n}\r\n\r\nconst FilterCommonControl2: React.FC<IFilterCommonControl2Props> = (props) => {\r\n\r\n    const auth = useContext(AuthContext);\r\n    local_Strings.setLanguage(auth.language);\r\n    const [filters, setFilter] = useState<ICommonFilter>(emptyCommonFilter);\r\n\r\n    return (\r\n        <form className=\"filter-box\">\r\n            <div className=\"row headRow align-items-center\">\r\n                <div className=\"col-sm-3\">\r\n                    <FilterDateControl value={filters.DateOption}\r\n                        onChange={(_value: string) => setFilter({ ...filters, DateOption: _value })} />\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                    <FilterAmountControl AmountOperator={filters.AmountOperator} Amount={filters.Amount}\r\n                        onChangeOperator={(_value: string) => setFilter({ ...filters, AmountOperator: _value })}\r\n                        onChangeAmount={(_value: string) => setFilter({ ...filters, Amount: _value })} />\r\n                </div>\r\n                <div className=\"col-sm-3\">\r\n                    <label>{props.CheckBoxTitle}</label>\r\n                    <div className=\"form-row\">\r\n                        <div className=\"custom-control custom-checkbox custom-control-inline\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                name=\"radioType\"\r\n                                className=\"custom-control-input\"\r\n                                id=\"customCheck1\"\r\n                                value={\r\n                                    filters.OptionalCheck[0]\r\n                                        ? filters.OptionalCheck[0].value\r\n                                        : false\r\n                                }\r\n                                onChange={(_value) => {\r\n                                    const OptionalCheck = [...filters.OptionalCheck];\r\n                                    OptionalCheck[0].label = props.CheckBoxLabels[0];\r\n                                    OptionalCheck[0].value = _value;\r\n\r\n                                    setFilter({\r\n                                        ...filters, OptionalCheck\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">{props.CheckBoxLabels[0]}</label>\r\n                        </div>\r\n                        <div className=\"custom-control custom-checkbox custom-control-inline\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                name=\"radioType\"\r\n                                className=\"custom-control-input\"\r\n                                id=\"customCheck2\"\r\n                                value={\r\n                                    filters.OptionalCheck[1]\r\n                                        ? filters.OptionalCheck[1].value\r\n                                        : false\r\n                                }\r\n                                onChange={(_value) => {\r\n                                    const OptionalCheck = [...filters.OptionalCheck];\r\n                                    OptionalCheck[1].label = props.CheckBoxLabels[1];\r\n                                    OptionalCheck[1].value = _value;\r\n\r\n                                    setFilter({\r\n                                        ...filters, OptionalCheck\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck2\">{props.CheckBoxLabels[1]}</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <FilterButtonControl\r\n                        clearFilter={() => {\r\n                            setFilter(emptyCommonFilter);\r\n                            props.clearFilter();\r\n                        }}\r\n                        applyFilter={() => {\r\n                            setFilter({ ...filters, filterApplied: true });\r\n                            props.applyFilter({ ...filters, filterApplied: true });\r\n                        }}\r\n                        showClearFilter={filters.filterApplied} />\r\n                </div>\r\n                <FilterCustomDateControl\r\n                    onStartDateChange={(_value: string) => setFilter({ ...filters, StartDate: moment(_value).toDate() })}\r\n                    onEndDateChange={(_value: string) => setFilter({ ...filters, EndDate: moment(_value).toDate() })}\r\n                    StartDate={filters.StartDate}\r\n                    EndDate={filters.EndDate}\r\n                    showCustomDateFilter={filters.DateOption === \"4\"} />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FilterCommonControl2;","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterCustomDateControl.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterAmountControl.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\shared\\FilterDateControl.tsx",[],"D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\cash\\CashDetails.tsx",["837","838","839","840"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\nimport FilterCommonControl2 from '../../../shared/FilterCommonControl2';\r\nimport TransactionListing from '../../../shared/TransactionListing';\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport { emptyTransaction, ICommonFilter, ITransaction } from \"../../../Helpers/publicInterfaces\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport { GetCashTransactions } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport ReactExport from \"react-export-excel\";\r\n\r\ninterface iCashDetails {\r\n  showCashDetailsModal: boolean;\r\n  hideCashDetailsModal: () => void;\r\n  backCashListingModal: () => void;\r\n  params: { accountNumber: string, balance: number }\r\n}\r\n\r\nfunction CashDetails(props: iCashDetails) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [data, setData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const [filteredData, setFilteredData] = useState<ITransaction[]>([emptyTransaction]);\r\n  const ExcelFile = ReactExport.ExcelFile;\r\n  const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\r\n  const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetCashTransactions(currentContext.selectedCIF, props.params.accountNumber)\r\n        .then((responseData: ITransaction[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            const _data = responseData.filter(\r\n              (d) => new Date(d.bookingDate) > moment().add(-3, \"months\").toDate()\r\n            )\r\n            setData(responseData);\r\n            setFilteredData(_data);\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showCashDetailsModal}\r\n      onHide={props.hideCashDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"row align-items-center\">\r\n            <div className=\"col-2 col-sm-1 text-center\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.backCashListingModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>{local_Strings.AccountNo}</h5>\r\n              <h4>{props.params.accountNumber}</h4>\r\n            </div>\r\n            <div className=\"col-4 col-sm-3\">\r\n              <h5>{local_Strings.CurrentBalanceLabel}</h5>\r\n              <h4>{props.params.balance + \" \" + currentContext.userSettings.currency}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideCashDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {data && data.length > 0 && !!data[0].bookingDate &&\r\n          <FilterCommonControl2\r\n            CheckBoxTitle={local_Strings.RequestTypeLabel}\r\n            CheckBoxLabels={[\r\n              local_Strings.CashDetails_Filter_Debit, local_Strings.CashDetails_Filter_Credit\r\n            ]}\r\n            clearFilter={() => {\r\n              setFilteredData(data);\r\n            }}\r\n            applyFilter={(filters: ICommonFilter) => {\r\n              console.log(filters);\r\n              const _filteredData = helper.filterTransactions(\r\n                data,\r\n                filters\r\n              );\r\n              setFilteredData(_filteredData);\r\n            }} />\r\n        }\r\n\r\n        <TransactionListing transactions={filteredData} showBalanceField={true} />\r\n\r\n        <LoadingOverlay\r\n          active={isLoading}\r\n          spinner={\r\n            <PuffLoader\r\n              size={Constant.SpnnerSize}\r\n              color={Constant.SpinnerColor}\r\n            />\r\n          }\r\n        />\r\n        {filteredData && filteredData.length > 0 && !!filteredData[0].accountNumber &&\r\n          <div className=\"exportExcel\">\r\n            <ExcelFile filename={local_Strings.CashDetailsTitle}\r\n              element={<a href=\"#\"><img src={excelIcon} className=\"img-fluid\" />\r\n                {local_Strings.exportToExcel}</a>}>\r\n              <ExcelSheet data={filteredData} name={local_Strings.CashDetailsTitle}>\r\n                <ExcelColumn label={local_Strings.AccountNo} value=\"accountNumber\" />\r\n                <ExcelColumn label={local_Strings.RequestListingFilterDate} value=\"bookingDate\" />\r\n                <ExcelColumn label={local_Strings.Amount} value=\"transaction_Amount\" />\r\n                <ExcelColumn label={local_Strings.Description} value={\"descriptions\"} />\r\n                <ExcelColumn label={local_Strings.CashDetailsBalanceLabel} value={\"balance\"} />\r\n              </ExcelSheet>\r\n            </ExcelFile>\r\n          </div>}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CashDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\assets\\cash\\CashListing.tsx",["841","842","843","844","845"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport cashIcon from \"../../../images/cash-icon.svg\";\r\nimport { emptyAccountBalance, IAccountBalance } from \"../../../Helpers/publicInterfaces\";\r\nimport { localStrings as local_Strings } from '../../../translations/localStrings';\r\nimport { AuthContext } from \"../../../providers/AuthProvider\";\r\nimport * as helper from \"../../../Helpers/helper\";\r\nimport NoResult from \"../../../shared/NoResult\";\r\nimport { GetCashListing } from \"../../../services/cmsService\";\r\nimport Constant from \"../../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport FilterMoreButtonControl from '../../../shared/FilterMoreButtonControl';\r\nimport { PortfolioContext } from \"../../../pages/Homepage\";\r\n\r\ninterface iCashListing {\r\n  showCashListingModal: boolean;\r\n  hideCashListingModal: () => void;\r\n  showCashDetailsModal: (accountNumber: string, balance: number) => void;\r\n}\r\n\r\nfunction CashListing(props: iCashListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  const userPortfolio = useContext(PortfolioContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<IAccountBalance[]>([emptyAccountBalance]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetCashListing(currentContext.selectedCIF)\r\n        .then((responseData: IAccountBalance[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            setData(responseData);\r\n            if (responseData.length < rowLimit) {\r\n              setOffset(responseData.length);\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  const renderItem = (item: IAccountBalance, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showCashDetailsModal(item.accountNumber, item.balance)}\r\n      >\r\n        <div className=\"col-2 col-sm-1\">\r\n          <span className=\"curr-icon\">{item.currency || currentContext.userSettings.currency}</span>\r\n        </div>\r\n        <div className=\"col-8 col-sm-4\">\r\n          <h5>{local_Strings.AccountNo}</h5>\r\n          <h4>{item.accountNumber || \"\"}</h4>\r\n        </div>\r\n        <div className=\"col-8 offset-2 offset-sm-0 col-sm-6\">\r\n          <h5>{local_Strings.CashDetailsBalanceLabel}</h5>\r\n          <h4>{(item.balance || \"0\") + \" \" + item.currency}</h4>\r\n        </div>\r\n        <div className=\"col-2 col-sm-1 text-right\">\r\n          <i className=\"fa fa-chevron-right\"></i>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showCashListingModal}\r\n        onHide={props.hideCashListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <img src={cashIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4>{local_Strings.CashListingCash}</h4>\r\n              <h5>{(userPortfolio.totalCash || \"0\") + \" \" + (currentContext.userSettings.currency || \"\")}</h5>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideCashListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"dataList\">\r\n              {data &&\r\n                data.length > 0 &&\r\n                !!data[0].accountNumber ?\r\n                data.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.CashListing_NoData)}\r\n            </ul>\r\n          </div>\r\n          <FilterMoreButtonControl showMore={data && data.length > rowLimit &&\r\n            offset < data.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CashListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\AuthOffers\\AuthOffersDetails.tsx",["846","847","848","849","850","851","852"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport dateIcon from \"../../images/calendar-inactive.png\";\r\nimport { emptyOfferData, IOfferDetail } from \"../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport { GetOfferById } from \"../../services/cmsService\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst mime = require('mime');\r\n\r\ninterface iAuthOffersDetails {\r\n  showAuthOffersDetailsModal: boolean;\r\n  hideAuthOffersDetailsModal: () => void;\r\n  backAuthOffersDetailsModal: () => void;\r\n  showAuthOfferRequestModal: () => void;\r\n  itemID: number\r\n}\r\n\r\nfunction AuthOffersDetails(props: iAuthOffersDetails) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [item, setDetail] = useState<IOfferDetail>(emptyOfferData);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (props.itemID && props.itemID > 0) {\r\n\r\n      setLoading(true);\r\n      GetOfferById(props.itemID)\r\n        .then((responseData: any) => {\r\n          if (responseData && responseData.length > 0 && isMounted) {\r\n            setDetail(responseData[0] as IOfferDetail)\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    } else {\r\n      setDetail(emptyOfferData);\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [props.itemID]);\r\n\r\n  const downloadAttachment = () => {\r\n\r\n    const blob = helper.b64toBlob(item.fileContent, mime.getType(item.fileName));\r\n    saveAs(blob, item.fileName);\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showAuthOffersDetailsModal}\r\n      onHide={props.hideAuthOffersDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.backAuthOffersDetailsModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">{local_Strings.OffersDetailsTitle}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideAuthOffersDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box py-0 mb-0 scrollabel-modal-box\">\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n          <ul className=\"box-list mb-0\">\r\n            <li className=\"shown\">\r\n              <div className=\"row align-items-center py-2\">\r\n                <div className=\"col-md-8 col-sm-8 \">\r\n                  <div className=\"text-xs color-grey\">\r\n                    {moment(item.createdDate).format(\"dddd DD MMM YYYY\")}\r\n                  </div>\r\n                  <h6 className=\"mb-1 text-600 text-18 \">\r\n                    {currentContext.language === \"en\" ? item.title : item.titleAr}\r\n                  </h6>\r\n                </div>\r\n                {!!item.fileName &&\r\n                  <div className=\"col-md-4 text-right\" onClick={downloadAttachment}>\r\n                    <a className=\"download-link d-inline-block \"\r\n                      href=\"#\">\r\n                      <i className=\"mx-1 fa fa-file color-white\"></i>\r\n                      <i className=\"mx-1 fa fa-download color-white\"></i>\r\n                    </a>\r\n                  </div>}\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"p-3 mb-4 color-grey\"\r\n            dangerouslySetInnerHTML={{ __html: currentContext.language === \"en\" ? item.selectedOfferDetails : item.selectedOfferDetailsAr }}\r\n          />\r\n          {currentContext.userRole === Constant.Customer &&\r\n            <div className=\"text-right p-3\">\r\n              <button\r\n                id=\"applyReqBtn\"\r\n                className=\"btn btn-primary\"\r\n                onClick={props.showAuthOfferRequestModal}\r\n              >\r\n                {local_Strings.OffersDetailsButton}\r\n              </button>\r\n            </div>}\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default AuthOffersDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\NewRequest.tsx",["853","854","855","856","857","858","859","860"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport requestSentIcon from \"../../images/req-sent.svg\";\r\n\r\ninterface iNewRequest {\r\n  showNewRequestModal: boolean;\r\n  hideNewRequestModal: () => void;\r\n  backNewRequestModal: () => void;\r\n}\r\nfunction NewRequest(newRequestProps: iNewRequest) {\r\n  const [showRequestFields, setShowRequestFields] = useState(false);\r\n  const [valideForm, setValideForm] = useState(false);\r\n  const [valideFormOTP, setvalideFormOTP] = useState(false);\r\n\r\n  const requestTypeOnchangeHandler = (e: any) => {\r\n    if (e.target.value != 0) {\r\n      setShowRequestFields(true);\r\n    } else {\r\n      setShowRequestFields(false);\r\n    }\r\n  };\r\n\r\n  const applyRequestHandler = () => {\r\n    setValideForm(true);\r\n  };\r\n  const applyOTPRequestHandler = () => {\r\n    setvalideFormOTP(true);\r\n  };\r\n  return (\r\n    <Modal\r\n      show={newRequestProps.showNewRequestModal}\r\n      onHide={newRequestProps.hideNewRequestModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={newRequestProps.backNewRequestModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">NEW REQUESTS</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={newRequestProps.hideNewRequestModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div\r\n          className={valideForm ? \"box modal-box d-none\" : \"box modal-box\"}\r\n          id=\"applyReqBox\"\r\n        >\r\n          <div className=\"py-2 px-3\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-8\">\r\n                <label>Request Type</label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"reqTypeSelect\"\r\n                  onChange={requestTypeOnchangeHandler}\r\n                >\r\n                  <option value=\"0\">Select Type</option>\r\n                  <option value=\"1\">Account Statement</option>\r\n                  <option value=\"2\">Change Mobile Number</option>\r\n                  <option value=\"3\">Audit Balance Confirmation </option>\r\n                  <option value=\"4\">Change Email Address</option>\r\n                  <option value=\"5\">Upload Renewed Documents</option>\r\n                  <option value=\"6\">\r\n                    Change Monthly Portfolio Statement Reference Currency\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={\r\n              showRequestFields ? \"newReqFields\" : \"newReqFields d-none\"\r\n            }\r\n            id=\"newReqFields\"\r\n          >\r\n            <div className=\"py-2 px-3\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-4\">\r\n                  <label>From</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                  <label>To</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"py-2 px-3\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-8\">\r\n                  <label>Auditor Name</label>\r\n                  <input type=\"text\" className=\"form-control\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"py-2 px-3\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-8\">\r\n                  <label>Comments</label>\r\n                  <textarea value=\"\" className=\"form-control\">\r\n                    {\" \"}\r\n                  </textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-right p-3\">\r\n              <button\r\n                id=\"applyReqBtn\"\r\n                className=\"btn btn-primary\"\r\n                onClick={applyRequestHandler}\r\n              >\r\n                Apply\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            valideForm && !valideFormOTP\r\n              ? \"box modal-box p-4\"\r\n              : \"box modal-box p-4 d-none\"\r\n          }\r\n          id=\"confirmOTPBox\"\r\n        >\r\n          <p>Kindly enter the one time code you received.</p>\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6\">\r\n              <label>Enter OTP</label>\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"• • • • • •\"\r\n                className=\"form-control\"\r\n              />\r\n              <div className=\"text-right\">\r\n                <small>\r\n                  <a href=\"#\">Resend OTP ?</a>\r\n                </small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <button\r\n              id=\"submitOTPBtn\"\r\n              className=\"btn btn-primary\"\r\n              onClick={applyOTPRequestHandler}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={valideFormOTP ? \"box modal-box\" : \"box modal-box d-none\"}\r\n          id=\"confirmReqBox\"\r\n        >\r\n          <div className=\"py-2 px-3 text-center text-sm-left\">\r\n            <div className=\"row align-items-center justify-content-center\">\r\n              <div className=\"col-sm-2\">\r\n                <img src={requestSentIcon} className=\"img-fluid my-3\" />\r\n              </div>\r\n              <div className=\"col-sm-8\">\r\n                <h2 className=\"m-0 mb-4\">Request Sent</h2>\r\n                <h5>Your request has been sent successfully to your RM</h5>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right p-3\">\r\n            <button\r\n              id=\"doneRequestBtn\"\r\n              data-dismiss=\"modal\"\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Done\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default NewRequest;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\beneficiaries\\NewBeneficiaries.tsx",["861","862","863","864","865","866","867","868","869"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport beneficiarySentIcon from \"../../images/req-sent.svg\";\r\n\r\ninterface iNewBeneficiary {\r\n  showNewBeneficiaryModal: boolean;\r\n  hideNewBeneficiaryModal: () => void;\r\n  backNewBeneficiaryModal: () => void;\r\n}\r\nfunction NewBeneficiary(newBeneficiaryProps: iNewBeneficiary) {\r\n  const [showBeneficiaryFields, setShowBeneficiaryFields] = useState(false);\r\n  const [valideForm, setValideForm] = useState(false);\r\n  const [valideFormOTP, setvalideFormOTP] = useState(false);\r\n\r\n  const beneficiaryTypeOnchangeHandler = (e: any) => {\r\n    if (e.target.value != 0) {\r\n      setShowBeneficiaryFields(true);\r\n    } else {\r\n      setShowBeneficiaryFields(false);\r\n    }\r\n  };\r\n\r\n  const applyBeneficiaryHandler = () => {\r\n    setValideForm(true);\r\n  };\r\n  const applyOTPBeneficiaryHandler = () => {\r\n    setvalideFormOTP(true);\r\n  };\r\n  return (\r\n    <Modal\r\n      show={newBeneficiaryProps.showNewBeneficiaryModal}\r\n      onHide={newBeneficiaryProps.hideNewBeneficiaryModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={newBeneficiaryProps.backNewBeneficiaryModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">New Beneficiaries Request</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={newBeneficiaryProps.hideNewBeneficiaryModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div\r\n          className={valideForm ? \"box modal-box d-none\" : \"box modal-box\"}\r\n          id=\"applyReqBox\"\r\n        >\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row \">\r\n              <div className=\"col-lg-9 form-group\">\r\n                <label>Beneficiary Type</label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"reqTypeSelect\"\r\n                  onChange={beneficiaryTypeOnchangeHandler}\r\n                >\r\n                  <option value=\"0\">Select Type</option>\r\n                  <option value=\"1\">Within my account</option>\r\n                  <option value=\"2\">Local</option>\r\n                  <option value=\"3\">International </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={\r\n              showBeneficiaryFields ? \"newReqFields\" : \"newReqFields d-none\"\r\n            }\r\n            id=\"newReqFields\"\r\n          >\r\n            <div className=\"py-2\">\r\n              <div className=\" col-lg-9\">\r\n                <div className=\"row mb-5\">\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary ID</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"QAR72341838470\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary Bank Swift Code</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"QAR72341838470\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary QFB account Number or IBAN</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"QAR72341838470\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary Bank</label>\r\n                    <select className=\"form-control\">\r\n                      <option value=\"0\">QFB</option>\r\n                      <option value=\"1\">QFB</option>\r\n                      <option value=\"2\">QFB</option>\r\n                      <option value=\"3\">QFB</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mb-5\">\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary Full Name</label>\r\n\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Mohamed Ahmed\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary Account Number</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Mohamed Ahmed\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary Account Currency</label>\r\n\r\n                    <select className=\"form-control\">\r\n                      <option value=\"0\">QAR</option>\r\n                      <option value=\"1\">EGy</option>\r\n                      <option value=\"2\">USD</option>\r\n                      <option value=\"3\">AED</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary IBAN</label>\r\n\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Mohamed Ahmed\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary Country</label>\r\n\r\n                    <select className=\"form-control\">\r\n                      <option value=\"0\">Qatar</option>\r\n                      <option value=\"1\">USA</option>\r\n                      <option value=\"2\">Egypt</option>\r\n                      <option value=\"3\">UAE</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Beneficiary City</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Doha\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-lg-12 form-group\">\r\n                    <label>Beneficiary Address</label>\r\n\r\n                    <textarea\r\n                      value=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\r\nincididunt ut labore\"\r\n                      className=\"form-control\"\r\n                    ></textarea>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-6 form-group \">\r\n                    <label>Intermediary Bank SWIFT CODE</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"123\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-lg-6 form-group \">\r\n                    <label>Intermediary Bank Name</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Bank Name\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>Routing Number/Sort Code,if any</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"124345\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-right p-3\">\r\n                <button id=\"applyReqBtn\" className=\"btn btn-primary\">\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            valideForm && !valideFormOTP\r\n              ? \"box modal-box p-4\"\r\n              : \"box modal-box p-4 d-none\"\r\n          }\r\n          id=\"confirmOTPBox\"\r\n        >\r\n          <p>Kindly enter the one time code you received.</p>\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6\">\r\n              <label>Enter OTP</label>\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"• • • • • •\"\r\n                className=\"form-control\"\r\n              />\r\n              <div className=\"text-right\">\r\n                <small>\r\n                  <a href=\"#\">Resend OTP ?</a>\r\n                </small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <button\r\n              id=\"submitOTPBtn\"\r\n              className=\"btn btn-primary\"\r\n              onClick={applyOTPBeneficiaryHandler}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={valideFormOTP ? \"box modal-box\" : \"box modal-box d-none\"}\r\n          id=\"confirmReqBox\"\r\n        >\r\n          <div className=\"py-2 px-3 text-center text-sm-left\">\r\n            <div className=\"row align-items-center justify-content-center\">\r\n              <div className=\"col-sm-2\">\r\n                <img src={beneficiarySentIcon} className=\"img-fluid my-3\" />\r\n              </div>\r\n              <div className=\"col-sm-8\">\r\n                <h2 className=\"m-0 mb-4\">Beneficiary Sent</h2>\r\n                <h5>Your beneficiary has been sent successfully to your RM</h5>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right p-3\">\r\n            <button\r\n              id=\"doneBeneficiaryBtn\"\r\n              data-dismiss=\"modal\"\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Done\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default NewBeneficiary;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\beneficiaries\\BeneficiariesDetails.tsx",["870","871","872","873","874","875","876"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport excelIcon from \"../../../images/excel.svg\";\r\n\r\ninterface iBeneficiariesDetails {\r\n  showBeneficiariesDetailsModal: boolean;\r\n  hideBeneficiariesDetailsModal: () => void;\r\n  backBeneficiariesDetailsgModal: () => void;\r\n  showNewBeneficiaryModal: () => void;\r\n}\r\nfunction BeneficiariesDetails(\r\n  beneficiariesDetailsProps: iBeneficiariesDetails\r\n) {\r\n  return (\r\n    <Modal\r\n      show={beneficiariesDetailsProps.showBeneficiariesDetailsModal}\r\n      onHide={beneficiariesDetailsProps.hideBeneficiariesDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"modal-header-text\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={beneficiariesDetailsProps.backBeneficiariesDetailsgModal}\r\n              className=\"backToAccountsList\"\r\n            >\r\n              <i className=\"fa fa-chevron-left\"></i>\r\n            </a>\r\n          </div>\r\n          <div className=\"ib-text\">\r\n            <h4>Beneficiaries Details</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={beneficiariesDetailsProps.hideBeneficiariesDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box\">\r\n          <ul className=\"box-list\" id=\"reqList1\">\r\n            <li className=\"pb-3\">\r\n              <div className=\"row align-items-center\">\r\n                <div className=\"col-sm-8\">\r\n                  <h4>Beneficiary ID | 12345678912345</h4>\r\n                  <h4 className=\"text-18\">Transfer to Ahmed</h4>\r\n                </div>\r\n                <div className=\"col-sm-4 text-sm-right\">\r\n                  <span className=\"status-badge\">Qatar</span>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"py-2\">\r\n            <div className=\" col-lg-9\">\r\n              <div className=\"row mb-5\">\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary ID</label>\r\n                  <div className=\"readonly\">QAR72341838470</div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary Bank Swift Code</label>\r\n                  <div className=\"readonly\">QAR123456</div>\r\n                </div>\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary QFB account Number or IBAN</label>\r\n\r\n                  <div className=\"readonly\">QAR72341838470</div>\r\n                </div>\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary Bank</label>\r\n\r\n                  <div className=\"readonly\">QFB</div>\r\n                </div>\r\n              </div>\r\n              <div className=\"row mb-5\">\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary Full Name</label>\r\n\r\n                  <div className=\"readonly\">Mohamed Ahmed</div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary Account Number</label>\r\n\r\n                  <div className=\"readonly\">QAR72341838470</div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary Account Currency</label>\r\n\r\n                  <div className=\"readonly\">QAR</div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary IBAN</label>\r\n\r\n                  <div className=\"readonly\">QAR72341838470</div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary Country</label>\r\n\r\n                  <div className=\"readonly\">Qatar</div>\r\n                </div>\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary Address</label>\r\n\r\n                  <div className=\"readonly\">\r\n                    Qatar Towers, 123 Street, Doha, Qatar\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary City</label>\r\n\r\n                  <div className=\"readonly\">Doha</div>\r\n                </div>\r\n              </div>\r\n              <div className=\"row mb-5\">\r\n                <div className=\"col-lg-6 form-group \">\r\n                  <label>Intermediary Bank SWIFT CODE</label>\r\n\r\n                  <div className=\"readonly\">QAR72341838470</div>\r\n                </div>\r\n                <div className=\"col-lg-6 form-group \">\r\n                  <label>Intermediary Bank Name</label>\r\n\r\n                  <div className=\"readonly\">QAR72341838470</div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Routing Number/Sort Code,if any</label>\r\n\r\n                  <div className=\"readonly\">QAR72341838470</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-right p-3\">\r\n              <button id=\"applyReqBtn\" className=\"btn btn-primary mx-2\">\r\n                Edit\r\n              </button>\r\n              <button id=\"applyReqBtn\" className=\"btn btn-primary\">\r\n                Save\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default BeneficiariesDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\beneficiaries\\BeneficiariesListing.tsx",["877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895"],"import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport beneficiaryIconColor from \"../../images/beneficiary-icon-color.svg\";\r\n\r\ninterface iBeneficiariesListing {\r\n  showBeneficiariesListingModal: boolean;\r\n  hideBeneficiariesListingModal: () => void;\r\n  showBeneficiariesDetailsModal: () => void;\r\n  showNewBeneficiaryModal: () => void;\r\n  backBeneficiariesListingModal: () => void;\r\n}\r\nfunction BeneficiariesListing(\r\n  beneficiariesListingProps: iBeneficiariesListing\r\n) {\r\n  const [showClearFilter, setShowClearFilter] = useState(false);\r\n  const [showBeneficiaryDateFilter, setShowBeneficiaryDateFilter] = useState(\r\n    false\r\n  );\r\n\r\n  const applyFilter = () => {\r\n    setShowClearFilter(true);\r\n  };\r\n\r\n  const clearFilter = () => {\r\n    setShowClearFilter(false);\r\n  };\r\n  const showMoreBeneficiariesListing = () => {\r\n    console.log(\"retrieve more from server\");\r\n  };\r\n  const requestDateFilterOnchangeHandler = (e: any) => {\r\n    if (e.target.value == 4) {\r\n      setShowBeneficiaryDateFilter(true);\r\n    } else {\r\n      setShowBeneficiaryDateFilter(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={beneficiariesListingProps.showBeneficiariesListingModal}\r\n        onHide={beneficiariesListingProps.hideBeneficiariesListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"modal-header-text\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={\r\n                  beneficiariesListingProps.backBeneficiariesListingModal\r\n                }\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text d-flex align-items-center\">\r\n              <h4>Beneficiaries</h4>\r\n              <a\r\n                className=\"btnOutlineWhite\"\r\n                href=\"#\"\r\n                onClick={beneficiariesListingProps.showNewBeneficiaryModal}\r\n                id=\"newBeneficiaryBtn\"\r\n              >\r\n                <i className=\"fa fa-plus-circle\"></i> New Beneficiaries\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={beneficiariesListingProps.hideBeneficiariesListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"reqList\">\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li className=\"shown\">\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"row align-items-center\"\r\n                  onClick={\r\n                    beneficiariesListingProps.showBeneficiariesDetailsModal\r\n                  }\r\n                >\r\n                  <div className=\"col-sm-8\">\r\n                    <h4>Beneficiary ID | 12345678912345 </h4>\r\n                    <h5>Ahmed Mohsen</h5>\r\n                  </div>\r\n                  <div className=\"col-8 col-sm-3 text-sm-right\">\r\n                    <span className=\"status-badge \">Qatar</span>\r\n                  </div>\r\n                  <div className=\"col-4 col-sm-1 text-right\">\r\n                    <i className=\"fa fa-chevron-right\"></i>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"actionScrollButtons\">\r\n            <a\r\n              id=\"moreButton\"\r\n              onClick={showMoreBeneficiariesListing}\r\n              className=\"d-block\"\r\n            >\r\n              More <i className=\"fa fa-caret-down\"></i>\r\n            </a>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BeneficiariesListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\NewTransactions.tsx",["896","897","898","899","900","901","902","903"],"import React, { useState } from \"react\";\r\nimport { Accordion, Button, Card, Collapse, Modal } from \"react-bootstrap\";\r\nimport transactionSentIcon from \"../../images/req-sent.svg\";\r\n\r\ninterface iNewTransaction {\r\n  showNewTransactionModal: boolean;\r\n  hideNewTransactionModal: () => void;\r\n  backNewTransactionModal: () => void;\r\n}\r\nfunction NewTransaction(props: iNewTransaction) {\r\n  const [showTransactionFields, setShowTransactionFields] = useState(false);\r\n  const [valideForm, setValideForm] = useState(false);\r\n  const [valideFormOTP, setvalideFormOTP] = useState(false);\r\n\r\n  const transactionTypeOnchangeHandler = (e: any) => {\r\n    if (e.target.value != 0) {\r\n      setShowTransactionFields(true);\r\n    } else {\r\n      setShowTransactionFields(false);\r\n    }\r\n  };\r\n\r\n  const applyTransactionHandler = () => {\r\n    setValideForm(true);\r\n  };\r\n  const applyOTPTransactionHandler = () => {\r\n    setvalideFormOTP(true);\r\n  };\r\n  return (\r\n    <Modal\r\n      show={props.showNewTransactionModal}\r\n      onHide={props.hideNewTransactionModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"modal-header-text\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon\">\r\n              <a\r\n                href=\"#\"\r\n                onClick={props.backNewTransactionModal}\r\n                className=\"backToAccountsList\"\r\n              >\r\n                <i className=\"fa fa-chevron-left\"></i>\r\n              </a>\r\n            </div>\r\n            <div className=\"ib-text\">\r\n              <h4 id=\"newReqTxt\">New Transactions Request</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideNewTransactionModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div\r\n          className={valideForm ? \"box modal-box d-none\" : \"box modal-box\"}\r\n          id=\"applyReqBox\"\r\n        >\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-9 form-group\">\r\n                <label>Transaction Type</label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  id=\"reqTypeSelect\"\r\n                  onChange={transactionTypeOnchangeHandler}\r\n                >\r\n                  <option value=\"0\">Select Type</option>\r\n                  <option value=\"1\">Within my account</option>\r\n                  <option value=\"2\">Local</option>\r\n                  <option value=\"3\">International </option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={\r\n              showTransactionFields ? \"newReqFields\" : \"newReqFields d-none\"\r\n            }\r\n            id=\"newReqFields\"\r\n          >\r\n            <div className=\"py-2\">\r\n              <div className=\"row col-lg-9\">\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>From Account</label>\r\n                  <select className=\"form-control\">\r\n                    <option value=\"0\">2345678374656789 (QAR)</option>\r\n                    <option value=\"1\">2345678374656789 (QAR)</option>\r\n                    <option value=\"2\">2345678374656789 (QAR)</option>\r\n                    <option value=\"3\">2345678374656789 (QAR) </option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>To Account</label>\r\n                  <select className=\"form-control\">\r\n                    <option value=\"0\">2345678374656789 (QAR)</option>\r\n                    <option value=\"1\">2345678374656789 (QAR)</option>\r\n                    <option value=\"2\">2345678374656789 (QAR)</option>\r\n                    <option value=\"3\">2345678374656789 (QAR) </option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Select Transfer Currency</label>\r\n                  <select className=\"form-control\">\r\n                    <option value=\"0\">QAR</option>\r\n                    <option value=\"1\">EGy</option>\r\n                    <option value=\"2\">USD</option>\r\n                    <option value=\"3\">AED</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Amount</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"250.000,000 (QAR)\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>Beneficiary</label>\r\n                  <select className=\"form-control\">\r\n                    <option value=\"0\">Ahmed Ali</option>\r\n                    <option value=\"1\">Ahmed Ali</option>\r\n                    <option value=\"2\">Ahmed Ali</option>\r\n                    <option value=\"3\">Ahmed Ali</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"col-lg-6 form-group customDate\">\r\n                  <label>Request Date</label>\r\n                  <input type=\"date\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"col-lg-12\">\r\n                  <label>Description / Purpose Of Payment</label>\r\n                  <textarea value=\"\" className=\"form-control\"></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"text-right p-3\">\r\n              <button\r\n                id=\"applyReqBtn\"\r\n                className=\"btn btn-primary\"\r\n                onClick={applyTransactionHandler}\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            valideForm && !valideFormOTP\r\n              ? \"box modal-box p-4\"\r\n              : \"box modal-box p-4 d-none\"\r\n          }\r\n          id=\"confirmOTPBox\"\r\n        >\r\n          <p>Kindly enter the one time code you received.</p>\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6\">\r\n              <label>Enter OTP</label>\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"• • • • • •\"\r\n                className=\"form-control\"\r\n              />\r\n              <div className=\"text-right\">\r\n                <small>\r\n                  <a href=\"#\">Resend OTP ?</a>\r\n                </small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <button\r\n              id=\"submitOTPBtn\"\r\n              className=\"btn btn-primary\"\r\n              onClick={applyOTPTransactionHandler}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={valideFormOTP ? \"box modal-box\" : \"box modal-box d-none\"}\r\n          id=\"confirmReqBox\"\r\n        >\r\n          <div className=\"py-2 px-3 text-center text-sm-left\">\r\n            <div className=\"row align-items-center justify-content-center\">\r\n              <div className=\"col-sm-2\">\r\n                <img src={transactionSentIcon} className=\"img-fluid my-3\" />\r\n              </div>\r\n              <div className=\"col-sm-8\">\r\n                <h2 className=\"m-0 mb-4\">Transaction Sent</h2>\r\n                <h5>Your transaction has been sent successfully to your RM</h5>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right p-3\">\r\n            <button\r\n              id=\"doneTransactionBtn\"\r\n              data-dismiss=\"modal\"\r\n              className=\"btn btn-primary\"\r\n            >\r\n              Done\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default NewTransaction;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\TransactionsDetails.tsx",["904","905","906"],"import React, { useContext, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { emptyTransactionDetail, ITransactionDetail } from \"../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\n\r\ninterface iTransactionsDetails {\r\n  showTransactionsDetailsModal: boolean;\r\n  hideTransactionsDetailsModal: () => void;\r\n  backTransactionsListingModal: () => void;\r\n  showNewTransactionModal: () => void;\r\n  item: ITransactionDetail;\r\n}\r\n\r\nfunction TransactionsDetails(props: iTransactionsDetails) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showTransactionsDetailsModal}\r\n      onHide={props.hideTransactionsDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"modal-header-text\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={props.backTransactionsListingModal}\r\n              className=\"backToAccountsList\"\r\n            >\r\n              <i className=\"fa fa-chevron-left\"></i>\r\n            </a>\r\n          </div>\r\n          <div className=\"ib-text\">\r\n            <h4>{local_Strings.TransactionsDetailsTitle}</h4>\r\n          </div>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideTransactionsDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box\">\r\n          <ul className=\"box-list\" id=\"reqList1\">\r\n            <li className=\"pb-3\">\r\n              <div className=\"row align-items-center\">\r\n                <div className=\"col-sm-8\">\r\n                  <h5 className=\"mb-2\">\r\n                    {props.item.requestDate ? moment(props.item.requestDate).format(\"DD MMMM YYYY\") : \"\"}</h5>\r\n                  <h4>{currentContext.language === \"ar\" ? props.item.requestSubjectAR : props.item.requestSubject}</h4>\r\n                </div>\r\n                <div className=\"col-sm-4 text-sm-right\">\r\n                  <span className=\"status-badge\">\r\n                    {currentContext.language === \"ar\" ? props.item.requestStatusAR : props.item.requestStatus}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"py-2\">\r\n            <div className=\"row col-lg-9\">\r\n              <div className=\"col-lg-6 form-group\">\r\n                <label>{local_Strings.TransactionFromAccountLabel}</label>\r\n                <div className=\"readonly\">\r\n                  {props.item.transferFromAccount || \"\"}</div>\r\n              </div>\r\n              {props.item.transactionTypeId === 1 && (\r\n                <div className=\"col-lg-6 form-group\">\r\n                  <label>{local_Strings.TransactionToAccountLabel}</label>\r\n                  <div className=\"readonly\">\r\n                    {props.item.transferToAccount || \"\"}\r\n                  </div>\r\n                </div>)}\r\n              <div className=\"col-lg-6 form-group\">\r\n                <label>{local_Strings.TransactionAmountLabel}</label>\r\n                <div className=\"readonly\">\r\n                  {props.item.amount || \"\"}</div>\r\n              </div>\r\n              {props.item.transactionTypeId !== 1 && (\r\n                <React.Fragment>\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>{local_Strings.TransactionCurrencyLabel}</label>\r\n                    <div className=\"readonly\">\r\n                      {props.item.currency || currentContext.userSettings.currency}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-6 form-group\">\r\n                    <label>{local_Strings.TransactionBenficiaryLabel}</label>\r\n                    <div className=\"readonly\">{props.item.beneficiaryFullName || \"\"}</div>\r\n                  </div>\r\n                  <div className=\"col-lg-6 form-group customDate\">\r\n                    <label>{local_Strings.TransactionDateLabel}</label>\r\n                    <div className=\"readonly date d-flex justify-content-between align-items-center\">\r\n                      {props.item.transactionDate ? moment(props.item.transactionDate).format(\"DD/MM/YYYY\") : \"\"}\r\n                      <i className=\"fa fa-calendar-o\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-12\">\r\n                    <label>{local_Strings.TransactionDescriptionLabel}</label>\r\n                    <div className=\"readonly\">\r\n                      {props.item.description || \"\"}\r\n                    </div>\r\n                  </div>\r\n                </React.Fragment>)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default TransactionsDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\transactions\\TransactionsListing.tsx",["907","908","909","910","911","912"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport transactionIconColor from \"../../images/transaction-icon-color.svg\";\r\nimport FilterCommonControl from '../../shared/FilterCommonControl';\r\nimport FilterMoreButtonControl from '../../shared/FilterMoreButtonControl';\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { emptyTransactionDetail, ICommonFilter, ITransactionDetail } from \"../../Helpers/publicInterfaces\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport NoResult from \"../../shared/NoResult\";\r\nimport { GetTransactionsByCIF } from \"../../services/cmsService\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\n\r\ninterface iTransactionsListing {\r\n  showTransactionsListingModal: boolean;\r\n  hideTransactionsListingModal: () => void;\r\n  showTransactionsDetailsModal: (detail: ITransactionDetail) => void;\r\n  showNewTransactionModal: () => void;\r\n  showBeneficiariesListing: () => void;\r\n}\r\n\r\nfunction TransactionsListing(props: iTransactionsListing) {\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<ITransactionDetail[]>([emptyTransactionDetail]);\r\n  const [filteredData, setFilteredData] = useState<ITransactionDetail[]>([emptyTransactionDetail]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      GetTransactionsByCIF(currentContext.selectedCIF)\r\n        .then((responseData: ITransactionDetail[]) => {\r\n          if (isMounted && responseData && responseData.length > 0) {\r\n            setData(responseData);\r\n            setFilteredData(responseData);\r\n            if (responseData.length < rowLimit) {\r\n              setOffset(responseData.length);\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n  const renderItem = (item: ITransactionDetail, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showTransactionsDetailsModal(item)}\r\n      >\r\n        <div className=\"col-sm-8\">\r\n          <h5>{!!item.transactionDate ? moment(item.transactionDate).format(\"DD/MM/YYYY\") : \"\"}</h5>\r\n          <h4>{(currentContext.language === \"ar\" ? item.requestSubjectAR : item.requestSubject)\r\n            + \" (\" + item.amount + \" \" + (item.currency || currentContext.userSettings.currency) + \")\"}</h4>\r\n        </div>\r\n        <div className=\"col-8 col-sm-3 text-sm-right\">\r\n          <span className=\"status-badge \">\r\n            {currentContext.language === \"ar\" ? item.requestStatusAR : item.requestStatus}\r\n          </span>\r\n        </div>\r\n        <div className=\"col-4 col-sm-1 text-right\">\r\n          <i className=\"fa fa-chevron-right\"></i>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showTransactionsListingModal}\r\n        onHide={props.hideTransactionsListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon bg-icon\">\r\n              <img src={transactionIconColor} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text d-flex align-items-center\">\r\n              <h4>{local_Strings.TransactionsListingTitle}</h4>\r\n              {currentContext.userRole === Constant.Customer &&\r\n                <a\r\n                  className=\"btnOutlineWhite\"\r\n                  href=\"#\"\r\n                  onClick={props.showNewTransactionModal}\r\n                  id=\"newTransactionBtn\"\r\n                >\r\n                  <i className=\"fa fa-plus-circle\"></i> {local_Strings.TransactionsListingNewButton}\r\n                </a>}\r\n              <a\r\n                className=\"btnOutlineWhite bg-white color-gold\"\r\n                href=\"#\"\r\n                onClick={props.showBeneficiariesListing}\r\n                id=\"newBeneficiaryBtn\"\r\n              >\r\n                {local_Strings.TransactionsListingBeneficiariesButton}\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideTransactionsListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {data && data.length > 0 && !!data[0].transactionDate &&\r\n            <FilterCommonControl\r\n              clearFilter={() => {\r\n                setFilteredData(data);\r\n                if (data.length < rowLimit) {\r\n                  setOffset(data.length);\r\n                } else {\r\n                  setOffset(rowLimit);\r\n                }\r\n              }}\r\n              applyFilter={(filters: ICommonFilter) => {\r\n                console.log(filters);\r\n                const _filteredData = helper.filterTransactionList(\r\n                  data,\r\n                  filters\r\n                );\r\n                setFilteredData(_filteredData);\r\n              }} />}\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"reqList\">\r\n              {filteredData &&\r\n                filteredData.length > 0 &&\r\n                !!filteredData[0].transactionDate ?\r\n                filteredData.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.NoDataToShow)}\r\n            </ul>\r\n          </div>\r\n          <FilterMoreButtonControl showMore={data && filteredData && data.length > rowLimit &&\r\n            offset < filteredData.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransactionsListing;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\RequestsDetails.tsx",["913","914"],"import React, { useContext, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { IRequestDetail } from \"../../Helpers/publicInterfaces\";\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\n\r\ninterface iRequestsDetails {\r\n  showRequestsDetailsModal: boolean;\r\n  hideRequestsDetailsModal: () => void;\r\n  backRequestsListingModal: () => void;\r\n  showNewRequestModal: () => void;\r\n  item: IRequestDetail;\r\n}\r\n\r\nfunction RequestsDetails(props: iRequestsDetails) {\r\n\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.showRequestsDetailsModal}\r\n      onHide={props.hideRequestsDetailsModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      scrollable\r\n      dialogClassName=\"myModal\"\r\n    >\r\n      <Modal.Header>\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"modal-header-text\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={props.backRequestsListingModal}\r\n              className=\"backToAccountsList\"\r\n            >\r\n              <i className=\"fa fa-chevron-left\"></i>\r\n            </a>\r\n          </div>\r\n          <div className=\"ib-text\">\r\n            <h4>{local_Strings.RequestDetailsTitle}</h4>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"close\"\r\n          onClick={props.hideRequestsDetailsModal}\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"box modal-box\">\r\n          <ul className=\"box-list\" id=\"reqList1\">\r\n            <li className=\"pb-3\">\r\n              <div className=\"row align-items-center\">\r\n                <div className=\"col-sm-8\">\r\n                  <h5 className=\"mb-2\">{moment(props.item.requestCreateDate).format(\r\n                    \"DD/MM/YYYY\"\r\n                  )}</h5>\r\n                  <h4>{currentContext.language !== \"ar\" ? props.item.requestSubject : props.item.requestSubjectAR}</h4>\r\n                </div>\r\n                <div className=\"col-sm-4 text-sm-right\">\r\n                  {\" \"}\r\n                  <span className=\"status-badge \">\r\n                    {currentContext.language !== \"ar\" ? props.item.requestStatus : props.item.requestStatusAR}\r\n                  </span>{\" \"}\r\n                </div>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"py-2 px-3\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-4\">\r\n                <label>From</label>\r\n                <input\r\n                  type=\"date\"\r\n                  value=\"2020-06-01\"\r\n                  className=\"form-control\"\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n              <div className=\"col-lg-4\">\r\n                <label>To</label>\r\n                <input\r\n                  type=\"date\"\r\n                  value=\"2020-09-01\"\r\n                  className=\"form-control\"\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"py-2 px-3\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-8\">\r\n                <label>Auditor Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value=\"Rotana Rotana Rotana Rotana Rotana Rotana Rotana\"\r\n                  className=\"form-control\"\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"py-2 px-3\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-8\">\r\n                <label>Comments</label>\r\n                <textarea\r\n                  value=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed\r\n                  do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                  Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n                  laboris nisi ut aliquip ex ea commodo consequat.\"\r\n                  className=\"form-control\"\r\n                  disabled={true}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default RequestsDetails;\r\n","D:\\Advancya\\QFP Portal\\GITProject24Nov2020\\QFB_Portal\\src\\components\\requests\\RequestsListing.tsx",["915","916","917","918","919","920"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport requestIcon from \"../../images/request-icon-color.svg\";\r\nimport FilterDateControl from '../../shared/FilterDateControl';\r\nimport FilterCustomDateControl from '../../shared/FilterCustomDateControl';\r\nimport FilterDropDownControl from '../../shared/FilterDropDownControl';\r\nimport FilterButtonControl from '../../shared/FilterButtonControl';\r\nimport FilterMoreButtonControl from '../../shared/FilterMoreButtonControl';\r\nimport moment from \"moment\";\r\nimport { localStrings as local_Strings } from '../../translations/localStrings';\r\nimport { AuthContext } from \"../../providers/AuthProvider\";\r\nimport { emptyRequestDetail, IRequestFilter, IRequestDetail } from \"../../Helpers/publicInterfaces\";\r\nimport * as helper from \"../../Helpers/helper\";\r\nimport NoResult from \"../../shared/NoResult\";\r\nimport {\r\n  GetAllRequestTypes,\r\n  GetRequestsByCIF,\r\n  SendOTP\r\n} from \"../../services/cmsService\";\r\nimport Constant from \"../../constants/defaultData\";\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport axios from \"axios\";\r\n\r\ninterface IRequestType {\r\n  id: number;\r\n  nameEn: string;\r\n  nameAr: string;\r\n}\r\n\r\ninterface iRequestsListing {\r\n  showRequestsListingModal: boolean;\r\n  hideRequestsListingModal: () => void;\r\n  showRequestsDetailsModal: (detail: IRequestDetail) => void;\r\n  showNewRequestModal: () => void;\r\n}\r\n\r\nfunction RequestsListing(props: iRequestsListing) {\r\n\r\n  const currentContext = useContext(AuthContext);\r\n  local_Strings.setLanguage(currentContext.language);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const rowLimit: number = Constant.RecordPerPage;\r\n  const [offset, setOffset] = useState<number>(rowLimit);\r\n  const [data, setData] = useState<IRequestDetail[]>([emptyRequestDetail]);\r\n  const [filteredData, setFilteredData] = useState<IRequestDetail[]>([emptyRequestDetail]);\r\n  const [filters, setFilter] = useState<IRequestFilter>({\r\n    filterApplied: false,\r\n    DateOption: \"0\",\r\n    StartDate: moment().add(-7, \"days\").toDate(),\r\n    EndDate: moment().toDate(),\r\n    Status: \"0\",\r\n    Type: \"0\",\r\n  });\r\n  const [requestTypes, setRequestTypes] = useState<IRequestType[]>([\r\n    {\r\n      id: 0,\r\n      nameEn: \"\",\r\n      nameAr: \"\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const initialLoadMethod = async () => {\r\n      setLoading(true);\r\n      const requestOne = GetAllRequestTypes();\r\n      const requestTwo = GetRequestsByCIF(currentContext.selectedCIF);\r\n      axios\r\n        .all([requestOne, requestTwo])\r\n        .then((responseData: any) => {\r\n          if (responseData && responseData.length > 0 && isMounted) {\r\n            setRequestTypes(responseData[0] as IRequestType[]);\r\n            const requests = responseData[1] as IRequestDetail[];\r\n\r\n            setData(requests);\r\n            setFilteredData(requests);\r\n\r\n            if (requests.length < rowLimit) {\r\n              setOffset(requests.length);\r\n            }\r\n          }\r\n        })\r\n        .catch((e: any) => console.log(e))\r\n        .finally(() => setLoading(false));\r\n    }\r\n\r\n    if (!!currentContext.selectedCIF) {\r\n      initialLoadMethod();\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [currentContext.selectedCIF]);\r\n\r\n\r\n  const renderItem = (item: IRequestDetail, index: number) => (\r\n    <li className=\"shown\" key={index}>\r\n      {\" \"}\r\n      <a\r\n        href=\"#\"\r\n        className=\"row align-items-center\"\r\n        onClick={() => props.showRequestsDetailsModal(item)}\r\n      >\r\n        <div className=\"col-sm-8\">\r\n          <h5>{moment(item.requestCreateDate).format(\"DD/MM/YYYY\")}</h5>\r\n          <h4>{currentContext.language !== \"ar\" ? item.requestSubject : item.requestSubjectAR}</h4>\r\n        </div>\r\n        <div className=\"col-8 col-sm-3 text-sm-right\">\r\n          {\" \"}\r\n          <span className=\"status-badge \">{currentContext.language !== \"ar\" ? item.requestStatus : item.requestStatusAR}</span>{\" \"}\r\n        </div>\r\n        <div className=\"col-4 col-sm-1 text-right\">\r\n          {\" \"}\r\n          <i className=\"fa fa-chevron-right\"></i>{\" \"}\r\n        </div>\r\n      </a>{\" \"}\r\n    </li>\r\n  );\r\n\r\n  const statusFilterOptions = [\r\n    {\r\n      label: local_Strings.RequestListingFilterStatusOption1,\r\n      value: \"Awaiting acknowledgement\",\r\n    },\r\n    { label: local_Strings.RequestListingFilterStatusOption2, value: \"Closed\" },\r\n    {\r\n      label: local_Strings.RequestListingFilterStatusOption3,\r\n      value: \"In Progress\",\r\n    },\r\n    { label: local_Strings.RequestListingFilterStatusOption4, value: \"Cancelled\" },\r\n  ];\r\n\r\n  const typeFilterOptions = [];\r\n  requestTypes && requestTypes.length > 0 &&\r\n    requestTypes[0].id > 0 &&\r\n    requestTypes.forEach((r: IRequestType) =>\r\n      typeFilterOptions.push({\r\n        label: currentContext.language === \"en\" ? r.nameEn || \"\" : r.nameAr || \"\",\r\n        value: String(r.id),\r\n      })\r\n    );\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.showRequestsListingModal}\r\n        onHide={props.hideRequestsListingModal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        scrollable\r\n        dialogClassName=\"myModal\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"ib-icon bg-icon\">\r\n              <img src={requestIcon} className=\"img-fluid\" />\r\n            </div>\r\n            <div className=\"ib-text d-flex align-items-center\">\r\n              <h4>{local_Strings.RequestListingTitle}</h4>\r\n              {currentContext.userRole === Constant.Customer &&\r\n                <a\r\n                  className=\"btnOutlineWhite\"\r\n                  href=\"#\"\r\n                  onClick={props.showNewRequestModal}\r\n                  id=\"newRequestBtn\"\r\n                >\r\n                  <i className=\"fa fa-plus-circle\"></i>{local_Strings.RequestListingAddButton}\r\n                </a>}\r\n            </div>\r\n          </div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={props.hideRequestsListingModal}\r\n          >\r\n            <span aria-hidden=\"true\">×</span>\r\n          </button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form className=\"filter-box\">\r\n            <div className=\"row headRow align-items-center\">\r\n              <div className=\"col-sm-3\">\r\n                <FilterDateControl value={filters.DateOption}\r\n                  onChange={(_value: string) => setFilter({ ...filters, DateOption: _value })} />\r\n              </div>\r\n              <div className=\"col-sm-3\">\r\n                <FilterDropDownControl label={local_Strings.RequestListingFilterStatus}\r\n                  options={statusFilterOptions} value={filters.Status || \"0\"}\r\n                  onChange={(_value: string) =>\r\n                    setFilter({ ...filters, Status: _value })} />\r\n              </div>\r\n              <div className=\"col-sm-3\">\r\n                <FilterDropDownControl label={local_Strings.RequestListingFilterType}\r\n                  options={typeFilterOptions} value={filters.Type || \"0\"}\r\n                  onChange={(_value: string) =>\r\n                    setFilter({ ...filters, Type: _value })} />\r\n              </div>\r\n              <div className=\"col-sm-3\">\r\n                <FilterButtonControl\r\n                  clearFilter={() => {\r\n                    setFilter({\r\n                      filterApplied: false,\r\n                      DateOption: \"0\",\r\n                      StartDate: moment().toDate(),\r\n                      EndDate: moment().toDate(),\r\n                      Status: \"0\",\r\n                      Type: \"0\",\r\n                    });\r\n                    setFilteredData(data);\r\n                    setOffset(rowLimit);\r\n                  }}\r\n                  applyFilter={() => {\r\n                    setFilter({ ...filters, filterApplied: true });\r\n                    console.log(filters);\r\n                    const _filteredData = helper.filterRequests(\r\n                      data,\r\n                      filters\r\n                    );\r\n                    setFilteredData(_filteredData);\r\n                  }}\r\n                  showClearFilter={filters.filterApplied} />\r\n              </div>\r\n              <FilterCustomDateControl\r\n                onStartDateChange={(_value: string) => setFilter({ ...filters, StartDate: moment(_value).toDate() })}\r\n                onEndDateChange={(_value: string) => setFilter({ ...filters, EndDate: moment(_value).toDate() })}\r\n                StartDate={filters.StartDate}\r\n                EndDate={filters.EndDate}\r\n                showCustomDateFilter={filters.DateOption === \"4\"} />\r\n            </div>\r\n          </form>\r\n          <div className=\"box modal-box\">\r\n            <ul className=\"box-list\" id=\"reqList\">\r\n              {filteredData &&\r\n                filteredData.length > 0 &&\r\n                !!filteredData[0].requestSubject ?\r\n                filteredData.slice(0, offset).map((item, index) => renderItem(item, index)\r\n                ) : NoResult(local_Strings.NoDataToShow)}\r\n            </ul>\r\n          </div>\r\n\r\n          <FilterMoreButtonControl showMore={data && filteredData && data.length > rowLimit &&\r\n            offset < filteredData.length} onClickMore={() => setOffset(offset + 5)} />\r\n          <LoadingOverlay\r\n            active={isLoading}\r\n            spinner={\r\n              <PuffLoader\r\n                size={Constant.SpnnerSize}\r\n                color={Constant.SpinnerColor}\r\n              />\r\n            }\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RequestsListing;\r\n",{"ruleId":"921","replacedBy":"922"},{"ruleId":"923","replacedBy":"924"},{"ruleId":"925","severity":1,"message":"926","line":1,"column":10,"nodeType":"927","messageId":"928","endLine":1,"endColumn":21},{"ruleId":"925","severity":1,"message":"929","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":21},{"ruleId":"925","severity":1,"message":"930","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":13},{"ruleId":"925","severity":1,"message":"931","line":5,"column":10,"nodeType":"927","messageId":"928","endLine":5,"endColumn":24},{"ruleId":"925","severity":1,"message":"932","line":50,"column":11,"nodeType":"927","messageId":"928","endLine":50,"endColumn":21},{"ruleId":"925","severity":1,"message":"933","line":55,"column":11,"nodeType":"927","messageId":"928","endLine":55,"endColumn":18},{"ruleId":"934","severity":1,"message":"935","line":193,"column":50,"nodeType":"936","messageId":"937","endLine":193,"endColumn":52},{"ruleId":"934","severity":1,"message":"935","line":447,"column":19,"nodeType":"936","messageId":"937","endLine":447,"endColumn":21},{"ruleId":"934","severity":1,"message":"935","line":498,"column":39,"nodeType":"936","messageId":"937","endLine":498,"endColumn":41},{"ruleId":"934","severity":1,"message":"935","line":531,"column":29,"nodeType":"936","messageId":"937","endLine":531,"endColumn":31},{"ruleId":"938","severity":1,"message":"939","line":593,"column":19,"nodeType":"936","messageId":"940","endLine":607,"endColumn":6},{"ruleId":"934","severity":1,"message":"935","line":593,"column":31,"nodeType":"936","messageId":"937","endLine":593,"endColumn":33},{"ruleId":"941","severity":1,"message":"942","line":594,"column":9,"nodeType":"943","messageId":"944","endLine":594,"endColumn":11},{"ruleId":"945","severity":1,"message":"946","line":683,"column":22,"nodeType":"947","messageId":"948","endLine":683,"endColumn":34},{"ruleId":"934","severity":1,"message":"935","line":695,"column":29,"nodeType":"936","messageId":"937","endLine":695,"endColumn":31},{"ruleId":"949","severity":1,"message":"950","line":1,"column":1,"nodeType":"951","endLine":16,"endColumn":3},{"ruleId":"925","severity":1,"message":"952","line":4,"column":8,"nodeType":"927","messageId":"928","endLine":4,"endColumn":18},{"ruleId":"925","severity":1,"message":"953","line":11,"column":8,"nodeType":"927","messageId":"928","endLine":11,"endColumn":20},{"ruleId":"925","severity":1,"message":"954","line":13,"column":23,"nodeType":"927","messageId":"928","endLine":13,"endColumn":27},{"ruleId":"925","severity":1,"message":"955","line":16,"column":10,"nodeType":"927","messageId":"928","endLine":16,"endColumn":26},{"ruleId":"925","severity":1,"message":"956","line":66,"column":9,"nodeType":"927","messageId":"928","endLine":66,"endColumn":16},{"ruleId":"957","severity":1,"message":"958","line":142,"column":6,"nodeType":"959","endLine":142,"endColumn":34,"suggestions":"960"},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"925","severity":1,"message":"963","line":9,"column":3,"nodeType":"927","messageId":"928","endLine":9,"endColumn":26},{"ruleId":"925","severity":1,"message":"964","line":19,"column":10,"nodeType":"927","messageId":"928","endLine":19,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":19,"column":27,"nodeType":"927","messageId":"928","endLine":19,"endColumn":45},{"ruleId":"925","severity":1,"message":"966","line":21,"column":10,"nodeType":"927","messageId":"928","endLine":21,"endColumn":19},{"ruleId":"925","severity":1,"message":"967","line":29,"column":7,"nodeType":"927","messageId":"928","endLine":29,"endColumn":16},{"ruleId":"968","severity":1,"message":"969","line":98,"column":23,"nodeType":"970","endLine":98,"endColumn":67},{"ruleId":"925","severity":1,"message":"971","line":8,"column":8,"nodeType":"927","messageId":"928","endLine":8,"endColumn":25},{"ruleId":"925","severity":1,"message":"956","line":17,"column":9,"nodeType":"927","messageId":"928","endLine":17,"endColumn":16},{"ruleId":"925","severity":1,"message":"972","line":22,"column":5,"nodeType":"927","messageId":"928","endLine":22,"endColumn":33},{"ruleId":"925","severity":1,"message":"973","line":25,"column":10,"nodeType":"927","messageId":"928","endLine":25,"endColumn":30},{"ruleId":"974","severity":1,"message":"975","line":78,"column":23,"nodeType":"970","endLine":89,"endColumn":24},{"ruleId":"974","severity":1,"message":"975","line":94,"column":23,"nodeType":"970","endLine":105,"endColumn":24},{"ruleId":"974","severity":1,"message":"975","line":110,"column":23,"nodeType":"970","endLine":121,"endColumn":24},{"ruleId":"974","severity":1,"message":"975","line":126,"column":23,"nodeType":"970","endLine":137,"endColumn":24},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"925","severity":1,"message":"976","line":8,"column":10,"nodeType":"927","messageId":"928","endLine":8,"endColumn":24},{"ruleId":"925","severity":1,"message":"964","line":15,"column":10,"nodeType":"927","messageId":"928","endLine":15,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":15,"column":27,"nodeType":"927","messageId":"928","endLine":15,"endColumn":45},{"ruleId":"925","severity":1,"message":"966","line":17,"column":10,"nodeType":"927","messageId":"928","endLine":17,"endColumn":19},{"ruleId":"925","severity":1,"message":"967","line":25,"column":7,"nodeType":"927","messageId":"928","endLine":25,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":10,"column":9,"nodeType":"970","endLine":10,"endColumn":21},{"ruleId":"974","severity":1,"message":"975","line":10,"column":9,"nodeType":"970","endLine":10,"endColumn":70},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"978","line":1,"column":40,"nodeType":"927","messageId":"928","endLine":1,"endColumn":48},{"ruleId":"974","severity":1,"message":"975","line":13,"column":11,"nodeType":"970","endLine":13,"endColumn":40},{"ruleId":"968","severity":1,"message":"969","line":14,"column":13,"nodeType":"970","endLine":14,"endColumn":64},{"ruleId":"974","severity":1,"message":"975","line":16,"column":11,"nodeType":"970","endLine":16,"endColumn":40},{"ruleId":"968","severity":1,"message":"969","line":17,"column":13,"nodeType":"970","endLine":17,"endColumn":65},{"ruleId":"925","severity":1,"message":"979","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":20},{"ruleId":"925","severity":1,"message":"980","line":4,"column":8,"nodeType":"927","messageId":"928","endLine":4,"endColumn":18},{"ruleId":"925","severity":1,"message":"981","line":9,"column":10,"nodeType":"927","messageId":"928","endLine":9,"endColumn":14},{"ruleId":"925","severity":1,"message":"956","line":17,"column":9,"nodeType":"927","messageId":"928","endLine":17,"endColumn":16},{"ruleId":"968","severity":1,"message":"969","line":54,"column":11,"nodeType":"970","endLine":54,"endColumn":59},{"ruleId":"974","severity":1,"message":"975","line":59,"column":11,"nodeType":"970","endLine":63,"endColumn":12},{"ruleId":"968","severity":1,"message":"969","line":23,"column":11,"nodeType":"970","endLine":23,"endColumn":60},{"ruleId":"974","severity":1,"message":"975","line":28,"column":11,"nodeType":"970","endLine":32,"endColumn":12},{"ruleId":"925","severity":1,"message":"981","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":14},{"ruleId":"925","severity":1,"message":"982","line":9,"column":13,"nodeType":"927","messageId":"928","endLine":9,"endColumn":19},{"ruleId":"925","severity":1,"message":"956","line":23,"column":9,"nodeType":"927","messageId":"928","endLine":23,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":117,"column":17,"nodeType":"970","endLine":117,"endColumn":52},{"ruleId":"925","severity":1,"message":"982","line":8,"column":13,"nodeType":"927","messageId":"928","endLine":8,"endColumn":19},{"ruleId":"974","severity":1,"message":"975","line":133,"column":17,"nodeType":"970","endLine":134,"endColumn":76},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"925","severity":1,"message":"983","line":18,"column":8,"nodeType":"927","messageId":"928","endLine":18,"endColumn":22},{"ruleId":"925","severity":1,"message":"984","line":19,"column":8,"nodeType":"927","messageId":"928","endLine":19,"endColumn":18},{"ruleId":"925","severity":1,"message":"964","line":27,"column":10,"nodeType":"927","messageId":"928","endLine":27,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":27,"column":27,"nodeType":"927","messageId":"928","endLine":27,"endColumn":45},{"ruleId":"925","severity":1,"message":"966","line":32,"column":10,"nodeType":"927","messageId":"928","endLine":32,"endColumn":19},{"ruleId":"925","severity":1,"message":"967","line":45,"column":7,"nodeType":"927","messageId":"928","endLine":45,"endColumn":16},{"ruleId":"974","severity":1,"message":"985","line":173,"column":25,"nodeType":"970","endLine":191,"endColumn":26},{"ruleId":"974","severity":1,"message":"985","line":194,"column":25,"nodeType":"970","endLine":203,"endColumn":26},{"ruleId":"974","severity":1,"message":"975","line":207,"column":25,"nodeType":"970","endLine":217,"endColumn":26},{"ruleId":"968","severity":1,"message":"969","line":220,"column":31,"nodeType":"970","endLine":220,"endColumn":75},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"925","severity":1,"message":"964","line":21,"column":10,"nodeType":"927","messageId":"928","endLine":21,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":21,"column":27,"nodeType":"927","messageId":"928","endLine":21,"endColumn":45},{"ruleId":"925","severity":1,"message":"967","line":37,"column":7,"nodeType":"927","messageId":"928","endLine":37,"endColumn":16},{"ruleId":"974","severity":1,"message":"985","line":165,"column":25,"nodeType":"970","endLine":183,"endColumn":26},{"ruleId":"974","severity":1,"message":"985","line":186,"column":25,"nodeType":"970","endLine":195,"endColumn":26},{"ruleId":"974","severity":1,"message":"975","line":199,"column":25,"nodeType":"970","endLine":209,"endColumn":26},{"ruleId":"968","severity":1,"message":"969","line":212,"column":31,"nodeType":"970","endLine":212,"endColumn":75},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"925","severity":1,"message":"964","line":23,"column":10,"nodeType":"927","messageId":"928","endLine":23,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":23,"column":27,"nodeType":"927","messageId":"928","endLine":23,"endColumn":45},{"ruleId":"925","severity":1,"message":"967","line":38,"column":7,"nodeType":"927","messageId":"928","endLine":38,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":144,"column":25,"nodeType":"970","endLine":154,"endColumn":26},{"ruleId":"968","severity":1,"message":"969","line":157,"column":31,"nodeType":"970","endLine":157,"endColumn":75},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"925","severity":1,"message":"964","line":31,"column":10,"nodeType":"927","messageId":"928","endLine":31,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":31,"column":27,"nodeType":"927","messageId":"928","endLine":31,"endColumn":45},{"ruleId":"925","severity":1,"message":"967","line":47,"column":7,"nodeType":"927","messageId":"928","endLine":47,"endColumn":16},{"ruleId":"974","severity":1,"message":"985","line":191,"column":25,"nodeType":"970","endLine":209,"endColumn":26},{"ruleId":"974","severity":1,"message":"985","line":212,"column":25,"nodeType":"970","endLine":221,"endColumn":26},{"ruleId":"974","severity":1,"message":"975","line":225,"column":25,"nodeType":"970","endLine":229,"endColumn":26},{"ruleId":"968","severity":1,"message":"969","line":242,"column":31,"nodeType":"970","endLine":242,"endColumn":75},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"982","line":16,"column":13,"nodeType":"927","messageId":"928","endLine":16,"endColumn":19},{"ruleId":"957","severity":1,"message":"989","line":71,"column":6,"nodeType":"959","endLine":71,"endColumn":30,"suggestions":"990"},{"ruleId":"968","severity":1,"message":"969","line":78,"column":13,"nodeType":"970","endLine":78,"endColumn":57},{"ruleId":"991","severity":1,"message":"992","line":91,"column":56,"nodeType":"993","endLine":91,"endColumn":71},{"ruleId":"974","severity":1,"message":"975","line":114,"column":15,"nodeType":"970","endLine":118,"endColumn":16},{"ruleId":"968","severity":1,"message":"969","line":152,"column":21,"nodeType":"970","endLine":152,"endColumn":65},{"ruleId":"991","severity":1,"message":"992","line":165,"column":64,"nodeType":"993","endLine":165,"endColumn":79},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"994","line":22,"column":21,"nodeType":"927","messageId":"928","endLine":22,"endColumn":31},{"ruleId":"974","severity":1,"message":"975","line":49,"column":9,"nodeType":"970","endLine":49,"endColumn":75},{"ruleId":"974","severity":1,"message":"975","line":67,"column":15,"nodeType":"970","endLine":71,"endColumn":16},{"ruleId":"968","severity":1,"message":"969","line":9,"column":9,"nodeType":"970","endLine":9,"endColumn":60},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"978","line":1,"column":40,"nodeType":"927","messageId":"928","endLine":1,"endColumn":48},{"ruleId":"974","severity":1,"message":"985","line":35,"column":9,"nodeType":"970","endLine":38,"endColumn":10},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"978","line":1,"column":40,"nodeType":"927","messageId":"928","endLine":1,"endColumn":48},{"ruleId":"925","severity":1,"message":"982","line":4,"column":13,"nodeType":"927","messageId":"928","endLine":4,"endColumn":19},{"ruleId":"925","severity":1,"message":"956","line":9,"column":9,"nodeType":"927","messageId":"928","endLine":9,"endColumn":16},{"ruleId":"925","severity":1,"message":"964","line":12,"column":10,"nodeType":"927","messageId":"928","endLine":12,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":12,"column":27,"nodeType":"927","messageId":"928","endLine":12,"endColumn":45},{"ruleId":"925","severity":1,"message":"995","line":13,"column":10,"nodeType":"927","messageId":"928","endLine":13,"endColumn":29},{"ruleId":"925","severity":1,"message":"996","line":13,"column":31,"nodeType":"927","messageId":"928","endLine":13,"endColumn":53},{"ruleId":"968","severity":1,"message":"969","line":75,"column":15,"nodeType":"970","endLine":75,"endColumn":59},{"ruleId":"925","severity":1,"message":"978","line":1,"column":17,"nodeType":"927","messageId":"928","endLine":1,"endColumn":25},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"925","severity":1,"message":"998","line":14,"column":9,"nodeType":"927","messageId":"928","endLine":14,"endColumn":41},{"ruleId":"974","severity":1,"message":"975","line":32,"column":15,"nodeType":"970","endLine":38,"endColumn":16},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"925","severity":1,"message":"964","line":15,"column":10,"nodeType":"927","messageId":"928","endLine":15,"endColumn":25},{"ruleId":"925","severity":1,"message":"965","line":15,"column":27,"nodeType":"927","messageId":"928","endLine":15,"endColumn":45},{"ruleId":"925","severity":1,"message":"995","line":16,"column":10,"nodeType":"927","messageId":"928","endLine":16,"endColumn":29},{"ruleId":"925","severity":1,"message":"996","line":16,"column":31,"nodeType":"927","messageId":"928","endLine":16,"endColumn":53},{"ruleId":"968","severity":1,"message":"969","line":31,"column":15,"nodeType":"970","endLine":31,"endColumn":63},{"ruleId":"974","severity":1,"message":"975","line":51,"column":17,"nodeType":"970","endLine":57,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":72,"column":17,"nodeType":"970","endLine":78,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":93,"column":17,"nodeType":"970","endLine":99,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":114,"column":17,"nodeType":"970","endLine":120,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":135,"column":17,"nodeType":"970","endLine":141,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":156,"column":17,"nodeType":"970","endLine":162,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":177,"column":17,"nodeType":"970","endLine":183,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":198,"column":17,"nodeType":"970","endLine":204,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":219,"column":17,"nodeType":"970","endLine":225,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":48,"column":9,"nodeType":"970","endLine":53,"endColumn":10},{"ruleId":"968","severity":1,"message":"969","line":76,"column":17,"nodeType":"970","endLine":76,"endColumn":68},{"ruleId":"974","severity":1,"message":"975","line":86,"column":15,"nodeType":"970","endLine":90,"endColumn":16},{"ruleId":"925","severity":1,"message":"978","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":37},{"ruleId":"968","severity":1,"message":"969","line":20,"column":11,"nodeType":"970","endLine":20,"endColumn":52},{"ruleId":"925","severity":1,"message":"978","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":37},{"ruleId":"925","severity":1,"message":"999","line":1,"column":40,"nodeType":"927","messageId":"928","endLine":1,"endColumn":46},{"ruleId":"925","severity":1,"message":"1000","line":22,"column":11,"nodeType":"927","messageId":"928","endLine":22,"endColumn":30},{"ruleId":"925","severity":1,"message":"1001","line":23,"column":11,"nodeType":"927","messageId":"928","endLine":23,"endColumn":26},{"ruleId":"974","severity":1,"message":"975","line":86,"column":25,"nodeType":"970","endLine":86,"endColumn":60},{"ruleId":"968","severity":1,"message":"969","line":87,"column":27,"nodeType":"970","endLine":87,"endColumn":72},{"ruleId":"974","severity":1,"message":"975","line":101,"column":25,"nodeType":"970","endLine":101,"endColumn":65},{"ruleId":"968","severity":1,"message":"969","line":103,"column":27,"nodeType":"970","endLine":103,"endColumn":74},{"ruleId":"974","severity":1,"message":"975","line":105,"column":25,"nodeType":"970","endLine":105,"endColumn":65},{"ruleId":"968","severity":1,"message":"969","line":107,"column":27,"nodeType":"970","endLine":107,"endColumn":76},{"ruleId":"974","severity":1,"message":"975","line":123,"column":25,"nodeType":"970","endLine":123,"endColumn":60},{"ruleId":"968","severity":1,"message":"969","line":124,"column":27,"nodeType":"970","endLine":124,"endColumn":72},{"ruleId":"974","severity":1,"message":"975","line":132,"column":17,"nodeType":"970","endLine":132,"endColumn":67},{"ruleId":"957","severity":1,"message":"1002","line":30,"column":8,"nodeType":"959","endLine":30,"endColumn":21,"suggestions":"1003"},{"ruleId":"925","severity":1,"message":"978","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":37},{"ruleId":"974","severity":1,"message":"985","line":17,"column":13,"nodeType":"970","endLine":21,"endColumn":14},{"ruleId":"925","severity":1,"message":"999","line":1,"column":51,"nodeType":"927","messageId":"928","endLine":1,"endColumn":57},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":125,"column":15,"nodeType":"970","endLine":129,"endColumn":16},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"1004","line":4,"column":10,"nodeType":"927","messageId":"928","endLine":4,"endColumn":26},{"ruleId":"925","severity":1,"message":"994","line":28,"column":21,"nodeType":"927","messageId":"928","endLine":28,"endColumn":31},{"ruleId":"974","severity":1,"message":"975","line":39,"column":7,"nodeType":"970","endLine":43,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":46,"column":13,"nodeType":"970","endLine":46,"endColumn":57},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"925","severity":1,"message":"1005","line":6,"column":10,"nodeType":"927","messageId":"928","endLine":6,"endColumn":28},{"ruleId":"925","severity":1,"message":"1006","line":18,"column":10,"nodeType":"927","messageId":"928","endLine":18,"endColumn":23},{"ruleId":"925","severity":1,"message":"1007","line":18,"column":25,"nodeType":"927","messageId":"928","endLine":18,"endColumn":34},{"ruleId":"925","severity":1,"message":"1008","line":35,"column":9,"nodeType":"927","messageId":"928","endLine":35,"endColumn":34},{"ruleId":"957","severity":1,"message":"1009","line":107,"column":6,"nodeType":"959","endLine":107,"endColumn":18,"suggestions":"1010"},{"ruleId":"974","severity":1,"message":"975","line":128,"column":15,"nodeType":"970","endLine":132,"endColumn":16},{"ruleId":"925","severity":1,"message":"999","line":1,"column":51,"nodeType":"927","messageId":"928","endLine":1,"endColumn":57},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"957","severity":1,"message":"1009","line":170,"column":6,"nodeType":"959","endLine":170,"endColumn":32,"suggestions":"1011"},{"ruleId":"974","severity":1,"message":"975","line":191,"column":15,"nodeType":"970","endLine":195,"endColumn":16},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"925","severity":1,"message":"1012","line":33,"column":9,"nodeType":"927","messageId":"928","endLine":33,"endColumn":38},{"ruleId":"974","severity":1,"message":"975","line":102,"column":15,"nodeType":"970","endLine":106,"endColumn":16},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"974","severity":1,"message":"975","line":39,"column":7,"nodeType":"970","endLine":43,"endColumn":8},{"ruleId":"925","severity":1,"message":"1013","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":4,"column":10,"nodeType":"927","messageId":"928","endLine":4,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":4,"column":18,"nodeType":"927","messageId":"928","endLine":4,"endColumn":23},{"ruleId":"974","severity":1,"message":"975","line":57,"column":9,"nodeType":"970","endLine":57,"endColumn":78},{"ruleId":"968","severity":1,"message":"969","line":58,"column":11,"nodeType":"970","endLine":58,"endColumn":61},{"ruleId":"925","severity":1,"message":"1013","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":4,"column":10,"nodeType":"927","messageId":"928","endLine":4,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":4,"column":18,"nodeType":"927","messageId":"928","endLine":4,"endColumn":23},{"ruleId":"974","severity":1,"message":"975","line":106,"column":9,"nodeType":"970","endLine":110,"endColumn":10},{"ruleId":"968","severity":1,"message":"969","line":111,"column":11,"nodeType":"970","endLine":111,"endColumn":65},{"ruleId":"925","severity":1,"message":"1014","line":2,"column":8,"nodeType":"927","messageId":"928","endLine":2,"endColumn":20},{"ruleId":"925","severity":1,"message":"981","line":8,"column":10,"nodeType":"927","messageId":"928","endLine":8,"endColumn":14},{"ruleId":"925","severity":1,"message":"1015","line":11,"column":10,"nodeType":"927","messageId":"928","endLine":11,"endColumn":24},{"ruleId":"925","severity":1,"message":"1016","line":11,"column":26,"nodeType":"927","messageId":"928","endLine":11,"endColumn":38},{"ruleId":"925","severity":1,"message":"956","line":17,"column":9,"nodeType":"927","messageId":"928","endLine":17,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":60,"column":9,"nodeType":"970","endLine":60,"endColumn":80},{"ruleId":"968","severity":1,"message":"969","line":61,"column":11,"nodeType":"970","endLine":61,"endColumn":59},{"ruleId":"925","severity":1,"message":"961","line":3,"column":10,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":3,"column":18,"nodeType":"927","messageId":"928","endLine":3,"endColumn":23},{"ruleId":"968","severity":1,"message":"969","line":32,"column":13,"nodeType":"970","endLine":32,"endColumn":63},{"ruleId":"974","severity":1,"message":"975","line":34,"column":11,"nodeType":"970","endLine":34,"endColumn":90},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"968","severity":1,"message":"969","line":42,"column":13,"nodeType":"970","endLine":42,"endColumn":63},{"ruleId":"974","severity":1,"message":"975","line":44,"column":11,"nodeType":"970","endLine":44,"endColumn":81},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":2,"column":18,"nodeType":"927","messageId":"928","endLine":2,"endColumn":23},{"ruleId":"968","severity":1,"message":"969","line":42,"column":13,"nodeType":"970","endLine":42,"endColumn":57},{"ruleId":"974","severity":1,"message":"975","line":44,"column":11,"nodeType":"970","endLine":44,"endColumn":75},{"ruleId":"925","severity":1,"message":"961","line":3,"column":10,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":3,"column":18,"nodeType":"927","messageId":"928","endLine":3,"endColumn":23},{"ruleId":"968","severity":1,"message":"969","line":30,"column":13,"nodeType":"970","endLine":30,"endColumn":59},{"ruleId":"974","severity":1,"message":"975","line":32,"column":11,"nodeType":"970","endLine":36,"endColumn":12},{"ruleId":"925","severity":1,"message":"961","line":4,"column":10,"nodeType":"927","messageId":"928","endLine":4,"endColumn":16},{"ruleId":"925","severity":1,"message":"962","line":4,"column":18,"nodeType":"927","messageId":"928","endLine":4,"endColumn":23},{"ruleId":"925","severity":1,"message":"1017","line":11,"column":10,"nodeType":"927","messageId":"928","endLine":11,"endColumn":22},{"ruleId":"925","severity":1,"message":"1018","line":11,"column":24,"nodeType":"927","messageId":"928","endLine":11,"endColumn":32},{"ruleId":"968","severity":1,"message":"969","line":27,"column":13,"nodeType":"970","endLine":27,"endColumn":60},{"ruleId":"974","severity":1,"message":"975","line":29,"column":11,"nodeType":"970","endLine":29,"endColumn":88},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"995","line":12,"column":10,"nodeType":"927","messageId":"928","endLine":12,"endColumn":29},{"ruleId":"925","severity":1,"message":"996","line":12,"column":31,"nodeType":"927","messageId":"928","endLine":12,"endColumn":53},{"ruleId":"974","severity":1,"message":"975","line":49,"column":15,"nodeType":"970","endLine":53,"endColumn":16},{"ruleId":"974","severity":1,"message":"985","line":441,"column":11,"nodeType":"970","endLine":445,"endColumn":12},{"ruleId":"974","severity":1,"message":"975","line":451,"column":11,"nodeType":"970","endLine":461,"endColumn":12},{"ruleId":"968","severity":1,"message":"969","line":462,"column":13,"nodeType":"970","endLine":462,"endColumn":58},{"ruleId":"925","severity":1,"message":"978","line":1,"column":17,"nodeType":"927","messageId":"928","endLine":1,"endColumn":25},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"925","severity":1,"message":"1019","line":11,"column":9,"nodeType":"927","messageId":"928","endLine":11,"endColumn":33},{"ruleId":"974","severity":1,"message":"975","line":29,"column":15,"nodeType":"970","endLine":33,"endColumn":16},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"1020","line":5,"column":8,"nodeType":"927","messageId":"928","endLine":5,"endColumn":14},{"ruleId":"925","severity":1,"message":"982","line":8,"column":13,"nodeType":"927","messageId":"928","endLine":8,"endColumn":19},{"ruleId":"957","severity":1,"message":"1021","line":57,"column":6,"nodeType":"959","endLine":57,"endColumn":34,"suggestions":"1022"},{"ruleId":"974","severity":1,"message":"975","line":61,"column":7,"nodeType":"970","endLine":65,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":98,"column":15,"nodeType":"970","endLine":98,"endColumn":65},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"995","line":15,"column":10,"nodeType":"927","messageId":"928","endLine":15,"endColumn":29},{"ruleId":"925","severity":1,"message":"996","line":15,"column":31,"nodeType":"927","messageId":"928","endLine":15,"endColumn":53},{"ruleId":"974","severity":1,"message":"975","line":56,"column":15,"nodeType":"970","endLine":62,"endColumn":16},{"ruleId":"974","severity":1,"message":"985","line":438,"column":11,"nodeType":"970","endLine":442,"endColumn":12},{"ruleId":"974","severity":1,"message":"975","line":448,"column":11,"nodeType":"970","endLine":458,"endColumn":12},{"ruleId":"968","severity":1,"message":"969","line":459,"column":13,"nodeType":"970","endLine":459,"endColumn":58},{"ruleId":"925","severity":1,"message":"1023","line":6,"column":8,"nodeType":"927","messageId":"928","endLine":6,"endColumn":16},{"ruleId":"925","severity":1,"message":"983","line":7,"column":8,"nodeType":"927","messageId":"928","endLine":7,"endColumn":22},{"ruleId":"925","severity":1,"message":"984","line":8,"column":8,"nodeType":"927","messageId":"928","endLine":8,"endColumn":18},{"ruleId":"925","severity":1,"message":"966","line":24,"column":10,"nodeType":"927","messageId":"928","endLine":24,"endColumn":19},{"ruleId":"925","severity":1,"message":"1024","line":25,"column":10,"nodeType":"927","messageId":"928","endLine":25,"endColumn":14},{"ruleId":"957","severity":1,"message":"1025","line":45,"column":6,"nodeType":"959","endLine":45,"endColumn":8,"suggestions":"1026"},{"ruleId":"974","severity":1,"message":"975","line":60,"column":13,"nodeType":"970","endLine":64,"endColumn":14},{"ruleId":"974","severity":1,"message":"975","line":132,"column":13,"nodeType":"970","endLine":137,"endColumn":14},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"995","line":16,"column":10,"nodeType":"927","messageId":"928","endLine":16,"endColumn":29},{"ruleId":"925","severity":1,"message":"996","line":16,"column":31,"nodeType":"927","messageId":"928","endLine":16,"endColumn":53},{"ruleId":"974","severity":1,"message":"975","line":57,"column":15,"nodeType":"970","endLine":63,"endColumn":16},{"ruleId":"974","severity":1,"message":"985","line":416,"column":11,"nodeType":"970","endLine":420,"endColumn":12},{"ruleId":"974","severity":1,"message":"975","line":426,"column":11,"nodeType":"970","endLine":436,"endColumn":12},{"ruleId":"968","severity":1,"message":"969","line":437,"column":13,"nodeType":"970","endLine":437,"endColumn":58},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"1020","line":5,"column":8,"nodeType":"927","messageId":"928","endLine":5,"endColumn":14},{"ruleId":"925","severity":1,"message":"982","line":8,"column":13,"nodeType":"927","messageId":"928","endLine":8,"endColumn":19},{"ruleId":"957","severity":1,"message":"1021","line":57,"column":6,"nodeType":"959","endLine":57,"endColumn":34,"suggestions":"1027"},{"ruleId":"974","severity":1,"message":"975","line":61,"column":7,"nodeType":"970","endLine":65,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":99,"column":15,"nodeType":"970","endLine":99,"endColumn":65},{"ruleId":"925","severity":1,"message":"982","line":8,"column":13,"nodeType":"927","messageId":"928","endLine":8,"endColumn":19},{"ruleId":"957","severity":1,"message":"1021","line":49,"column":6,"nodeType":"959","endLine":49,"endColumn":8,"suggestions":"1028"},{"ruleId":"974","severity":1,"message":"975","line":53,"column":7,"nodeType":"970","endLine":57,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":81,"column":15,"nodeType":"970","endLine":81,"endColumn":60},{"ruleId":"957","severity":1,"message":"1029","line":64,"column":6,"nodeType":"959","endLine":64,"endColumn":34,"suggestions":"1030"},{"ruleId":"974","severity":1,"message":"975","line":80,"column":15,"nodeType":"970","endLine":86,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":140,"column":24,"nodeType":"970","endLine":140,"endColumn":36},{"ruleId":"968","severity":1,"message":"969","line":140,"column":36,"nodeType":"970","endLine":140,"endColumn":81},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"1020","line":5,"column":8,"nodeType":"927","messageId":"928","endLine":5,"endColumn":14},{"ruleId":"925","severity":1,"message":"982","line":8,"column":13,"nodeType":"927","messageId":"928","endLine":8,"endColumn":19},{"ruleId":"957","severity":1,"message":"1021","line":56,"column":6,"nodeType":"959","endLine":56,"endColumn":34,"suggestions":"1031"},{"ruleId":"974","severity":1,"message":"975","line":60,"column":7,"nodeType":"970","endLine":64,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":98,"column":15,"nodeType":"970","endLine":98,"endColumn":63},{"ruleId":"925","severity":1,"message":"1032","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":17},{"ruleId":"925","severity":1,"message":"1020","line":4,"column":8,"nodeType":"927","messageId":"928","endLine":4,"endColumn":14},{"ruleId":"957","severity":1,"message":"1033","line":46,"column":6,"nodeType":"959","endLine":46,"endColumn":8,"suggestions":"1034"},{"ruleId":"974","severity":1,"message":"975","line":61,"column":13,"nodeType":"970","endLine":65,"endColumn":14},{"ruleId":"974","severity":1,"message":"975","line":131,"column":13,"nodeType":"970","endLine":136,"endColumn":14},{"ruleId":"925","severity":1,"message":"1035","line":29,"column":9,"nodeType":"927","messageId":"928","endLine":29,"endColumn":22},{"ruleId":"957","severity":1,"message":"1036","line":64,"column":6,"nodeType":"959","endLine":64,"endColumn":34,"suggestions":"1037"},{"ruleId":"974","severity":1,"message":"975","line":80,"column":15,"nodeType":"970","endLine":86,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":144,"column":24,"nodeType":"970","endLine":144,"endColumn":36},{"ruleId":"968","severity":1,"message":"969","line":144,"column":36,"nodeType":"970","endLine":144,"endColumn":81},{"ruleId":"925","severity":1,"message":"1035","line":28,"column":9,"nodeType":"927","messageId":"928","endLine":28,"endColumn":22},{"ruleId":"957","severity":1,"message":"1036","line":63,"column":6,"nodeType":"959","endLine":63,"endColumn":34,"suggestions":"1038"},{"ruleId":"974","severity":1,"message":"975","line":79,"column":15,"nodeType":"970","endLine":85,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":141,"column":24,"nodeType":"970","endLine":141,"endColumn":36},{"ruleId":"968","severity":1,"message":"969","line":141,"column":36,"nodeType":"970","endLine":141,"endColumn":81},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"1020","line":5,"column":8,"nodeType":"927","messageId":"928","endLine":5,"endColumn":14},{"ruleId":"925","severity":1,"message":"982","line":8,"column":13,"nodeType":"927","messageId":"928","endLine":8,"endColumn":19},{"ruleId":"957","severity":1,"message":"1021","line":55,"column":6,"nodeType":"959","endLine":55,"endColumn":34,"suggestions":"1039"},{"ruleId":"974","severity":1,"message":"975","line":59,"column":7,"nodeType":"970","endLine":63,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":97,"column":15,"nodeType":"970","endLine":97,"endColumn":66},{"ruleId":"925","severity":1,"message":"1020","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":14},{"ruleId":"957","severity":1,"message":"1040","line":46,"column":6,"nodeType":"959","endLine":46,"endColumn":8,"suggestions":"1041"},{"ruleId":"974","severity":1,"message":"975","line":61,"column":13,"nodeType":"970","endLine":65,"endColumn":14},{"ruleId":"974","severity":1,"message":"975","line":142,"column":13,"nodeType":"970","endLine":147,"endColumn":14},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"988","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":29},{"ruleId":"925","severity":1,"message":"1042","line":5,"column":10,"nodeType":"927","messageId":"928","endLine":5,"endColumn":26},{"ruleId":"925","severity":1,"message":"994","line":23,"column":23,"nodeType":"927","messageId":"928","endLine":23,"endColumn":33},{"ruleId":"925","severity":1,"message":"977","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":38},{"ruleId":"925","severity":1,"message":"1043","line":8,"column":8,"nodeType":"927","messageId":"928","endLine":8,"endColumn":29},{"ruleId":"957","severity":1,"message":"1044","line":60,"column":6,"nodeType":"959","endLine":60,"endColumn":34,"suggestions":"1045"},{"ruleId":"974","severity":1,"message":"975","line":76,"column":15,"nodeType":"970","endLine":80,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":136,"column":24,"nodeType":"970","endLine":136,"endColumn":36},{"ruleId":"968","severity":1,"message":"969","line":136,"column":36,"nodeType":"970","endLine":136,"endColumn":81},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"982","line":7,"column":13,"nodeType":"927","messageId":"928","endLine":7,"endColumn":19},{"ruleId":"957","severity":1,"message":"1021","line":56,"column":6,"nodeType":"959","endLine":56,"endColumn":34,"suggestions":"1046"},{"ruleId":"974","severity":1,"message":"975","line":60,"column":7,"nodeType":"970","endLine":64,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":98,"column":15,"nodeType":"970","endLine":98,"endColumn":59},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"997","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":73,"column":15,"nodeType":"970","endLine":77,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":119,"column":21,"nodeType":"970","endLine":120,"endColumn":32},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"941","severity":1,"message":"1047","line":16,"column":24,"nodeType":"943","messageId":"944","endLine":16,"endColumn":26},{"ruleId":"974","severity":1,"message":"975","line":43,"column":15,"nodeType":"970","endLine":47,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":158,"column":19,"nodeType":"970","endLine":158,"endColumn":31},{"ruleId":"968","severity":1,"message":"969","line":181,"column":17,"nodeType":"970","endLine":181,"endColumn":73},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"941","severity":1,"message":"1047","line":16,"column":24,"nodeType":"943","messageId":"944","endLine":16,"endColumn":26},{"ruleId":"925","severity":1,"message":"1048","line":23,"column":9,"nodeType":"927","messageId":"928","endLine":23,"endColumn":32},{"ruleId":"974","severity":1,"message":"975","line":43,"column":15,"nodeType":"970","endLine":47,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":255,"column":19,"nodeType":"970","endLine":255,"endColumn":31},{"ruleId":"968","severity":1,"message":"969","line":278,"column":17,"nodeType":"970","endLine":278,"endColumn":77},{"ruleId":"925","severity":1,"message":"978","line":1,"column":17,"nodeType":"927","messageId":"928","endLine":1,"endColumn":25},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"925","severity":1,"message":"1032","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":17},{"ruleId":"974","severity":1,"message":"975","line":27,"column":13,"nodeType":"970","endLine":31,"endColumn":14},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"1049","line":3,"column":8,"nodeType":"927","messageId":"928","endLine":3,"endColumn":28},{"ruleId":"925","severity":1,"message":"964","line":15,"column":10,"nodeType":"927","messageId":"928","endLine":15,"endColumn":25},{"ruleId":"925","severity":1,"message":"1050","line":16,"column":10,"nodeType":"927","messageId":"928","endLine":16,"endColumn":35},{"ruleId":"925","severity":1,"message":"1051","line":20,"column":9,"nodeType":"927","messageId":"928","endLine":20,"endColumn":20},{"ruleId":"925","severity":1,"message":"1052","line":24,"column":9,"nodeType":"927","messageId":"928","endLine":24,"endColumn":20},{"ruleId":"925","severity":1,"message":"1053","line":30,"column":9,"nodeType":"927","messageId":"928","endLine":30,"endColumn":41},{"ruleId":"941","severity":1,"message":"942","line":31,"column":24,"nodeType":"943","messageId":"944","endLine":31,"endColumn":26},{"ruleId":"974","severity":1,"message":"975","line":52,"column":15,"nodeType":"970","endLine":58,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":64,"column":15,"nodeType":"970","endLine":69,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":86,"column":17,"nodeType":"970","endLine":92,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":106,"column":17,"nodeType":"970","endLine":112,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":126,"column":17,"nodeType":"970","endLine":132,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":146,"column":17,"nodeType":"970","endLine":152,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":166,"column":17,"nodeType":"970","endLine":172,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":186,"column":17,"nodeType":"970","endLine":192,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":206,"column":17,"nodeType":"970","endLine":212,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":226,"column":17,"nodeType":"970","endLine":232,"endColumn":18},{"ruleId":"974","severity":1,"message":"985","line":249,"column":13,"nodeType":"970","endLine":253,"endColumn":14},{"ruleId":"925","severity":1,"message":"986","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":19},{"ruleId":"925","severity":1,"message":"961","line":2,"column":21,"nodeType":"927","messageId":"928","endLine":2,"endColumn":27},{"ruleId":"925","severity":1,"message":"987","line":2,"column":29,"nodeType":"927","messageId":"928","endLine":2,"endColumn":33},{"ruleId":"925","severity":1,"message":"988","line":2,"column":35,"nodeType":"927","messageId":"928","endLine":2,"endColumn":43},{"ruleId":"941","severity":1,"message":"1047","line":16,"column":24,"nodeType":"943","messageId":"944","endLine":16,"endColumn":26},{"ruleId":"974","severity":1,"message":"975","line":43,"column":15,"nodeType":"970","endLine":47,"endColumn":16},{"ruleId":"974","severity":1,"message":"975","line":183,"column":19,"nodeType":"970","endLine":183,"endColumn":31},{"ruleId":"968","severity":1,"message":"969","line":206,"column":17,"nodeType":"970","endLine":206,"endColumn":77},{"ruleId":"925","severity":1,"message":"978","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":37},{"ruleId":"925","severity":1,"message":"1054","line":3,"column":10,"nodeType":"927","messageId":"928","endLine":3,"endColumn":32},{"ruleId":"974","severity":1,"message":"975","line":33,"column":13,"nodeType":"970","endLine":37,"endColumn":14},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"957","severity":1,"message":"1021","line":60,"column":6,"nodeType":"959","endLine":60,"endColumn":34,"suggestions":"1055"},{"ruleId":"974","severity":1,"message":"975","line":64,"column":7,"nodeType":"970","endLine":68,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":100,"column":15,"nodeType":"970","endLine":100,"endColumn":71},{"ruleId":"974","severity":1,"message":"975","line":105,"column":17,"nodeType":"970","endLine":110,"endColumn":18},{"ruleId":"974","severity":1,"message":"975","line":113,"column":15,"nodeType":"970","endLine":118,"endColumn":16},{"ruleId":"925","severity":1,"message":"978","line":1,"column":29,"nodeType":"927","messageId":"928","endLine":1,"endColumn":37},{"ruleId":"974","severity":1,"message":"975","line":34,"column":13,"nodeType":"970","endLine":38,"endColumn":14},{"ruleId":"925","severity":1,"message":"961","line":2,"column":10,"nodeType":"927","messageId":"928","endLine":2,"endColumn":16},{"ruleId":"925","severity":1,"message":"1056","line":18,"column":3,"nodeType":"927","messageId":"928","endLine":18,"endColumn":10},{"ruleId":"957","severity":1,"message":"1021","line":96,"column":6,"nodeType":"959","endLine":96,"endColumn":34,"suggestions":"1057"},{"ruleId":"974","severity":1,"message":"975","line":102,"column":7,"nodeType":"970","endLine":106,"endColumn":8},{"ruleId":"968","severity":1,"message":"969","line":160,"column":15,"nodeType":"970","endLine":160,"endColumn":62},{"ruleId":"974","severity":1,"message":"975","line":165,"column":17,"nodeType":"970","endLine":170,"endColumn":18},"no-native-reassign",["1058"],"no-negated-in-lhs",["1059"],"@typescript-eslint/no-unused-vars","'apiInstance' is defined but never used.","Identifier","unusedVar","'AuthContext' is defined but never used.","'React' is defined but never used.","'getUserProfile' is defined but never used.","'IChartItem' is defined but never used.","'IColumn' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","unsafeRefs","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-self-assign","'entry.amount' is assigned to itself.","MemberExpression","selfAssignment","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Breadcrumb' is defined but never used.","'InboxListing' is defined but never used.","'User' is defined but never used.","'GetUserLocalData' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentContext.userSettings.currency'. Either include it or remove the dependency array.","ArrayExpression",["1060"],"'Button' is defined but never used.","'Modal' is defined but never used.","'emptyOfferSubscriptions' is defined but never used.","'showClearFilter' is assigned a value but never used.","'setShowClearFilter' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'isMounted' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ProductsAndOffers' is defined but never used.","'showproductsAndOffersDetails' is assigned a value but never used.","'showContactUslanding' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'emptyContactUs' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'ToolBarRight' is defined but never used.","'Navigation' is defined but never used.","'Link' is defined but never used.","'helper' is defined but never used.","'LoadingOverlay' is defined but never used.","'PuffLoader' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Accordion' is defined but never used.","'Card' is defined but never used.","'Collapse' is defined but never used.","React Hook useEffect has missing dependencies: 'InboxMessages', 'currentContext.selectedCIF', 'props.item', and 'rowLimit'. Either include them or remove the dependency array.",["1061"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'setLoading' is assigned a value but never used.","'openTransactionInfo' is assigned a value but never used.","'setOpenTransactionInfo' is assigned a value but never used.","'dateIcon' is defined but never used.","'showMoreProductsAndOffersDetails' is assigned a value but never used.","'useRef' is defined but never used.","'CustomCarouselProps' is defined but never used.","'RenderItemProps' is defined but never used.","React Hook useEffect has missing dependencies: 'props.initialPage' and 'setPage'. Either include them or remove the dependency array.",["1062"],"'emptyInboxDetail' is defined but never used.","'GetAllCustomerList' is defined but never used.","'emptyCustomer' is defined but never used.","'ICustomer' is defined but never used.","'showMoreNotificationsForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'customerList'. Either include it or remove the dependency array.",["1063"],["1064"],"'showMoreProductsAndOffersForm' is assigned a value but never used.","'depositIcon' is defined but never used.","'productsICon' is defined but never used.","'emptyOfferData' is defined but never used.","'IOfferDetail' is defined but never used.","'emptyDeposit' is defined but never used.","'IDeposit' is defined but never used.","'showMoreAuthOfferRequest' is assigned a value but never used.","'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'rowLimit'. Either include it or remove the dependency array.",["1065"],"'Constant' is defined but never used.","'item' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentContext.language', 'currentContext.selectedCIF', and 'props.facilityNumber'. Either include them or remove the dependency array.",["1066"],["1067"],["1068"],"React Hook useEffect has a missing dependency: 'props.depositNumber'. Either include it or remove the dependency array.",["1069"],["1070"],"'excelIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'currentContext.language', 'currentContext.selectedCIF', and 'props.depositNumber'. Either include them or remove the dependency array.",["1071"],"'userPortfolio' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.investmentNumber'. Either include it or remove the dependency array.",["1072"],["1073"],["1074"],"React Hook useEffect has missing dependencies: 'currentContext.language', 'currentContext.selectedCIF', and 'props.investmentNumber'. Either include them or remove the dependency array.",["1075"],"'emptyTransaction' is defined but never used.","'FilterDropDownControl' is defined but never used.","React Hook useEffect has a missing dependency: 'props.params.accountNumber'. Either include it or remove the dependency array.",["1076"],["1077"],"Expected '!==' and instead saw '!='.","'applyBeneficiaryHandler' is assigned a value but never used.","'beneficiaryIconColor' is defined but never used.","'showBeneficiaryDateFilter' is assigned a value but never used.","'applyFilter' is assigned a value but never used.","'clearFilter' is assigned a value but never used.","'requestDateFilterOnchangeHandler' is assigned a value but never used.","'emptyTransactionDetail' is defined but never used.",["1078"],"'SendOTP' is defined but never used.",["1079"],"no-global-assign","no-unsafe-negation",{"desc":"1080","fix":"1081"},{"desc":"1082","fix":"1083"},{"desc":"1084","fix":"1085"},{"desc":"1086","fix":"1087"},{"desc":"1088","fix":"1089"},{"desc":"1090","fix":"1091"},{"desc":"1092","fix":"1093"},{"desc":"1090","fix":"1094"},{"desc":"1095","fix":"1096"},{"desc":"1097","fix":"1098"},{"desc":"1090","fix":"1099"},{"desc":"1100","fix":"1101"},{"desc":"1102","fix":"1103"},{"desc":"1102","fix":"1104"},{"desc":"1090","fix":"1105"},{"desc":"1106","fix":"1107"},{"desc":"1108","fix":"1109"},{"desc":"1090","fix":"1110"},{"desc":"1090","fix":"1111"},{"desc":"1090","fix":"1112"},"Update the dependencies array to be: [currentContext.selectedCIF, currentContext.userSettings.currency]",{"range":"1113","text":"1114"},"Update the dependencies array to be: [InboxMessages, currentContext.selectedCIF, props.item, props.item.description, rowLimit]",{"range":"1115","text":"1116"},"Update the dependencies array to be: [props.initialPage, props.items, setPage]",{"range":"1117","text":"1118"},"Update the dependencies array to be: [customerList, props.item]",{"range":"1119","text":"1120"},"Update the dependencies array to be: [customerList, props.itemID, props.show]",{"range":"1121","text":"1122"},"Update the dependencies array to be: [currentContext.selectedCIF, rowLimit]",{"range":"1123","text":"1124"},"Update the dependencies array to be: [currentContext.language, currentContext.selectedCIF, props.facilityNumber]",{"range":"1125","text":"1126"},{"range":"1127","text":"1124"},"Update the dependencies array to be: [rowLimit]",{"range":"1128","text":"1129"},"Update the dependencies array to be: [currentContext.selectedCIF, props.depositNumber]",{"range":"1130","text":"1131"},{"range":"1132","text":"1124"},"Update the dependencies array to be: [currentContext.language, currentContext.selectedCIF, props.depositNumber]",{"range":"1133","text":"1134"},"Update the dependencies array to be: [currentContext.selectedCIF, props.investmentNumber]",{"range":"1135","text":"1136"},{"range":"1137","text":"1136"},{"range":"1138","text":"1124"},"Update the dependencies array to be: [currentContext.language, currentContext.selectedCIF, props.investmentNumber]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [currentContext.selectedCIF, props.params.accountNumber]",{"range":"1141","text":"1142"},{"range":"1143","text":"1124"},{"range":"1144","text":"1124"},{"range":"1145","text":"1124"},[4772,4800],"[currentContext.selectedCIF, currentContext.userSettings.currency]",[2756,2780],"[InboxMessages, currentContext.selectedCIF, props.item, props.item.description, rowLimit]",[799,812],"[props.initialPage, props.items, setPage]",[4235,4247],"[customerList, props.item]",[6072,6098],"[customerList, props.itemID, props.show]",[2318,2346],"[currentContext.selectedCIF, rowLimit]",[1827,1829],"[currentContext.language, currentContext.selectedCIF, props.facilityNumber]",[2309,2337],[2004,2006],"[rowLimit]",[2653,2681],"[currentContext.selectedCIF, props.depositNumber]",[2280,2308],[1853,1855],"[currentContext.language, currentContext.selectedCIF, props.depositNumber]",[2655,2683],"[currentContext.selectedCIF, props.investmentNumber]",[2681,2709],[2322,2350],[1888,1890],"[currentContext.language, currentContext.selectedCIF, props.investmentNumber]",[2490,2518],"[currentContext.selectedCIF, props.params.accountNumber]",[2265,2293],[2550,2578],[3402,3430]]